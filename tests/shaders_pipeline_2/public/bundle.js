/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../../Akila/collision.js":
/*!************************************!*\
  !*** D:/GitHub/Akila/collision.js ***!
  \************************************/
/*! exports provided: BroadField2d, RayRaster2d, Collider2d, Collider3d, SAT2d, SAT3d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _collision_BroadField2d__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./collision/BroadField2d */ \"../../../Akila/collision/BroadField2d.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BroadField2d\", function() { return _collision_BroadField2d__WEBPACK_IMPORTED_MODULE_0__[\"BroadField2d\"]; });\n\n/* harmony import */ var _collision_RayRaster2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./collision/RayRaster2d */ \"../../../Akila/collision/RayRaster2d.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RayRaster2d\", function() { return _collision_RayRaster2d__WEBPACK_IMPORTED_MODULE_1__[\"RayRaster2d\"]; });\n\n/* harmony import */ var _collision_Collider2d__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./collision/Collider2d */ \"../../../Akila/collision/Collider2d.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Collider2d\", function() { return _collision_Collider2d__WEBPACK_IMPORTED_MODULE_2__[\"Collider2d\"]; });\n\n/* harmony import */ var _collision_Collider3d__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./collision/Collider3d */ \"../../../Akila/collision/Collider3d.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Collider3d\", function() { return _collision_Collider3d__WEBPACK_IMPORTED_MODULE_3__[\"Collider3d\"]; });\n\n/* harmony import */ var _collision_SAT2d__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./collision/SAT2d */ \"../../../Akila/collision/SAT2d.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"SAT2d\", function() { return _collision_SAT2d__WEBPACK_IMPORTED_MODULE_4__[\"SAT2d\"]; });\n\n/* harmony import */ var _collision_SAT3d__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./collision/SAT3d */ \"../../../Akila/collision/SAT3d.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"SAT3d\", function() { return _collision_SAT3d__WEBPACK_IMPORTED_MODULE_5__[\"SAT3d\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/collision.js?");

/***/ }),

/***/ "../../../Akila/collision/BroadField2d.js":
/*!*************************************************!*\
  !*** D:/GitHub/Akila/collision/BroadField2d.js ***!
  \*************************************************/
/*! exports provided: BroadField2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BroadField2d\", function() { return BroadField2d; });\nclass BroadField2d {\r\n    constructor() {\r\n        this.field = new Map();\r\n    }\r\n\r\n    add(x, y, elem) {\r\n        const index = BroadField2d.coordToIndex(x, y);\r\n\r\n        let set = this.field.get(index);\r\n\r\n        if(!set) {\r\n            set = new Set();\r\n            this.field.set(index, set);\r\n        }\r\n\r\n        set.add(elem);\r\n    }\r\n\r\n    query(x, y, buffer = new Set()) {\r\n        const index = BroadField2d.coordToIndex(x, y);\r\n\r\n        const set = this.field.get(index);\r\n        if(set) {\r\n            for(let elem of set) buffer.add(elem);\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n\r\n    static coordToIndex(x, y) {\r\n        return Math.floor(x) * BroadField2d.MAX_FIELD_VALUE + Math.floor(y);\r\n    }\r\n\r\n    clearAll() {\r\n        this.field.clear();\r\n    }\r\n}\r\n\r\nBroadField2d.MAX_FIELD_VALUE = Math.floor(Math.sqrt(Number.MAX_SAFE_INTEGER / 2));\r\nBroadField2d.MIN_FIELD_VALUE = -BroadField2d.MAX_FIELD_VALUE;\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/collision/BroadField2d.js?");

/***/ }),

/***/ "../../../Akila/collision/Collider2d.js":
/*!***********************************************!*\
  !*** D:/GitHub/Akila/collision/Collider2d.js ***!
  \***********************************************/
/*! exports provided: Collider2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Collider2d\", function() { return Collider2d; });\nconst createAxis = (x1, y1, x2, y2) => {\r\n    const axis = new Float32Array([-(y2 - y1), (x2 - x1), 0]);\r\n    const len = Math.hypot(axis[0], axis[1]);\r\n    if(len > 0) {\r\n        axis[0] = axis[0] / len;\r\n        axis[1] = axis[1] / len;\r\n    }\r\n\r\n    return axis;\r\n}\r\n\r\nclass Collider2d {\r\n    constructor(vertices, linked = true, loop = true) {\r\n        this.vertices = new Array();\r\n        this.axes = new Array();\r\n\r\n        this.radius = 0;\r\n\r\n        for(let i = 0; i < vertices.length; i += 2) {\r\n            const x = vertices[i];\r\n            const y = vertices[i + 1];\r\n\r\n            const r = Math.hypot(x, y);\r\n            if(r > this.radius) this.radius = r;\r\n\r\n            this.vertices.push(new Float32Array([x, y, 1]));\r\n        }\r\n\r\n        const step = linked ? 2 : 4;\r\n        const length = loop && linked ? vertices.length : vertices.length - 2;\r\n\r\n        for(let i = 0; i < length; i += step) {\r\n            this.axes.push(createAxis(vertices[i], vertices[i + 1], vertices[(i + 2) % vertices.length], vertices[(i + 3) % vertices.length]));\r\n        }\r\n    }\r\n\r\n    getVertices() {\r\n        return this.vertices;\r\n    }\r\n\r\n    getAxes() {\r\n        return this.axes;\r\n    }\r\n\r\n    getRadius() {\r\n        return this.radius;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/collision/Collider2d.js?");

/***/ }),

/***/ "../../../Akila/collision/Collider3d.js":
/*!***********************************************!*\
  !*** D:/GitHub/Akila/collision/Collider3d.js ***!
  \***********************************************/
/*! exports provided: Collider3d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Collider3d\", function() { return Collider3d; });\nclass Collider3d {\r\n    constructor(vertices, normals) {\r\n        this.vertices = new Array();\r\n        this.axes = new Array();\r\n\r\n        this.radius = 0;\r\n\r\n        for(let i = 0; i < vertices.length; i += 3) {\r\n            const x = vertices[i];\r\n            const y = vertices[i + 1];\r\n            const z = vertices[i + 2];\r\n\r\n            const r = Math.hypot(x, y, z);\r\n            if(r > this.radius) this.radius = r;\r\n\r\n            this.vertices.push(new Float32Array([x, y, z, 1]));\r\n        }\r\n\r\n\r\n        for(let i = 0; i < normals.length; i += 3) {\r\n            const x = normals[i];\r\n            const y = normals[i + 1];\r\n            const z = normals[i + 2];\r\n\r\n            this.axes.push(new Float32Array([x, y, z, 0]));\r\n        }\r\n    }\r\n\r\n    getVertices() {\r\n        return this.vertices;\r\n    }\r\n\r\n    getAxes() {\r\n        return this.axes;\r\n    }\r\n\r\n    getRadius() {\r\n        return this.radius;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/collision/Collider3d.js?");

/***/ }),

/***/ "../../../Akila/collision/RayRaster2d.js":
/*!************************************************!*\
  !*** D:/GitHub/Akila/collision/RayRaster2d.js ***!
  \************************************************/
/*! exports provided: RayRaster2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RayRaster2d\", function() { return RayRaster2d; });\n/* harmony import */ var _BroadField2d__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BroadField2d */ \"../../../Akila/collision/BroadField2d.js\");\n\r\n\r\nclass RayRaster2d {\r\n    static addToField(x0, y0, x1, y1, field = new _BroadField2d__WEBPACK_IMPORTED_MODULE_0__[\"BroadField2d\"](), data) {\r\n        /*const dy = y1 - y0;\r\n        const dx = x1 - x0;\r\n        \r\n        if(dx == 0 && dy == 0) {\r\n            field.add(x0, y0, data);\r\n            return;\r\n        }*/\r\n\r\n        RayRaster2d.currentField = field;\r\n\r\n        const xDir = (x1 > x0);\r\n        const yDir = (y1 > y0);\r\n        const diff = (xDir ^ yDir) ? 1 : 0;\r\n\r\n        if (xDir) RayRaster2d._lookX(x0, y0, x1, y1, 0, data);\r\n        else RayRaster2d._lookX(x1, y1, x0, y0, diff, data);\r\n        \r\n        if (yDir) RayRaster2d._lookY(x0, y0, x1, y1, 0, data);\r\n        else RayRaster2d._lookY(x1, y1, x0, y0, diff, data);\r\n    }\r\n\r\n    static _lookX(x0, y0, x1, y1, dec, data) {\r\n        RayRaster2d.currentField.add(x0, y0, data);\r\n\r\n        const dy = y1 - y0;\r\n        const dx = x1 - x0;\r\n        const m = dy / dx;\r\n\r\n        for(let x = Math.floor(x0) + 1; x <= x1; ++x) {\r\n            const y = m * (x - x0) + y0;\r\n            RayRaster2d.currentField.add(x - dec, y, data);\r\n        }\r\n    }\r\n\r\n    static _lookY(x0, y0, x1, y1, dec, data) {\r\n        RayRaster2d.currentField.add(x0, y0, data);\r\n\r\n        const dy = y1 - y0;\r\n        const dx = x1 - x0;\r\n        const m = dx / dy;\r\n\r\n        for(let y = Math.floor(y0) + 1; y <= y1; ++y) {\r\n            const x =  m * (y - y0) + x0;\r\n            RayRaster2d.currentField.add(x, y - dec, data);\r\n        }\r\n    }\r\n}\r\n\r\nRayRaster2d.currentField = null;\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/collision/RayRaster2d.js?");

/***/ }),

/***/ "../../../Akila/collision/SAT2d.js":
/*!******************************************!*\
  !*** D:/GitHub/Akila/collision/SAT2d.js ***!
  \******************************************/
/*! exports provided: SAT2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SAT2d\", function() { return SAT2d; });\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math */ \"../../../Akila/math/index.js\");\n\r\n\r\nconst dot = (v1, v2) => {\r\n    return v1[0] * v2[0] + v1[1] * v2[1];\r\n}\r\n\r\nlet multMat3;\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n\r\nconst projectionMin = (vertices, mat) => {\r\n    let min = Infinity;\r\n    \r\n    for(const vertex of vertices) {\r\n        multMat3(SAT2d.bufferA, vertex, mat);\r\n        const val = dot(SAT2d.bufferA, SAT2d.bufferN);\r\n\r\n        if(val < min) min = val;\r\n    }\r\n\r\n    return min;\r\n}\r\n\r\nconst projectionMax = (vertices, mat) => {\r\n    let max = -Infinity;\r\n\r\n    for(const vertex of vertices) {\r\n        multMat3(SAT2d.bufferA, vertex, mat);\r\n        const val = dot(SAT2d.bufferA, SAT2d.bufferN);\r\n\r\n        if(val > max) max = val;\r\n    }\r\n\r\n    return max;\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////\r\n\r\n\r\nconst circleBroadTest = (colliderA, matA, colliderB, matB) => {\r\n    const dx = matA[6] - matB[6];\r\n    const dy = matA[7] - matB[7];\r\n    const distanceSQR = dx * dx + dy * dy;\r\n    const radiusDistance = colliderA.radius + colliderB.radius;\r\n    \r\n    return distanceSQR < (radiusDistance * radiusDistance);\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////\r\n\r\nclass SAT2d {\r\n\r\n    static setMatMode(mode) {\r\n        if(mode == SAT2d.MAT3) multMat3 = _math__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].transformMat3;\r\n        else if(mode == SAT2d.MAT4XY) multMat3 = (out, a, m) => {\r\n            let x = a[0], z = a[1], w = a[2];\r\n            out[0] = m[0] * x + m[8] * z + m[12] * w;\r\n            out[1] = m[1] * x + m[9] * z + m[13] * w;\r\n            out[2] = m[2] * x + m[10] * z + m[14] * w;\r\n \r\n            return out;\r\n        }\r\n        else if(mode == SAT2d.MAT4XZ) multMat3 = (out, a, m) => {\r\n            let x = a[0], z = a[1], w = a[2];\r\n            out[0] = m[0] * x + m[8] * z + m[12] * w;\r\n            out[2] = m[1] * x + m[9] * z + m[13] * w;\r\n            out[1] = m[2] * x + m[10] * z + m[14] * w;\r\n \r\n            return out;\r\n        }\r\n    }\r\n\r\n    static createResultBuffer() {\r\n        return {\r\n            axis: new Float32Array([0, 0]),\r\n            length: 0\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Retourne l'axe et la distance minimum de séparation par rapport à colliderA\r\n     */\r\n    static getMin(colliderA, matA, colliderB, matB, buffer = {axis: new Float32Array(2)}) {\r\n        buffer.axis[0] = 0;\r\n        buffer.axis[1] = 0;\r\n        buffer.length = 0;\r\n\r\n        if(!circleBroadTest(colliderA, matA, colliderB, matB)) return buffer;\r\n\r\n        let diff = Infinity;\r\n        let isColliderA = true;\r\n        for(const axis of colliderA.axes) {\r\n            multMat3(SAT2d.bufferN, axis, matA);\r\n            const max = projectionMax(colliderA.vertices, matA);\r\n            const min = projectionMin(colliderB.vertices, matB);\r\n\r\n            const o = max - min;\r\n\r\n            if(o <= 0) return buffer;\r\n            if(diff > o) {\r\n                diff = o;\r\n                SAT2d.bufferB[0] = SAT2d.bufferN[0];\r\n                SAT2d.bufferB[1] = SAT2d.bufferN[1];\r\n            }\r\n        }\r\n\r\n        for(const axis of colliderB.axes) {\r\n            multMat3(SAT2d.bufferN, axis, matB);\r\n            const min = projectionMin(colliderA.vertices, matA);\r\n            const max = projectionMax(colliderB.vertices, matB);\r\n\r\n            const o = max - min;\r\n\r\n            if(o <= 0) return buffer;\r\n            if(diff > o) {\r\n                diff = o;\r\n                isColliderA = false;\r\n                SAT2d.bufferB[0] = SAT2d.bufferN[0];\r\n                SAT2d.bufferB[1] = SAT2d.bufferN[1];\r\n            }\r\n        }\r\n\r\n        if(isColliderA) {\r\n            buffer.axis[0] = -SAT2d.bufferB[0];\r\n            buffer.axis[1] = -SAT2d.bufferB[1];\r\n        } else {\r\n            buffer.axis[0] = SAT2d.bufferB[0];\r\n            buffer.axis[1] = SAT2d.bufferB[1];\r\n        }\r\n        \r\n        buffer.length = diff;\r\n        \r\n        return buffer;\r\n    }\r\n}\r\n\r\nSAT2d.setMatMode(SAT2d.MAT3);\r\n\r\nSAT2d.bufferA = new Float32Array(3);\r\nSAT2d.bufferB = new Float32Array(3);\r\nSAT2d.bufferN = new Float32Array(3);\r\n\r\nSAT2d.MAT3 = 0;\r\nSAT2d.MAT4XY = 1;\r\nSAT2d.MAT4XZ = 2;\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/collision/SAT2d.js?");

/***/ }),

/***/ "../../../Akila/collision/SAT3d.js":
/*!******************************************!*\
  !*** D:/GitHub/Akila/collision/SAT3d.js ***!
  \******************************************/
/*! exports provided: SAT3d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SAT3d\", function() { return SAT3d; });\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math */ \"../../../Akila/math/index.js\");\n\r\n\r\nconst dot = (v1, v2) => {\r\n    return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];\r\n}\r\n\r\n\r\nwindow.dot = dot\r\nwindow.vec4 = _math__WEBPACK_IMPORTED_MODULE_0__[\"vec4\"]\r\nwindow.vec3 = _math__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"]\r\n\r\nlet multMat4;\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n\r\nconst projectionMin = (vertices, mat) => {\r\n    let min = Infinity;\r\n    \r\n    for(const vertex of vertices) {\r\n        multMat4(SAT3d.bufferA, vertex, mat);\r\n        const val = dot(SAT3d.bufferA, SAT3d.bufferN);\r\n\r\n        //if(val < min) min = val;\r\n\r\n        if(val < min) {\r\n            min = val;\r\n\r\n            SAT3d.bufferC[0] = SAT3d.bufferA[0];\r\n            SAT3d.bufferC[1] = SAT3d.bufferA[1];\r\n            SAT3d.bufferC[2] = SAT3d.bufferA[2];\r\n        }\r\n    }\r\n\r\n    return min;\r\n}\r\n\r\nconst projectionMax = (vertices, mat) => {\r\n    let max = -Infinity;\r\n\r\n    for(const vertex of vertices) {\r\n        multMat4(SAT3d.bufferA, vertex, mat);\r\n        const val = dot(SAT3d.bufferA, SAT3d.bufferN);\r\n\r\n        if(val > max) max = val;\r\n    }\r\n\r\n    return max;\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////\r\n\r\n\r\nconst circleBroadTest = (colliderA, matA, colliderB, matB) => {\r\n    const dx = matA[12] - matB[12];\r\n    const dy = matA[13] - matB[13];\r\n    const dz = matA[14] - matB[14];\r\n    const distanceSQR = dx * dx + dy * dy + dz * dz;\r\n    const radiusDistance = colliderA.radius + colliderB.radius;\r\n    \r\n    return distanceSQR < (radiusDistance * radiusDistance);\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////\r\n\r\nclass SAT3d {\r\n\r\n    static setMatMode(mode) {\r\n        /*if(mode == SAT3d.MAT3) multMat4 = vec4.transformMat4;\r\n        else if(mode == SAT3d.MAT4XY) multMat3 = (out, a, m) => {\r\n            let x = a[0], z = a[1], w = a[2];\r\n            out[0] = m[0] * x + m[8] * z + m[12] * w;\r\n            out[1] = m[1] * x + m[9] * z + m[13] * w;\r\n            out[2] = m[2] * x + m[10] * z + m[14] * w;\r\n \r\n            return out;\r\n        }\r\n        else if(mode == SAT3d.MAT4XZ) multMat3 = (out, a, m) => {\r\n            let x = a[0], z = a[1], w = a[2];\r\n            out[0] = m[0] * x + m[8] * z + m[12] * w;\r\n            out[2] = m[1] * x + m[9] * z + m[13] * w;\r\n            out[1] = m[2] * x + m[10] * z + m[14] * w;\r\n \r\n            return out;\r\n        }*/\r\n\r\n        multMat4 = _math__WEBPACK_IMPORTED_MODULE_0__[\"vec4\"].transformMat4;\r\n    }\r\n\r\n    static createResultBuffer() {\r\n        return {\r\n            axis: new Float32Array([0, 0, 0]),\r\n            length: 0\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Retourne l'axe et la distance minimum de séparation par rapport à colliderA\r\n     */\r\n    static getMin(colliderA, matA, colliderB, matB, buffer = {axis: new Float32Array(3)}) {\r\n        buffer.axis[0] = 0;\r\n        buffer.axis[1] = 0;\r\n        buffer.axis[2] = 0;\r\n        buffer.length = 0;\r\n\r\n        buffer.minPoint = new Float32Array(3);\r\n\r\n        //if(!circleBroadTest(colliderA, matA, colliderB, matB)) return buffer;\r\n\r\n        let diff = Infinity;\r\n        let isColliderA = true;\r\n        for(const axis of colliderA.axes) {\r\n            multMat4(SAT3d.bufferN, axis, matA);\r\n            const max = projectionMax(colliderA.vertices, matA);\r\n            const min = projectionMin(colliderB.vertices, matB);\r\n\r\n            const o = max - min;\r\n\r\n            if(o <= 0) return buffer;\r\n            if(diff > o) {\r\n                diff = o;\r\n                SAT3d.bufferB[0] = SAT3d.bufferN[0];\r\n                SAT3d.bufferB[1] = SAT3d.bufferN[1];\r\n                SAT3d.bufferB[2] = SAT3d.bufferN[2];\r\n\r\n\r\n                buffer.minPoint[0] = SAT3d.bufferC[0];\r\n                buffer.minPoint[1] = SAT3d.bufferC[1];\r\n                buffer.minPoint[2] = SAT3d.bufferC[2];\r\n            }\r\n        }\r\n\r\n        for(const axis of colliderB.axes) {\r\n            multMat4(SAT3d.bufferN, axis, matB);\r\n            const min = projectionMin(colliderA.vertices, matA);\r\n            const max = projectionMax(colliderB.vertices, matB);\r\n\r\n            const o = max - min;\r\n\r\n            if(o <= 0) return buffer;\r\n            if(diff > o) {\r\n                diff = o;\r\n                isColliderA = false;\r\n                SAT3d.bufferB[0] = SAT3d.bufferN[0];\r\n                SAT3d.bufferB[1] = SAT3d.bufferN[1];\r\n                SAT3d.bufferB[2] = SAT3d.bufferN[2];\r\n\r\n                buffer.minPoint[0] = SAT3d.bufferC[0];\r\n                buffer.minPoint[1] = SAT3d.bufferC[1];\r\n                buffer.minPoint[2] = SAT3d.bufferC[2];\r\n            }\r\n        }\r\n\r\n\r\n        if(isColliderA) {\r\n            buffer.axis[0] = -SAT3d.bufferB[0];\r\n            buffer.axis[1] = -SAT3d.bufferB[1];\r\n            buffer.axis[2] = -SAT3d.bufferB[2];\r\n        } else {\r\n            buffer.axis[0] = SAT3d.bufferB[0];\r\n            buffer.axis[1] = SAT3d.bufferB[1];\r\n            buffer.axis[2] = SAT3d.bufferB[2];\r\n        }\r\n        \r\n        buffer.length = diff;\r\n       \r\n        return buffer;\r\n    }\r\n}\r\n\r\nSAT3d.setMatMode();\r\n\r\nSAT3d.bufferA = new Float32Array(4);\r\nSAT3d.bufferB = new Float32Array(4);\r\nSAT3d.bufferC = new Float32Array(4);\r\nSAT3d.bufferN = new Float32Array(4);\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/collision/SAT3d.js?");

/***/ }),

/***/ "../../../Akila/inputs.js":
/*!*********************************!*\
  !*** D:/GitHub/Akila/inputs.js ***!
  \*********************************/
/*! exports provided: Keyboard, Mouse, Gamepad, Gesture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _inputs_Keyboard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./inputs/Keyboard */ \"../../../Akila/inputs/Keyboard.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Keyboard\", function() { return _inputs_Keyboard__WEBPACK_IMPORTED_MODULE_0__[\"Keyboard\"]; });\n\n/* harmony import */ var _inputs_Mouse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./inputs/Mouse */ \"../../../Akila/inputs/Mouse.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Mouse\", function() { return _inputs_Mouse__WEBPACK_IMPORTED_MODULE_1__[\"Mouse\"]; });\n\n/* harmony import */ var _inputs_Gamepad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./inputs/Gamepad */ \"../../../Akila/inputs/Gamepad.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Gamepad\", function() { return _inputs_Gamepad__WEBPACK_IMPORTED_MODULE_2__[\"Gamepad\"]; });\n\n/* harmony import */ var _inputs_Gesture__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./inputs/Gesture */ \"../../../Akila/inputs/Gesture.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Gesture\", function() { return _inputs_Gesture__WEBPACK_IMPORTED_MODULE_3__[\"Gesture\"]; });\n\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/inputs.js?");

/***/ }),

/***/ "../../../Akila/inputs/Gamepad.js":
/*!*****************************************!*\
  !*** D:/GitHub/Akila/inputs/Gamepad.js ***!
  \*****************************************/
/*! exports provided: Gamepad */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Gamepad\", function() { return Gamepad; });\n/* harmony import */ var _time_Time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../time/Time */ \"../../../Akila/time/Time.js\");\n\r\n\r\nclass Gamepad {\r\n    constructor() {\r\n        if(Gamepad.instance != null) return;\r\n        Gamepad.instance = this;\r\n        _time_Time__WEBPACK_IMPORTED_MODULE_0__[\"Time\"].gamepad = this.update;\r\n\r\n        this.states = new Array();\r\n        this.connect = [false, false, false, false];\r\n        this.setDeadZone(0.1);\r\n\r\n        for(let i = 0; i < 4; ++i) this.clear(i);\r\n\r\n        window.addEventListener(\"gamepadconnected\", event => {\r\n            this.connect[event.gamepad.index] = true;\r\n        });\r\n\r\n        window.addEventListener(\"gamepaddisconnected\", event => {\r\n            this.clear(event.gamepad.index);\r\n            this.connect[event.gamepad.index] = false;\r\n        });\r\n    }\r\n\r\n    clear(player = Gamepad.PLAYER1) {\r\n        const buttons = new Array();\r\n\r\n        for(let i = 0; i < 17; ++i) buttons.push({value: 0});\r\n\r\n        Gamepad.instance.states[player] = {\r\n            axes: [0, 0, 0, 0],\r\n            buttons: buttons\r\n        };\r\n    }\r\n\r\n    update() {\r\n        let i = 0;\r\n        for (let m of navigator.getGamepads()) if(m) {\r\n            const state = Gamepad.instance.states[i++];\r\n            state.buttons = m.buttons;\r\n            //state.axes = m.axes;\r\n            state.axes[0] = m.axes[0] >= Gamepad.deadZone || m.axes[0] <= -Gamepad.deadZone ? m.axes[0] : 0;\r\n            state.axes[1] = m.axes[1] >= Gamepad.deadZone || m.axes[1] <= -Gamepad.deadZone ? m.axes[1] : 0;\r\n            state.axes[2] = m.axes[2] >= Gamepad.deadZone || m.axes[2] <= -Gamepad.deadZone ? m.axes[2] : 0;\r\n            state.axes[3] = m.axes[3] >= Gamepad.deadZone || m.axes[3] <= -Gamepad.deadZone ? m.axes[3] : 0;\r\n        }\r\n    }\r\n\r\n    isConnect(player = Gamepad.PLAYER1) {\r\n        return Gamepad.instance.connect[player];\r\n    }\r\n\r\n    setDeadZone(value) {\r\n        Gamepad.deadZone = value;\r\n    }\r\n\r\n    getButton(button, player = Gamepad.PLAYER1) {\r\n        return Gamepad.instance.states[player].buttons[button].value;\r\n    }\r\n\r\n    getStickAX(player = Gamepad.PLAYER1) {\r\n        return Gamepad.instance.states[player].axes[0];\r\n    }\r\n\r\n    getStickAY(player = Gamepad.PLAYER1) {\r\n        return Gamepad.instance.states[player].axes[1];\r\n    }\r\n\r\n    getStickBX(player = Gamepad.PLAYER1) {\r\n        return Gamepad.instance.states[player].axes[2];\r\n    }\r\n\r\n    getStickBY(player = Gamepad.PLAYER1) {\r\n        return Gamepad.instance.states[player].axes[3];\r\n    }\r\n}\r\n\r\nGamepad.instance = null;\r\n\r\nGamepad.PLAYER1 = 0;\r\nGamepad.PLAYER2 = 2;\r\nGamepad.PLAYER3 = 2;\r\nGamepad.PLAYER4 = 3;\r\n\r\nGamepad.A = 0;\r\nGamepad.B = 1;\r\nGamepad.X = 2;\r\nGamepad.Y = 3;\r\n\r\nGamepad.LEFT_BUTTON = 4;\r\nGamepad.RIGHT_BUTTON = 5;\r\n\r\nGamepad.LEFT_TRIGGER = 6;\r\nGamepad.RIGHT_TRIGGER = 7;\r\n\r\nGamepad.SELECT = 8;\r\nGamepad.START = 9;\r\n\r\nGamepad.LEFT_STICK = 10;\r\nGamepad.RIGHT_STICK = 11;\r\n\r\nGamepad.UP = 12;\r\nGamepad.DOWN = 13;\r\nGamepad.LEFT = 14;\r\nGamepad.RIGHT = 15;\r\n\r\nGamepad.GUIDE = 16;\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/inputs/Gamepad.js?");

/***/ }),

/***/ "../../../Akila/inputs/Gesture.js":
/*!*****************************************!*\
  !*** D:/GitHub/Akila/inputs/Gesture.js ***!
  \*****************************************/
/*! exports provided: Gesture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Gesture\", function() { return Gesture; });\n/* harmony import */ var _time_Time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../time/Time */ \"../../../Akila/time/Time.js\");\n/* harmony import */ var _webgl_Display__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl/Display */ \"../../../Akila/webgl/Display.js\");\n\r\n\r\n\r\nclass Gesture {\r\n    constructor() {\r\n        if(Gesture.instance != null) return;\r\n        Gesture.instance = this;\r\n\r\n        if(_webgl_Display__WEBPACK_IMPORTED_MODULE_1__[\"Display\"].ctx) this.setDOMElementReference(_webgl_Display__WEBPACK_IMPORTED_MODULE_1__[\"Display\"].ctx.canvas);\r\n        else this.setDOMElementReference({\r\n            getBoundingClientRect: () => {\r\n                return {left: 0, top: 0};\r\n            } \r\n        });\r\n\r\n        //document.getElementsByTagName('body')[0].requestFullscreen().then(console.log).catch(console.log)\r\n\r\n        this.clear();\r\n\r\n        window.addEventListener('touchstart', event => {\r\n            const rect = Gesture.domRef.getBoundingClientRect();\r\n            const t1 = event.touches[0];\r\n\r\n            Gesture.instance.x = t1.clientX - (rect.left + window.scrollX);\r\n            Gesture.instance.y = t1.clientY - (rect.top + window.scrollY);\r\n\r\n            Gesture.instance.lastX = Gesture.instance.x;\r\n            Gesture.instance.lastY = Gesture.instance.y;\r\n\r\n            Gesture.isTouch = true;\r\n        });\r\n\r\n        window.addEventListener('touchmove', event => {\r\n            const rect = Gesture.domRef.getBoundingClientRect();\r\n            const t1 = event.touches[0];\r\n            //console.log(t1)\r\n\r\n            Gesture.instance.x = t1.clientX - (rect.left + window.scrollX);\r\n            Gesture.instance.y = t1.clientY - (rect.top + window.scrollY);\r\n\r\n\r\n\r\n            Gesture.instance.movX = Gesture.instance.x - Gesture.instance.lastX;\r\n            Gesture.instance.movY = Gesture.instance.y - Gesture.instance.lastY;\r\n\r\n\r\n\r\n            Gesture.instance.lastX = Gesture.instance.x;\r\n            Gesture.instance.lastY = Gesture.instance.y;\r\n\r\n            Gesture.isTouch = true;\r\n        });\r\n\r\n        window.addEventListener('touchend', event => {\r\n            Gesture.instance.movX = 0;\r\n            Gesture.instance.movY = 0;\r\n            Gesture.isTouch = false;\r\n        });\r\n    }\r\n\r\n    clear() {\r\n        Gesture.instance.lastX = 0;\r\n        Gesture.instance.lastY = 0;\r\n\r\n        Gesture.instance.x = 0;\r\n        Gesture.instance.y = 0;\r\n\r\n        Gesture.instance.movX = 0;\r\n        Gesture.instance.movY = 0;\r\n\r\n        Gesture.isTouch = false;\r\n    }\r\n\r\n    isTouch() {\r\n        return Gesture.isTouch;\r\n    }\r\n\r\n    touchX() {\r\n        return Gesture.instance.x;\r\n    }\r\n\r\n    touchY() {\r\n        return Gesture.instance.y;\r\n    }\r\n\r\n    swipX() {\r\n        return Gesture.instance.movX;\r\n    }\r\n\r\n    swipY() {\r\n        return Gesture.instance.movY;\r\n    }\r\n\r\n    scaleVel() {\r\n        \r\n    }\r\n\r\n    setDOMElementReference(elem) {\r\n        Gesture.domRef = elem;\r\n    }\r\n}\r\n\r\nGesture.instance = null;\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/inputs/Gesture.js?");

/***/ }),

/***/ "../../../Akila/inputs/Keyboard.js":
/*!******************************************!*\
  !*** D:/GitHub/Akila/inputs/Keyboard.js ***!
  \******************************************/
/*! exports provided: Keyboard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Keyboard\", function() { return Keyboard; });\nclass Keyboard {\r\n    constructor() {\r\n        if(Keyboard.instance != null) return;\r\n        Keyboard.instance = this;\r\n\r\n        this.pressStates = new Array();\r\n        this.toggleStates = new Array();\r\n\r\n        this.clear();\r\n\r\n        window.onkeydown = event => {\r\n            if (!event.ctrlKey) return;\r\n            switch (event.keyCode) {\r\n                case 83: //Block Ctrl+S\r\n                case 68: //Block Ctrl+D\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        };\r\n\r\n        window.addEventListener('keydown', event => {\r\n            this.pressStates[event.keyCode] = true;\r\n            this.toggleStates[event.keyCode] = !this.toggleStates[event.keyCode];\r\n            return false;\r\n        });\r\n\r\n        window.addEventListener('keyup', event => {\r\n            this.pressStates[event.keyCode] = false;\r\n            return false;\r\n        });\r\n\r\n        window.addEventListener('blur', e => {\r\n            for(let i = 0; i < 256; ++i) {\r\n                Keyboard.instance.pressStates[i] = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    clear() {\r\n        for(let i = 0; i < 256; ++i) {\r\n            Keyboard.instance.pressStates[i] = false;\r\n            Keyboard.instance.toggleStates[i] = false;\r\n        }\r\n    }\r\n\r\n    isPressed(key) {\r\n        return Keyboard.instance.pressStates[key];\r\n    }\r\n\r\n    isToggled(key) {\r\n        return Keyboard.instance.toggleStates[key];\r\n    }\r\n}\r\n\r\nKeyboard.instance = null;\r\n\r\nKeyboard.BACKSPACE = 8;\r\nKeyboard.TAB = 9;\r\nKeyboard.ENTER = 13;\r\nKeyboard.SHIFT = 16;\r\nKeyboard.CTRL = 17;\r\nKeyboard.ALT = 18;\r\nKeyboard.PAUSE = 19;\r\nKeyboard.CAPS_LOCK = 20;\r\nKeyboard.ESCAPE = 27;\r\nKeyboard.SPACE = 32;\r\nKeyboard.PAGE_UP = 33;\r\nKeyboard.PAGE_DOWN = 34;\r\nKeyboard.END = 35;\r\nKeyboard.HOME = 36;\r\nKeyboard.LEFT_ARROW = 37;\r\nKeyboard.UP_ARROW = 38;\r\nKeyboard.RIGHT_ARROW = 39;\r\nKeyboard.DOWN_ARROW = 40;\r\nKeyboard.INSERT = 45;\r\nKeyboard.DELETE = 46;\r\nKeyboard.KEY_0 = 48;\r\nKeyboard.KEY_1 = 49;\r\nKeyboard.KEY_2 = 50;\r\nKeyboard.KEY_3 = 51;\r\nKeyboard.KEY_4 = 52;\r\nKeyboard.KEY_5 = 53;\r\nKeyboard.KEY_6 = 54;\r\nKeyboard.KEY_7 = 55;\r\nKeyboard.KEY_8 = 56;\r\nKeyboard.KEY_9 = 57;\r\nKeyboard.KEY_A = 65;\r\nKeyboard.KEY_B = 66;\r\nKeyboard.KEY_C = 67;\r\nKeyboard.KEY_D = 68;\r\nKeyboard.KEY_E = 69;\r\nKeyboard.KEY_F = 70;\r\nKeyboard.KEY_G = 71;\r\nKeyboard.KEY_H = 72;\r\nKeyboard.KEY_I = 73;\r\nKeyboard.KEY_J = 74;\r\nKeyboard.KEY_K = 75;\r\nKeyboard.KEY_L = 76;\r\nKeyboard.KEY_M = 77;\r\nKeyboard.KEY_N = 78;\r\nKeyboard.KEY_O = 79;\r\nKeyboard.KEY_P = 80;\r\nKeyboard.KEY_Q = 81;\r\nKeyboard.KEY_R = 82;\r\nKeyboard.KEY_S = 83;\r\nKeyboard.KEY_T = 84;\r\nKeyboard.KEY_U = 85;\r\nKeyboard.KEY_V = 86;\r\nKeyboard.KEY_W = 87;\r\nKeyboard.KEY_X = 88;\r\nKeyboard.KEY_Y = 89;\r\nKeyboard.KEY_Z = 90;\r\nKeyboard.LEFT_META = 91;\r\nKeyboard.RIGHT_META = 92;\r\nKeyboard.SELECT = 93;\r\nKeyboard.NUMPAD_0 = 96;\r\nKeyboard.NUMPAD_1 = 97;\r\nKeyboard.NUMPAD_2 = 98;\r\nKeyboard.NUMPAD_3 = 99;\r\nKeyboard.NUMPAD_4 = 100;\r\nKeyboard.NUMPAD_5 = 101;\r\nKeyboard.NUMPAD_6 = 102;\r\nKeyboard.NUMPAD_7 = 103;\r\nKeyboard.NUMPAD_8 = 104;\r\nKeyboard.NUMPAD_9 = 105;\r\nKeyboard.MULTIPLY = 106;\r\nKeyboard.ADD = 107;\r\nKeyboard.SUBTRACT = 109;\r\nKeyboard.DECIMAL = 110;\r\nKeyboard.DIVIDE = 111;\r\nKeyboard.F1 = 112;\r\nKeyboard.F2 = 113;\r\nKeyboard.F3 = 114;\r\nKeyboard.F4 = 115;\r\nKeyboard.F5 = 116;\r\nKeyboard.F6 = 117;\r\nKeyboard.F7 = 118;\r\nKeyboard.F8 = 119;\r\nKeyboard.F9 = 120;\r\nKeyboard.F10 = 121;\r\nKeyboard.F11 = 122;\r\nKeyboard.F12 = 123;\r\nKeyboard.NUM_LOCK = 144;\r\nKeyboard.SCROLL_LOCK = 145;\r\nKeyboard.SEMICOLON = 186;\r\nKeyboard.EQUALS = 187;\r\nKeyboard.COMMA = 188;\r\nKeyboard.DASH = 189;\r\nKeyboard.PERIOD = 190;\r\nKeyboard.FORWARD_SLASH = 191;\r\nKeyboard.GRAVE_ACCENT = 192;\r\nKeyboard.OPEN_BRACKET = 219;\r\nKeyboard.BACK_SLASH = 220;\r\nKeyboard.CLOSE_BRACKET = 221;\r\nKeyboard.SINGLE_QUOTE = 222;\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/inputs/Keyboard.js?");

/***/ }),

/***/ "../../../Akila/inputs/Mouse.js":
/*!***************************************!*\
  !*** D:/GitHub/Akila/inputs/Mouse.js ***!
  \***************************************/
/*! exports provided: Mouse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Mouse\", function() { return Mouse; });\n/* harmony import */ var _time_Time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../time/Time */ \"../../../Akila/time/Time.js\");\n/* harmony import */ var _webgl_Display__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl/Display */ \"../../../Akila/webgl/Display.js\");\n\r\n\r\n\r\nclass Mouse {\r\n    constructor() {\r\n        if(Mouse.instance != null) return;\r\n        Mouse.instance = this;\r\n        _time_Time__WEBPACK_IMPORTED_MODULE_0__[\"Time\"].mouse = this.update;\r\n\r\n        this.pressStates = new Array();\r\n        this.toggleStates = new Array();\r\n\r\n        this.x = 0;\r\n        this.y = 0;\r\n\r\n        this.update();\r\n\r\n        if(_webgl_Display__WEBPACK_IMPORTED_MODULE_1__[\"Display\"].ctx) this.setDOMElementReference(_webgl_Display__WEBPACK_IMPORTED_MODULE_1__[\"Display\"].ctx.canvas);\r\n        else this.setDOMElementReference({\r\n            getBoundingClientRect: () => {\r\n                return {left: 0, top: 0};\r\n            } \r\n        });\r\n\r\n        this.clear();\r\n\r\n        window.addEventListener('mousedown', event => {\r\n            event.preventDefault();\r\n            this.pressStates[event.button] = true;\r\n            this.toggleStates[event.button] = !this.toggleStates[event.button];\r\n        });\r\n\r\n        window.addEventListener('mouseup', event => {\r\n            this.pressStates[event.button] = false;\r\n        });\r\n\r\n        window.addEventListener('contextmenu', event => {\r\n            event.preventDefault();\r\n            return false;\r\n        });\r\n\r\n        window.addEventListener('mousemove', event => {\r\n            const rect = Mouse.domRef.getBoundingClientRect();\r\n            Mouse.instance.x = event.clientX - (rect.left + window.scrollX);\r\n            Mouse.instance.y = event.clientY - (rect.top + window.scrollY);\r\n\r\n            Mouse.instance.movX += event.movementX;\r\n            Mouse.instance.movY += event.movementY;\r\n        });\r\n\r\n        window.addEventListener('wheel', event => {\r\n            if(event.deltaX > 0) Mouse.instance.mouseScrollVelX = 1;\r\n            else if(event.deltaX < 0) Mouse.instance.mouseScrollVelX = -1;\r\n\r\n            if(event.deltaY > 0) Mouse.instance.mouseScrollVelY = 1;\r\n            else if(event.deltaY < 0) Mouse.instance.mouseScrollVelY = -1;\r\n\r\n            return false;\r\n        });\r\n    }\r\n\r\n\r\n\r\n    clear() {\r\n        for(let i = 0; i < 4; ++i) {\r\n            Mouse.instance.pressStates[i] = false;\r\n            Mouse.instance.toggleStates[i] = false;\r\n        }\r\n    }\r\n\r\n    update() {\r\n        Mouse.instance.mouseScrollVelX = 0;\r\n        Mouse.instance.mouseScrollVelY = 0;\r\n\r\n        Mouse.instance.movX = 0;\r\n        Mouse.instance.movY = 0;\r\n    }\r\n\r\n    isPressed(button) {\r\n        return Mouse.instance.pressStates[button];\r\n    }\r\n\r\n    isToggled(button) {\r\n        return Mouse.instance.toggleStates[button];\r\n    }\r\n\r\n    posX() {\r\n        return Mouse.instance.x;\r\n    }\r\n\r\n    posY() {\r\n        return Mouse.instance.y;\r\n    }\r\n\r\n    velX() {\r\n        return Mouse.instance.movX;\r\n    }\r\n\r\n    velY() {\r\n        return Mouse.instance.movY;\r\n    }\r\n\r\n    scrollVelX() {      \r\n        return Mouse.instance.mouseScrollVelX;\r\n    }\r\n\r\n    scrollVelY() {\r\n        return Mouse.instance.mouseScrollVelY;\r\n    }\r\n\r\n    setDOMElementReference(elem) {\r\n        Mouse.domRef = elem;\r\n    }\r\n}\r\n\r\nMouse.instance = null;\r\n\r\nMouse.LEFT_BUTTON = 0;\r\nMouse.WHEEL_BUTTON = 1;\r\nMouse.RIGHT_BUTTON = 2;\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/inputs/Mouse.js?");

/***/ }),

/***/ "../../../Akila/math/common.js":
/*!**************************************!*\
  !*** D:/GitHub/Akila/math/common.js ***!
  \**************************************/
/*! exports provided: EPSILON, ARRAY_TYPE, RANDOM, setMatrixArrayType, toRadian, equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EPSILON\", function() { return EPSILON; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ARRAY_TYPE\", function() { return ARRAY_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RANDOM\", function() { return RANDOM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setMatrixArrayType\", function() { return setMatrixArrayType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toRadian\", function() { return toRadian; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nconst EPSILON = 0.000001;\r\nlet ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\r\nconst RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\r\nfunction setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nconst degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nfunction toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}\r\n\r\nif (!Math.hypot) Math.hypot = function() {\r\n  var y = 0, i = arguments.length;\r\n  while (i--) y += arguments[i] * arguments[i];\r\n  return Math.sqrt(y);\r\n};\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/math/common.js?");

/***/ }),

/***/ "../../../Akila/math/index.js":
/*!*************************************!*\
  !*** D:/GitHub/Akila/math/index.js ***!
  \*************************************/
/*! exports provided: glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"../../../Akila/math/common.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"glMatrix\", function() { return _common_js__WEBPACK_IMPORTED_MODULE_0__; });\n/* harmony import */ var _mat2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mat2.js */ \"../../../Akila/math/mat2.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"mat2\", function() { return _mat2_js__WEBPACK_IMPORTED_MODULE_1__; });\n/* harmony import */ var _mat2d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mat2d.js */ \"../../../Akila/math/mat2d.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"mat2d\", function() { return _mat2d_js__WEBPACK_IMPORTED_MODULE_2__; });\n/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat3.js */ \"../../../Akila/math/mat3.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"mat3\", function() { return _mat3_js__WEBPACK_IMPORTED_MODULE_3__; });\n/* harmony import */ var _mat4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mat4.js */ \"../../../Akila/math/mat4.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"mat4\", function() { return _mat4_js__WEBPACK_IMPORTED_MODULE_4__; });\n/* harmony import */ var _quat_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./quat.js */ \"../../../Akila/math/quat.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"quat\", function() { return _quat_js__WEBPACK_IMPORTED_MODULE_5__; });\n/* harmony import */ var _quat2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./quat2.js */ \"../../../Akila/math/quat2.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"quat2\", function() { return _quat2_js__WEBPACK_IMPORTED_MODULE_6__; });\n/* harmony import */ var _vec2_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vec2.js */ \"../../../Akila/math/vec2.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"vec2\", function() { return _vec2_js__WEBPACK_IMPORTED_MODULE_7__; });\n/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./vec3.js */ \"../../../Akila/math/vec3.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"vec3\", function() { return _vec3_js__WEBPACK_IMPORTED_MODULE_8__; });\n/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./vec4.js */ \"../../../Akila/math/vec4.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"vec4\", function() { return _vec4_js__WEBPACK_IMPORTED_MODULE_9__; });\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/math/index.js?");

/***/ }),

/***/ "../../../Akila/math/mat2.js":
/*!************************************!*\
  !*** D:/GitHub/Akila/math/mat2.js ***!
  \************************************/
/*! exports provided: create, clone, copy, identity, fromValues, set, transpose, invert, adjoint, determinant, multiply, rotate, scale, fromRotation, fromScaling, str, frob, LDU, add, subtract, exactEquals, equals, multiplyScalar, multiplyScalarAndAdd, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transpose\", function() { return transpose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invert\", function() { return invert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"adjoint\", function() { return adjoint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"determinant\", function() { return determinant; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return rotate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotation\", function() { return fromRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromScaling\", function() { return fromScaling; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frob\", function() { return frob; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LDU\", function() { return LDU; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalar\", function() { return multiplyScalar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalarAndAdd\", function() { return multiplyScalarAndAdd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"../../../Akila/math/common.js\");\n\r\n\r\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\nfunction create() {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](4);\r\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\nfunction clone(a) {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\r\nfunction identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\r\nfunction fromValues(m00, m01, m10, m11) {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](4);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\r\nfunction set(out, m00, m01, m10, m11) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nfunction transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache\r\n  // some values\r\n  if (out === a) {\r\n    let a1 = a[1];\r\n    out[1] = a[2];\r\n    out[2] = a1;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[2];\r\n    out[2] = a[1];\r\n    out[3] = a[3];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nfunction invert(out, a) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3];\r\n\r\n  // Calculate the determinant\r\n  let det = a0 * a3 - a2 * a1;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = a3 * det;\r\n  out[1] = -a1 * det;\r\n  out[2] = -a2 * det;\r\n  out[3] = a0 * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nfunction adjoint(out, a) {\r\n  // Caching this value is nessecary if out == a\r\n  let a0 = a[0];\r\n  out[0] = a[3];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a0;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nfunction determinant(a) {\r\n  return a[0] * a[3] - a[2] * a[1];\r\n}\r\n\r\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3];\r\n  let b0 = b[0],\r\n    b1 = b[1],\r\n    b2 = b[2],\r\n    b3 = b[3];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\nfunction rotate(out, a, rad) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3];\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  out[0] = a0 * c + a2 * s;\r\n  out[1] = a1 * c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\r\nfunction scale(out, a, v) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3];\r\n  let v0 = v[0],\r\n    v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\nfunction fromRotation(out, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\r\nfunction fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {ReadonlyMat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nfunction str(a) {\r\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nfunction frob(a) {\r\n  return Math.hypot(a[0], a[1], a[2], a[3]);\r\n}\r\n\r\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {ReadonlyMat2} L the lower triangular matrix\r\n * @param {ReadonlyMat2} D the diagonal matrix\r\n * @param {ReadonlyMat2} U the upper triangular matrix\r\n * @param {ReadonlyMat2} a the input matrix to factorize\r\n */\r\n\r\nfunction LDU(L, D, U, a) {\r\n  L[2] = a[2] / a[0];\r\n  U[0] = a[0];\r\n  U[1] = a[1];\r\n  U[3] = a[3] - L[2] * U[1];\r\n  return [L, D, U];\r\n}\r\n\r\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3];\r\n  let b0 = b[0],\r\n    b1 = b[1],\r\n    b2 = b[2],\r\n    b3 = b[3];\r\n  return (\r\n    Math.abs(a0 - b0) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n    Math.abs(a1 - b1) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n    Math.abs(a2 - b2) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n    Math.abs(a3 - b3) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3))\r\n  );\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\r\nfunction multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\r\nfunction multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\r\nconst mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\r\nconst sub = subtract;\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/math/mat2.js?");

/***/ }),

/***/ "../../../Akila/math/mat2d.js":
/*!*************************************!*\
  !*** D:/GitHub/Akila/math/mat2d.js ***!
  \*************************************/
/*! exports provided: create, clone, copy, identity, fromValues, set, invert, determinant, multiply, rotate, scale, translate, fromRotation, fromScaling, fromTranslation, str, frob, add, subtract, multiplyScalar, multiplyScalarAndAdd, exactEquals, equals, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invert\", function() { return invert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"determinant\", function() { return determinant; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return rotate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotation\", function() { return fromRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromScaling\", function() { return fromScaling; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromTranslation\", function() { return fromTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frob\", function() { return frob; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalar\", function() { return multiplyScalar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalarAndAdd\", function() { return multiplyScalarAndAdd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"../../../Akila/math/common.js\");\n\r\n\r\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, b,\r\n *  c, d,\r\n *  tx, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, b, 0,\r\n *  c, d, 0,\r\n *  tx, ty, 1]\r\n * </pre>\r\n * The last column is ignored so the array is shorter and operations are faster.\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\nfunction create() {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](6);\r\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[4] = 0;\r\n    out[5] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\nfunction clone(a) {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](6);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\r\nfunction identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\r\nfunction fromValues(a, b, c, d, tx, ty) {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](6);\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\r\nfunction set(out, a, b, c, d, tx, ty) {\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\nfunction invert(out, a) {\r\n  let aa = a[0],\r\n    ab = a[1],\r\n    ac = a[2],\r\n    ad = a[3];\r\n  let atx = a[4],\r\n    aty = a[5];\r\n\r\n  let det = aa * ad - ab * ac;\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = ad * det;\r\n  out[1] = -ab * det;\r\n  out[2] = -ac * det;\r\n  out[3] = aa * det;\r\n  out[4] = (ac * aty - ad * atx) * det;\r\n  out[5] = (ab * atx - aa * aty) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nfunction determinant(a) {\r\n  return a[0] * a[3] - a[1] * a[2];\r\n}\r\n\r\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3],\r\n    a4 = a[4],\r\n    a5 = a[5];\r\n  let b0 = b[0],\r\n    b1 = b[1],\r\n    b2 = b[2],\r\n    b3 = b[3],\r\n    b4 = b[4],\r\n    b5 = b[5];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  out[4] = a0 * b4 + a2 * b5 + a4;\r\n  out[5] = a1 * b4 + a3 * b5 + a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\nfunction rotate(out, a, rad) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3],\r\n    a4 = a[4],\r\n    a5 = a[5];\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  out[0] = a0 * c + a2 * s;\r\n  out[1] = a1 * c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\r\nfunction scale(out, a, v) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3],\r\n    a4 = a[4],\r\n    a5 = a[5];\r\n  let v0 = v[0],\r\n    v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\r\nfunction translate(out, a, v) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3],\r\n    a4 = a[4],\r\n    a5 = a[5];\r\n  let v0 = v[0],\r\n    v1 = v[1];\r\n  out[0] = a0;\r\n  out[1] = a1;\r\n  out[2] = a2;\r\n  out[3] = a3;\r\n  out[4] = a0 * v0 + a2 * v1 + a4;\r\n  out[5] = a1 * v0 + a3 * v1 + a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\nfunction fromRotation(out, rad) {\r\n  let s = Math.sin(rad),\r\n    c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\r\nfunction fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\r\nfunction fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = v[0];\r\n  out[5] = v[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nfunction str(a) {\r\n  return (\r\n    \"mat2d(\" +\r\n    a[0] +\r\n    \", \" +\r\n    a[1] +\r\n    \", \" +\r\n    a[2] +\r\n    \", \" +\r\n    a[3] +\r\n    \", \" +\r\n    a[4] +\r\n    \", \" +\r\n    a[5] +\r\n    \")\"\r\n  );\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nfunction frob(a) {\r\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\r\n}\r\n\r\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\r\nfunction multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\r\nfunction multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return (\r\n    a[0] === b[0] &&\r\n    a[1] === b[1] &&\r\n    a[2] === b[2] &&\r\n    a[3] === b[3] &&\r\n    a[4] === b[4] &&\r\n    a[5] === b[5]\r\n  );\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3],\r\n    a4 = a[4],\r\n    a5 = a[5];\r\n  let b0 = b[0],\r\n    b1 = b[1],\r\n    b2 = b[2],\r\n    b3 = b[3],\r\n    b4 = b[4],\r\n    b5 = b[5];\r\n  return (\r\n    Math.abs(a0 - b0) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n    Math.abs(a1 - b1) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n    Math.abs(a2 - b2) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n    Math.abs(a3 - b3) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\r\n    Math.abs(a4 - b4) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\r\n    Math.abs(a5 - b5) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a5), Math.abs(b5))\r\n  );\r\n}\r\n\r\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\r\nconst mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\r\nconst sub = subtract;\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/math/mat2d.js?");

/***/ }),

/***/ "../../../Akila/math/mat3.js":
/*!************************************!*\
  !*** D:/GitHub/Akila/math/mat3.js ***!
  \************************************/
/*! exports provided: create, fromMat4, clone, copy, fromValues, set, identity, transpose, invert, adjoint, determinant, multiply, translate, rotate, scale, fromTranslation, fromRotation, fromScaling, fromMat2d, fromQuat, normalFromMat4, projection, str, frob, add, subtract, multiplyScalar, multiplyScalarAndAdd, exactEquals, equals, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromMat4\", function() { return fromMat4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transpose\", function() { return transpose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invert\", function() { return invert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"adjoint\", function() { return adjoint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"determinant\", function() { return determinant; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return rotate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromTranslation\", function() { return fromTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotation\", function() { return fromRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromScaling\", function() { return fromScaling; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromMat2d\", function() { return fromMat2d; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromQuat\", function() { return fromQuat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalFromMat4\", function() { return normalFromMat4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"projection\", function() { return projection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frob\", function() { return frob; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalar\", function() { return multiplyScalar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalarAndAdd\", function() { return multiplyScalarAndAdd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"../../../Akila/math/common.js\");\n\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nfunction create() {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](9);\r\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nfunction fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nfunction clone(a) {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nfunction fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nfunction set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nfunction identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nfunction transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    let a01 = a[1],\r\n      a02 = a[2],\r\n      a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nfunction invert(out, a) {\r\n  let a00 = a[0],\r\n    a01 = a[1],\r\n    a02 = a[2];\r\n  let a10 = a[3],\r\n    a11 = a[4],\r\n    a12 = a[5];\r\n  let a20 = a[6],\r\n    a21 = a[7],\r\n    a22 = a[8];\r\n\r\n  let b01 = a22 * a11 - a12 * a21;\r\n  let b11 = -a22 * a10 + a12 * a20;\r\n  let b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nfunction adjoint(out, a) {\r\n  let a00 = a[0],\r\n    a01 = a[1],\r\n    a02 = a[2];\r\n  let a10 = a[3],\r\n    a11 = a[4],\r\n    a12 = a[5];\r\n  let a20 = a[6],\r\n    a21 = a[7],\r\n    a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nfunction determinant(a) {\r\n  let a00 = a[0],\r\n    a01 = a[1],\r\n    a02 = a[2];\r\n  let a10 = a[3],\r\n    a11 = a[4],\r\n    a12 = a[5];\r\n  let a20 = a[6],\r\n    a21 = a[7],\r\n    a22 = a[8];\r\n\r\n  return (\r\n    a00 * (a22 * a11 - a12 * a21) +\r\n    a01 * (-a22 * a10 + a12 * a20) +\r\n    a02 * (a21 * a10 - a11 * a20)\r\n  );\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  let a00 = a[0],\r\n    a01 = a[1],\r\n    a02 = a[2];\r\n  let a10 = a[3],\r\n    a11 = a[4],\r\n    a12 = a[5];\r\n  let a20 = a[6],\r\n    a21 = a[7],\r\n    a22 = a[8];\r\n\r\n  let b00 = b[0],\r\n    b01 = b[1],\r\n    b02 = b[2];\r\n  let b10 = b[3],\r\n    b11 = b[4],\r\n    b12 = b[5];\r\n  let b20 = b[6],\r\n    b21 = b[7],\r\n    b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nfunction translate(out, a, v) {\r\n  let a00 = a[0],\r\n    a01 = a[1],\r\n    a02 = a[2],\r\n    a10 = a[3],\r\n    a11 = a[4],\r\n    a12 = a[5],\r\n    a20 = a[6],\r\n    a21 = a[7],\r\n    a22 = a[8],\r\n    x = v[0],\r\n    y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nfunction rotate(out, a, rad) {\r\n  let a00 = a[0],\r\n    a01 = a[1],\r\n    a02 = a[2],\r\n    a10 = a[3],\r\n    a11 = a[4],\r\n    a12 = a[5],\r\n    a20 = a[6],\r\n    a21 = a[7],\r\n    a22 = a[8],\r\n    s = Math.sin(rad),\r\n    c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nfunction scale(out, a, v) {\r\n  let x = v[0],\r\n    y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nfunction fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nfunction fromRotation(out, rad) {\r\n  let s = Math.sin(rad),\r\n    c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nfunction fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nfunction fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\r\nfunction fromQuat(out, q) {\r\n  let x = q[0],\r\n    y = q[1],\r\n    z = q[2],\r\n    w = q[3];\r\n  let x2 = x + x;\r\n  let y2 = y + y;\r\n  let z2 = z + z;\r\n\r\n  let xx = x * x2;\r\n  let yx = y * x2;\r\n  let yy = y * y2;\r\n  let zx = z * x2;\r\n  let zy = z * y2;\r\n  let zz = z * z2;\r\n  let wx = w * x2;\r\n  let wy = w * y2;\r\n  let wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\r\nfunction normalFromMat4(out, a) {\r\n  let a00 = a[0],\r\n    a01 = a[1],\r\n    a02 = a[2],\r\n    a03 = a[3];\r\n  let a10 = a[4],\r\n    a11 = a[5],\r\n    a12 = a[6],\r\n    a13 = a[7];\r\n  let a20 = a[8],\r\n    a21 = a[9],\r\n    a22 = a[10],\r\n    a23 = a[11];\r\n  let a30 = a[12],\r\n    a31 = a[13],\r\n    a32 = a[14],\r\n    a33 = a[15];\r\n\r\n  let b00 = a00 * a11 - a01 * a10;\r\n  let b01 = a00 * a12 - a02 * a10;\r\n  let b02 = a00 * a13 - a03 * a10;\r\n  let b03 = a01 * a12 - a02 * a11;\r\n  let b04 = a01 * a13 - a03 * a11;\r\n  let b05 = a02 * a13 - a03 * a12;\r\n  let b06 = a20 * a31 - a21 * a30;\r\n  let b07 = a20 * a32 - a22 * a30;\r\n  let b08 = a20 * a33 - a23 * a30;\r\n  let b09 = a21 * a32 - a22 * a31;\r\n  let b10 = a21 * a33 - a23 * a31;\r\n  let b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  let det =\r\n    b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nfunction projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nfunction str(a) {\r\n  return (\r\n    \"mat3(\" +\r\n    a[0] +\r\n    \", \" +\r\n    a[1] +\r\n    \", \" +\r\n    a[2] +\r\n    \", \" +\r\n    a[3] +\r\n    \", \" +\r\n    a[4] +\r\n    \", \" +\r\n    a[5] +\r\n    \", \" +\r\n    a[6] +\r\n    \", \" +\r\n    a[7] +\r\n    \", \" +\r\n    a[8] +\r\n    \")\"\r\n  );\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nfunction frob(a) {\r\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nfunction multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nfunction multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return (\r\n    a[0] === b[0] &&\r\n    a[1] === b[1] &&\r\n    a[2] === b[2] &&\r\n    a[3] === b[3] &&\r\n    a[4] === b[4] &&\r\n    a[5] === b[5] &&\r\n    a[6] === b[6] &&\r\n    a[7] === b[7] &&\r\n    a[8] === b[8]\r\n  );\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3],\r\n    a4 = a[4],\r\n    a5 = a[5],\r\n    a6 = a[6],\r\n    a7 = a[7],\r\n    a8 = a[8];\r\n  let b0 = b[0],\r\n    b1 = b[1],\r\n    b2 = b[2],\r\n    b3 = b[3],\r\n    b4 = b[4],\r\n    b5 = b[5],\r\n    b6 = b[6],\r\n    b7 = b[7],\r\n    b8 = b[8];\r\n  return (\r\n    Math.abs(a0 - b0) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n    Math.abs(a1 - b1) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n    Math.abs(a2 - b2) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n    Math.abs(a3 - b3) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\r\n    Math.abs(a4 - b4) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\r\n    Math.abs(a5 - b5) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\r\n    Math.abs(a6 - b6) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\r\n    Math.abs(a7 - b7) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\r\n    Math.abs(a8 - b8) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a8), Math.abs(b8))\r\n  );\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nconst mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nconst sub = subtract;\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/math/mat3.js?");

/***/ }),

/***/ "../../../Akila/math/mat4.js":
/*!************************************!*\
  !*** D:/GitHub/Akila/math/mat4.js ***!
  \************************************/
/*! exports provided: create, clone, copy, copyNoTranslate, fromValues, set, identity, transpose, invert, adjoint, determinant, multiply, translate, scale, rotate, rotateX, rotateY, rotateZ, fromTranslation, fromScaling, fromRotation, fromXRotation, fromYRotation, fromZRotation, fromRotationTranslation, fromQuat2, getTranslation, getScaling, getRotation, fromRotationTranslationScale, fromRotationTranslationScaleOrigin, fromQuat, frustum, perspective, perspectiveFromFieldOfView, ortho, lookAt, targetTo, str, frob, add, subtract, multiplyScalar, multiplyScalarAndAdd, exactEquals, equals, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copyNoTranslate\", function() { return copyNoTranslate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transpose\", function() { return transpose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invert\", function() { return invert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"adjoint\", function() { return adjoint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"determinant\", function() { return determinant; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return rotate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return rotateX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return rotateY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromTranslation\", function() { return fromTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromScaling\", function() { return fromScaling; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotation\", function() { return fromRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromXRotation\", function() { return fromXRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromYRotation\", function() { return fromYRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromZRotation\", function() { return fromZRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotationTranslation\", function() { return fromRotationTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromQuat2\", function() { return fromQuat2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTranslation\", function() { return getTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getScaling\", function() { return getScaling; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRotation\", function() { return getRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotationTranslationScale\", function() { return fromRotationTranslationScale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotationTranslationScaleOrigin\", function() { return fromRotationTranslationScaleOrigin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromQuat\", function() { return fromQuat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frustum\", function() { return frustum; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"perspective\", function() { return perspective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"perspectiveFromFieldOfView\", function() { return perspectiveFromFieldOfView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ortho\", function() { return ortho; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lookAt\", function() { return lookAt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"targetTo\", function() { return targetTo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frob\", function() { return frob; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalar\", function() { return multiplyScalar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalarAndAdd\", function() { return multiplyScalarAndAdd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"../../../Akila/math/common.js\");\n\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nfunction create() {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](16);\r\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nfunction clone(a) {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another without translation\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nfunction copyNoTranslate(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  /*out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;*/\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nfunction fromValues(\r\n  m00,\r\n  m01,\r\n  m02,\r\n  m03,\r\n  m10,\r\n  m11,\r\n  m12,\r\n  m13,\r\n  m20,\r\n  m21,\r\n  m22,\r\n  m23,\r\n  m30,\r\n  m31,\r\n  m32,\r\n  m33\r\n) {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nfunction set(\r\n  out,\r\n  m00,\r\n  m01,\r\n  m02,\r\n  m03,\r\n  m10,\r\n  m11,\r\n  m12,\r\n  m13,\r\n  m20,\r\n  m21,\r\n  m22,\r\n  m23,\r\n  m30,\r\n  m31,\r\n  m32,\r\n  m33\r\n) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nfunction identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nfunction transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    let a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n    let a12 = a[6],\r\n      a13 = a[7];\r\n    let a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nfunction invert(out, a) {\r\n  let a00 = a[0],\r\n    a01 = a[1],\r\n    a02 = a[2],\r\n    a03 = a[3];\r\n  let a10 = a[4],\r\n    a11 = a[5],\r\n    a12 = a[6],\r\n    a13 = a[7];\r\n  let a20 = a[8],\r\n    a21 = a[9],\r\n    a22 = a[10],\r\n    a23 = a[11];\r\n  let a30 = a[12],\r\n    a31 = a[13],\r\n    a32 = a[14],\r\n    a33 = a[15];\r\n\r\n  let b00 = a00 * a11 - a01 * a10;\r\n  let b01 = a00 * a12 - a02 * a10;\r\n  let b02 = a00 * a13 - a03 * a10;\r\n  let b03 = a01 * a12 - a02 * a11;\r\n  let b04 = a01 * a13 - a03 * a11;\r\n  let b05 = a02 * a13 - a03 * a12;\r\n  let b06 = a20 * a31 - a21 * a30;\r\n  let b07 = a20 * a32 - a22 * a30;\r\n  let b08 = a20 * a33 - a23 * a30;\r\n  let b09 = a21 * a32 - a22 * a31;\r\n  let b10 = a21 * a33 - a23 * a31;\r\n  let b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  let det =\r\n    b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nfunction adjoint(out, a) {\r\n  let a00 = a[0],\r\n    a01 = a[1],\r\n    a02 = a[2],\r\n    a03 = a[3];\r\n  let a10 = a[4],\r\n    a11 = a[5],\r\n    a12 = a[6],\r\n    a13 = a[7];\r\n  let a20 = a[8],\r\n    a21 = a[9],\r\n    a22 = a[10],\r\n    a23 = a[11];\r\n  let a30 = a[12],\r\n    a31 = a[13],\r\n    a32 = a[14],\r\n    a33 = a[15];\r\n\r\n  let b00 = a00 * a11 - a01 * a10;\r\n  let b01 = a00 * a12 - a02 * a10;\r\n  let b02 = a00 * a13 - a03 * a10;\r\n  let b03 = a01 * a12 - a02 * a11;\r\n  let b04 = a01 * a13 - a03 * a11;\r\n  let b05 = a02 * a13 - a03 * a12;\r\n  let b06 = a20 * a31 - a21 * a30;\r\n  let b07 = a20 * a32 - a22 * a30;\r\n  let b08 = a20 * a33 - a23 * a30;\r\n  let b09 = a21 * a32 - a22 * a31;\r\n  let b10 = a21 * a33 - a23 * a31;\r\n  let b11 = a22 * a33 - a23 * a32;\r\n\r\n  out[0] = a11 * b11 - a12 * b10 + a13 * b09;\r\n  out[1] = a02 * b10 - a01 * b11 - a03 * b09;\r\n  out[2] = a31 * b05 - a32 * b04 + a33 * b03;\r\n  out[3] = a22 * b04 - a21 * b05 - a23 * b03;\r\n  out[4] = a12 * b08 - a10 * b11 - a13 * b07;\r\n  out[5] = a00 * b11 - a02 * b08 + a03 * b07;\r\n  out[6] = a32 * b02 - a30 * b05 - a33 * b01;\r\n  out[7] = a20 * b05 - a22 * b02 + a23 * b01;\r\n  out[8] = a10 * b10 - a11 * b08 + a13 * b06;\r\n  out[9] = a01 * b08 - a00 * b10 - a03 * b06;\r\n  out[10] = a30 * b04 - a31 * b02 + a33 * b00;\r\n  out[11] = a21 * b02 - a20 * b04 - a23 * b00;\r\n  out[12] = a11 * b07 - a10 * b09 - a12 * b06;\r\n  out[13] = a00 * b09 - a01 * b07 + a02 * b06;\r\n  out[14] = a31 * b01 - a30 * b03 - a32 * b00;\r\n  out[15] = a20 * b03 - a21 * b01 + a22 * b00;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nfunction determinant(a) {\r\n  let a00 = a[0],\r\n    a01 = a[1],\r\n    a02 = a[2],\r\n    a03 = a[3];\r\n  let a10 = a[4],\r\n    a11 = a[5],\r\n    a12 = a[6],\r\n    a13 = a[7];\r\n  let a20 = a[8],\r\n    a21 = a[9],\r\n    a22 = a[10],\r\n    a23 = a[11];\r\n  let a30 = a[12],\r\n    a31 = a[13],\r\n    a32 = a[14],\r\n    a33 = a[15];\r\n\r\n  let b0 = a00 * a11 - a01 * a10;\r\n  let b1 = a00 * a12 - a02 * a10;\r\n  let b2 = a01 * a12 - a02 * a11;\r\n  let b3 = a20 * a31 - a21 * a30;\r\n  let b4 = a20 * a32 - a22 * a30;\r\n  let b5 = a21 * a32 - a22 * a31;\r\n  let b6 = a00 * b5 - a01 * b4 + a02 * b3;\r\n  let b7 = a10 * b5 - a11 * b4 + a12 * b3;\r\n  let b8 = a20 * b2 - a21 * b1 + a22 * b0;\r\n  let b9 = a30 * b2 - a31 * b1 + a32 * b0;\r\n\r\n  // Calculate the determinant\r\n  return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  let a00 = a[0],\r\n    a01 = a[1],\r\n    a02 = a[2],\r\n    a03 = a[3];\r\n  let a10 = a[4],\r\n    a11 = a[5],\r\n    a12 = a[6],\r\n    a13 = a[7];\r\n  let a20 = a[8],\r\n    a21 = a[9],\r\n    a22 = a[10],\r\n    a23 = a[11];\r\n  let a30 = a[12],\r\n    a31 = a[13],\r\n    a32 = a[14],\r\n    a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  let b0 = b[0],\r\n    b1 = b[1],\r\n    b2 = b[2],\r\n    b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];\r\n  b1 = b[5];\r\n  b2 = b[6];\r\n  b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];\r\n  b1 = b[9];\r\n  b2 = b[10];\r\n  b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];\r\n  b1 = b[13];\r\n  b2 = b[14];\r\n  b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nfunction translate(out, a, v) {\r\n  let x = v[0],\r\n    y = v[1],\r\n    z = v[2];\r\n  let a00, a01, a02, a03;\r\n  let a10, a11, a12, a13;\r\n  let a20, a21, a22, a23;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];\r\n    a01 = a[1];\r\n    a02 = a[2];\r\n    a03 = a[3];\r\n    a10 = a[4];\r\n    a11 = a[5];\r\n    a12 = a[6];\r\n    a13 = a[7];\r\n    a20 = a[8];\r\n    a21 = a[9];\r\n    a22 = a[10];\r\n    a23 = a[11];\r\n\r\n    out[0] = a00;\r\n    out[1] = a01;\r\n    out[2] = a02;\r\n    out[3] = a03;\r\n    out[4] = a10;\r\n    out[5] = a11;\r\n    out[6] = a12;\r\n    out[7] = a13;\r\n    out[8] = a20;\r\n    out[9] = a21;\r\n    out[10] = a22;\r\n    out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nfunction scale(out, a, v) {\r\n  let x = v[0],\r\n    y = v[1],\r\n    z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nfunction rotate(out, a, rad, axis) {\r\n  let x = axis[0],\r\n    y = axis[1],\r\n    z = axis[2];\r\n  let len = Math.hypot(x, y, z);\r\n  let s, c, t;\r\n  let a00, a01, a02, a03;\r\n  let a10, a11, a12, a13;\r\n  let a20, a21, a22, a23;\r\n  let b00, b01, b02;\r\n  let b10, b11, b12;\r\n  let b20, b21, b22;\r\n\r\n  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"]) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];\r\n  a01 = a[1];\r\n  a02 = a[2];\r\n  a03 = a[3];\r\n  a10 = a[4];\r\n  a11 = a[5];\r\n  a12 = a[6];\r\n  a13 = a[7];\r\n  a20 = a[8];\r\n  a21 = a[9];\r\n  a22 = a[10];\r\n  a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;\r\n  b01 = y * x * t + z * s;\r\n  b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;\r\n  b11 = y * y * t + c;\r\n  b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;\r\n  b21 = y * z * t - x * s;\r\n  b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nfunction rotateX(out, a, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  let a10 = a[4];\r\n  let a11 = a[5];\r\n  let a12 = a[6];\r\n  let a13 = a[7];\r\n  let a20 = a[8];\r\n  let a21 = a[9];\r\n  let a22 = a[10];\r\n  let a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nfunction rotateY(out, a, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  let a00 = a[0];\r\n  let a01 = a[1];\r\n  let a02 = a[2];\r\n  let a03 = a[3];\r\n  let a20 = a[8];\r\n  let a21 = a[9];\r\n  let a22 = a[10];\r\n  let a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nfunction rotateZ(out, a, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  let a00 = a[0];\r\n  let a01 = a[1];\r\n  let a02 = a[2];\r\n  let a03 = a[3];\r\n  let a10 = a[4];\r\n  let a11 = a[5];\r\n  let a12 = a[6];\r\n  let a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nfunction fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nfunction fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nfunction fromRotation(out, rad, axis) {\r\n  let x = axis[0],\r\n    y = axis[1],\r\n    z = axis[2];\r\n  let len = Math.hypot(x, y, z);\r\n  let s, c, t;\r\n\r\n  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"]) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nfunction fromXRotation(out, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nfunction fromYRotation(out, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nfunction fromZRotation(out, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nfunction fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  let x = q[0],\r\n    y = q[1],\r\n    z = q[2],\r\n    w = q[3];\r\n  let x2 = x + x;\r\n  let y2 = y + y;\r\n  let z2 = z + z;\r\n\r\n  let xx = x * x2;\r\n  let xy = x * y2;\r\n  let xz = x * z2;\r\n  let yy = y * y2;\r\n  let yz = y * z2;\r\n  let zz = z * z2;\r\n  let wx = w * x2;\r\n  let wy = w * y2;\r\n  let wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nfunction fromQuat2(out, a) {\r\n  let translation = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](3);\r\n  let bx = -a[0],\r\n    by = -a[1],\r\n    bz = -a[2],\r\n    bw = a[3],\r\n    ax = a[4],\r\n    ay = a[5],\r\n    az = a[6],\r\n    aw = a[7];\r\n\r\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = ((ax * bw + aw * bx + ay * bz - az * by) * 2) / magnitude;\r\n    translation[1] = ((ay * bw + aw * by + az * bx - ax * bz) * 2) / magnitude;\r\n    translation[2] = ((az * bw + aw * bz + ax * by - ay * bx) * 2) / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nfunction getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nfunction getScaling(out, mat) {\r\n  let m11 = mat[0];\r\n  let m12 = mat[1];\r\n  let m13 = mat[2];\r\n  let m21 = mat[4];\r\n  let m22 = mat[5];\r\n  let m23 = mat[6];\r\n  let m31 = mat[8];\r\n  let m32 = mat[9];\r\n  let m33 = mat[10];\r\n\r\n  out[0] = Math.hypot(m11, m12, m13);\r\n  out[1] = Math.hypot(m21, m22, m23);\r\n  out[2] = Math.hypot(m31, m32, m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nfunction getRotation(out, mat) {\r\n  let scaling = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](3);\r\n  getScaling(scaling, mat);\r\n\r\n  let is1 = 1 / scaling[0];\r\n  let is2 = 1 / scaling[1];\r\n  let is3 = 1 / scaling[2];\r\n\r\n  let sm11 = mat[0] * is1;\r\n  let sm12 = mat[1] * is2;\r\n  let sm13 = mat[2] * is3;\r\n  let sm21 = mat[4] * is1;\r\n  let sm22 = mat[5] * is2;\r\n  let sm23 = mat[6] * is3;\r\n  let sm31 = mat[8] * is1;\r\n  let sm32 = mat[9] * is2;\r\n  let sm33 = mat[10] * is3;\r\n\r\n  let trace = sm11 + sm22 + sm33;\r\n  let S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (sm23 - sm32) / S;\r\n    out[1] = (sm31 - sm13) / S;\r\n    out[2] = (sm12 - sm21) / S;\r\n  } else if (sm11 > sm22 && sm11 > sm33) {\r\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\r\n    out[3] = (sm23 - sm32) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (sm12 + sm21) / S;\r\n    out[2] = (sm31 + sm13) / S;\r\n  } else if (sm22 > sm33) {\r\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\r\n    out[3] = (sm31 - sm13) / S;\r\n    out[0] = (sm12 + sm21) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (sm23 + sm32) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\r\n    out[3] = (sm12 - sm21) / S;\r\n    out[0] = (sm31 + sm13) / S;\r\n    out[1] = (sm23 + sm32) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nfunction fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  let x = q[0],\r\n    y = q[1],\r\n    z = q[2],\r\n    w = q[3];\r\n  let x2 = x + x;\r\n  let y2 = y + y;\r\n  let z2 = z + z;\r\n\r\n  let xx = x * x2;\r\n  let xy = x * y2;\r\n  let xz = x * z2;\r\n  let yy = y * y2;\r\n  let yz = y * z2;\r\n  let zz = z * z2;\r\n  let wx = w * x2;\r\n  let wy = w * y2;\r\n  let wz = w * z2;\r\n  let sx = s[0];\r\n  let sy = s[1];\r\n  let sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nfunction fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  let x = q[0],\r\n    y = q[1],\r\n    z = q[2],\r\n    w = q[3];\r\n  let x2 = x + x;\r\n  let y2 = y + y;\r\n  let z2 = z + z;\r\n\r\n  let xx = x * x2;\r\n  let xy = x * y2;\r\n  let xz = x * z2;\r\n  let yy = y * y2;\r\n  let yz = y * z2;\r\n  let zz = z * z2;\r\n  let wx = w * x2;\r\n  let wy = w * y2;\r\n  let wz = w * z2;\r\n\r\n  let sx = s[0];\r\n  let sy = s[1];\r\n  let sz = s[2];\r\n\r\n  let ox = o[0];\r\n  let oy = o[1];\r\n  let oz = o[2];\r\n\r\n  let out0 = (1 - (yy + zz)) * sx;\r\n  let out1 = (xy + wz) * sx;\r\n  let out2 = (xz - wy) * sx;\r\n  let out4 = (xy - wz) * sy;\r\n  let out5 = (1 - (xx + zz)) * sy;\r\n  let out6 = (yz + wx) * sy;\r\n  let out8 = (xz + wy) * sz;\r\n  let out9 = (yz - wx) * sz;\r\n  let out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nfunction fromQuat(out, q) {\r\n  let x = q[0],\r\n    y = q[1],\r\n    z = q[2],\r\n    w = q[3];\r\n  let x2 = x + x;\r\n  let y2 = y + y;\r\n  let z2 = z + z;\r\n\r\n  let xx = x * x2;\r\n  let yx = y * x2;\r\n  let yy = y * y2;\r\n  let zx = z * x2;\r\n  let zy = z * y2;\r\n  let zz = z * z2;\r\n  let wx = w * x2;\r\n  let wy = w * y2;\r\n  let wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nfunction frustum(out, left, right, bottom, top, near, far) {\r\n  let rl = 1 / (right - left);\r\n  let tb = 1 / (top - bottom);\r\n  let nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nfunction perspective(out, fovy, aspect, near, far) {\r\n  let f = 1.0 / Math.tan(fovy / 2),\r\n    nf;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\r\n  let upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\r\n  let downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\r\n  let leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\r\n  let rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\r\n  let xScale = 2.0 / (leftTan + rightTan);\r\n  let yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = (far * near) / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nfunction ortho(out, left, right, bottom, top, near, far) {\r\n  let lr = 1 / (left - right);\r\n  let bt = 1 / (bottom - top);\r\n  let nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nfunction lookAt(out, eye, center, up) {\r\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\r\n  let eyex = eye[0];\r\n  let eyey = eye[1];\r\n  let eyez = eye[2];\r\n  let upx = up[0];\r\n  let upy = up[1];\r\n  let upz = up[2];\r\n  let centerx = center[0];\r\n  let centery = center[1];\r\n  let centerz = center[2];\r\n\r\n  if (\r\n    Math.abs(eyex - centerx) < _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] &&\r\n    Math.abs(eyey - centery) < _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] &&\r\n    Math.abs(eyez - centerz) < _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"]\r\n  ) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.hypot(z0, z1, z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.hypot(x0, x1, x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.hypot(y0, y1, y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nfunction targetTo(out, eye, target, up) {\r\n  let eyex = eye[0],\r\n    eyey = eye[1],\r\n    eyez = eye[2],\r\n    upx = up[0],\r\n    upy = up[1],\r\n    upz = up[2];\r\n\r\n  let z0 = eyex - target[0],\r\n    z1 = eyey - target[1],\r\n    z2 = eyez - target[2];\r\n\r\n  let len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  let x0 = upy * z2 - upz * z1,\r\n    x1 = upz * z0 - upx * z2,\r\n    x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nfunction str(a) {\r\n  return (\r\n    \"mat4(\" +\r\n    a[0] +\r\n    \", \" +\r\n    a[1] +\r\n    \", \" +\r\n    a[2] +\r\n    \", \" +\r\n    a[3] +\r\n    \", \" +\r\n    a[4] +\r\n    \", \" +\r\n    a[5] +\r\n    \", \" +\r\n    a[6] +\r\n    \", \" +\r\n    a[7] +\r\n    \", \" +\r\n    a[8] +\r\n    \", \" +\r\n    a[9] +\r\n    \", \" +\r\n    a[10] +\r\n    \", \" +\r\n    a[11] +\r\n    \", \" +\r\n    a[12] +\r\n    \", \" +\r\n    a[13] +\r\n    \", \" +\r\n    a[14] +\r\n    \", \" +\r\n    a[15] +\r\n    \")\"\r\n  );\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nfunction frob(a) {\r\n  return Math.hypot(\r\n    a[0],\r\n    a[1],\r\n    a[2],\r\n    a[3],\r\n    a[4],\r\n    a[5],\r\n    a[6],\r\n    a[7],\r\n    a[8],\r\n    a[9],\r\n    a[10],\r\n    a[11],\r\n    a[12],\r\n    a[13],\r\n    a[14],\r\n    a[15]\r\n  );\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nfunction multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nfunction multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return (\r\n    a[0] === b[0] &&\r\n    a[1] === b[1] &&\r\n    a[2] === b[2] &&\r\n    a[3] === b[3] &&\r\n    a[4] === b[4] &&\r\n    a[5] === b[5] &&\r\n    a[6] === b[6] &&\r\n    a[7] === b[7] &&\r\n    a[8] === b[8] &&\r\n    a[9] === b[9] &&\r\n    a[10] === b[10] &&\r\n    a[11] === b[11] &&\r\n    a[12] === b[12] &&\r\n    a[13] === b[13] &&\r\n    a[14] === b[14] &&\r\n    a[15] === b[15]\r\n  );\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3];\r\n  let a4 = a[4],\r\n    a5 = a[5],\r\n    a6 = a[6],\r\n    a7 = a[7];\r\n  let a8 = a[8],\r\n    a9 = a[9],\r\n    a10 = a[10],\r\n    a11 = a[11];\r\n  let a12 = a[12],\r\n    a13 = a[13],\r\n    a14 = a[14],\r\n    a15 = a[15];\r\n\r\n  let b0 = b[0],\r\n    b1 = b[1],\r\n    b2 = b[2],\r\n    b3 = b[3];\r\n  let b4 = b[4],\r\n    b5 = b[5],\r\n    b6 = b[6],\r\n    b7 = b[7];\r\n  let b8 = b[8],\r\n    b9 = b[9],\r\n    b10 = b[10],\r\n    b11 = b[11];\r\n  let b12 = b[12],\r\n    b13 = b[13],\r\n    b14 = b[14],\r\n    b15 = b[15];\r\n\r\n  return (\r\n    Math.abs(a0 - b0) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n    Math.abs(a1 - b1) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n    Math.abs(a2 - b2) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n    Math.abs(a3 - b3) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\r\n    Math.abs(a4 - b4) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\r\n    Math.abs(a5 - b5) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\r\n    Math.abs(a6 - b6) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\r\n    Math.abs(a7 - b7) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\r\n    Math.abs(a8 - b8) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\r\n    Math.abs(a9 - b9) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\r\n    Math.abs(a10 - b10) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\r\n    Math.abs(a11 - b11) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\r\n    Math.abs(a12 - b12) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\r\n    Math.abs(a13 - b13) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\r\n    Math.abs(a14 - b14) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\r\n    Math.abs(a15 - b15) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a15), Math.abs(b15))\r\n  );\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nconst mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nconst sub = subtract;\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/math/mat4.js?");

/***/ }),

/***/ "../../../Akila/math/quat.js":
/*!************************************!*\
  !*** D:/GitHub/Akila/math/quat.js ***!
  \************************************/
/*! exports provided: create, identity, setAxisAngle, getAxisAngle, getAngle, multiply, rotateX, rotateY, rotateZ, calculateW, exp, ln, pow, slerp, random, invert, conjugate, fromMat3, fromEuler, str, clone, fromValues, copy, set, add, mul, scale, dot, lerp, length, len, squaredLength, sqrLen, normalize, exactEquals, equals, rotationTo, sqlerp, setAxes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setAxisAngle\", function() { return setAxisAngle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getAxisAngle\", function() { return getAxisAngle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getAngle\", function() { return getAngle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return rotateX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return rotateY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"calculateW\", function() { return calculateW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exp\", function() { return exp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ln\", function() { return ln; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pow\", function() { return pow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"slerp\", function() { return slerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"random\", function() { return random; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invert\", function() { return invert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conjugate\", function() { return conjugate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromMat3\", function() { return fromMat3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromEuler\", function() { return fromEuler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return dot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return length; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"len\", function() { return len; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return squaredLength; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrLen\", function() { return sqrLen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotationTo\", function() { return rotationTo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqlerp\", function() { return sqlerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setAxes\", function() { return setAxes; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"../../../Akila/math/common.js\");\n/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mat3.js */ \"../../../Akila/math/mat3.js\");\n/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec3.js */ \"../../../Akila/math/vec3.js\");\n/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vec4.js */ \"../../../Akila/math/vec4.js\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nfunction create() {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](4);\r\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nfunction identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nfunction setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  let s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nfunction getAxisAngle(out_axis, q) {\r\n  let rad = Math.acos(q[3]) * 2.0;\r\n  let s = Math.sin(rad / 2.0);\r\n  if (s > _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"]) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\r\nfunction getAngle(a, b) {\r\n  let dotproduct = dot(a, b);\r\n\r\n  return Math.acos(2 * dotproduct * dotproduct - 1);\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  let ax = a[0],\r\n    ay = a[1],\r\n    az = a[2],\r\n    aw = a[3];\r\n  let bx = b[0],\r\n    by = b[1],\r\n    bz = b[2],\r\n    bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nfunction rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  let ax = a[0],\r\n    ay = a[1],\r\n    az = a[2],\r\n    aw = a[3];\r\n  let bx = Math.sin(rad),\r\n    bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nfunction rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  let ax = a[0],\r\n    ay = a[1],\r\n    az = a[2],\r\n    aw = a[3];\r\n  let by = Math.sin(rad),\r\n    bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nfunction rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  let ax = a[0],\r\n    ay = a[1],\r\n    az = a[2],\r\n    aw = a[3];\r\n  let bz = Math.sin(rad),\r\n    bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nfunction calculateW(out, a) {\r\n  let x = a[0],\r\n    y = a[1],\r\n    z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\r\nfunction exp(out, a) {\r\n  let x = a[0],\r\n    y = a[1],\r\n    z = a[2],\r\n    w = a[3];\r\n\r\n  let r = Math.sqrt(x * x + y * y + z * z);\r\n  let et = Math.exp(w);\r\n  let s = r > 0 ? (et * Math.sin(r)) / r : 0;\r\n\r\n  out[0] = x * s;\r\n  out[1] = y * s;\r\n  out[2] = z * s;\r\n  out[3] = et * Math.cos(r);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\r\nfunction ln(out, a) {\r\n  let x = a[0],\r\n    y = a[1],\r\n    z = a[2],\r\n    w = a[3];\r\n\r\n  let r = Math.sqrt(x * x + y * y + z * z);\r\n  let t = r > 0 ? Math.atan2(r, w) / r : 0;\r\n\r\n  out[0] = x * t;\r\n  out[1] = y * t;\r\n  out[2] = z * t;\r\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\r\nfunction pow(out, a, b) {\r\n  ln(out, a);\r\n  scale(out, out, b);\r\n  exp(out, out);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nfunction slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  let ax = a[0],\r\n    ay = a[1],\r\n    az = a[2],\r\n    aw = a[3];\r\n  let bx = b[0],\r\n    by = b[1],\r\n    bz = b[2],\r\n    bw = b[3];\r\n\r\n  let omega, cosom, sinom, scale0, scale1;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"]) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nfunction random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  let u1 = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]();\r\n  let u2 = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]();\r\n  let u3 = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]();\r\n\r\n  let sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  let sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nfunction invert(out, a) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3];\r\n  let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  let invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nfunction conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nfunction fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  let fTrace = m[0] + m[4] + m[8];\r\n  let fRoot;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    let i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    let j = (i + 1) % 3;\r\n    let k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nfunction fromEuler(out, x, y, z) {\r\n  let halfToRad = (0.5 * Math.PI) / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  let sx = Math.sin(x);\r\n  let cx = Math.cos(x);\r\n  let sy = Math.sin(y);\r\n  let cy = Math.cos(y);\r\n  let sz = Math.sin(z);\r\n  let cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nfunction str(a) {\r\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nconst clone = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"clone\"];\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nconst fromValues = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"fromValues\"];\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nconst copy = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"copy\"];\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nconst set = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"set\"];\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nconst add = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"add\"];\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nconst mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nconst scale = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"scale\"];\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nconst dot = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"dot\"];\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nconst lerp = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"lerp\"];\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nconst length = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"length\"];\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nconst len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nconst squaredLength = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"squaredLength\"];\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nconst sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nconst normalize = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"normalize\"];\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nconst exactEquals = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"exactEquals\"];\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nconst equals = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"equals\"];\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nconst rotationTo = (function() {\r\n  let tmpvec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"create\"]();\r\n  let xUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"fromValues\"](1, 0, 0);\r\n  let yUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"fromValues\"](0, 1, 0);\r\n\r\n  return function(out, a, b) {\r\n    let dot = _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"dot\"](a, b);\r\n    if (dot < -0.999999) {\r\n      _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"cross\"](tmpvec3, xUnitVec3, a);\r\n      if (_vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"len\"](tmpvec3) < 0.000001) _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"cross\"](tmpvec3, yUnitVec3, a);\r\n      _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"normalize\"](tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"cross\"](tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n})();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nconst sqlerp = (function() {\r\n  let temp1 = create();\r\n  let temp2 = create();\r\n\r\n  return function(out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n})();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nconst setAxes = (function() {\r\n  let matr = _mat3_js__WEBPACK_IMPORTED_MODULE_1__[\"create\"]();\r\n\r\n  return function(out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n})();\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/math/quat.js?");

/***/ }),

/***/ "../../../Akila/math/quat2.js":
/*!*************************************!*\
  !*** D:/GitHub/Akila/math/quat2.js ***!
  \*************************************/
/*! exports provided: create, clone, fromValues, fromRotationTranslationValues, fromRotationTranslation, fromTranslation, fromRotation, fromMat4, copy, identity, set, getReal, getDual, setReal, setDual, getTranslation, translate, rotateX, rotateY, rotateZ, rotateByQuatAppend, rotateByQuatPrepend, rotateAroundAxis, add, multiply, mul, scale, dot, lerp, invert, conjugate, length, len, squaredLength, sqrLen, normalize, str, exactEquals, equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotationTranslationValues\", function() { return fromRotationTranslationValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotationTranslation\", function() { return fromRotationTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromTranslation\", function() { return fromTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotation\", function() { return fromRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromMat4\", function() { return fromMat4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getReal\", function() { return getReal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDual\", function() { return getDual; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setReal\", function() { return setReal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setDual\", function() { return setDual; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTranslation\", function() { return getTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return rotateX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return rotateY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateByQuatAppend\", function() { return rotateByQuatAppend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateByQuatPrepend\", function() { return rotateByQuatPrepend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateAroundAxis\", function() { return rotateAroundAxis; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return dot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invert\", function() { return invert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conjugate\", function() { return conjugate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return length; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"len\", function() { return len; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return squaredLength; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrLen\", function() { return sqrLen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"../../../Akila/math/common.js\");\n/* harmony import */ var _quat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./quat.js */ \"../../../Akila/math/quat.js\");\n/* harmony import */ var _mat4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mat4.js */ \"../../../Akila/math/mat4.js\");\n\r\n\r\n\r\n\r\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\r\n\r\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\r\nfunction create() {\r\n  let dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](8);\r\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    dq[0] = 0;\r\n    dq[1] = 0;\r\n    dq[2] = 0;\r\n    dq[4] = 0;\r\n    dq[5] = 0;\r\n    dq[6] = 0;\r\n    dq[7] = 0;\r\n  }\r\n  dq[3] = 1;\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\nfunction clone(a) {\r\n  let dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](8);\r\n  dq[0] = a[0];\r\n  dq[1] = a[1];\r\n  dq[2] = a[2];\r\n  dq[3] = a[3];\r\n  dq[4] = a[4];\r\n  dq[5] = a[5];\r\n  dq[6] = a[6];\r\n  dq[7] = a[7];\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\nfunction fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\r\n  let dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](8);\r\n  dq[0] = x1;\r\n  dq[1] = y1;\r\n  dq[2] = z1;\r\n  dq[3] = w1;\r\n  dq[4] = x2;\r\n  dq[5] = y2;\r\n  dq[6] = z2;\r\n  dq[7] = w2;\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\nfunction fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\r\n  let dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](8);\r\n  dq[0] = x1;\r\n  dq[1] = y1;\r\n  dq[2] = z1;\r\n  dq[3] = w1;\r\n  let ax = x2 * 0.5,\r\n    ay = y2 * 0.5,\r\n    az = z2 * 0.5;\r\n  dq[4] = ax * w1 + ay * z1 - az * y1;\r\n  dq[5] = ay * w1 + az * x1 - ax * z1;\r\n  dq[6] = az * w1 + ax * y1 - ay * x1;\r\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q a normalized quaternion\r\n * @param {ReadonlyVec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\nfunction fromRotationTranslation(out, q, t) {\r\n  let ax = t[0] * 0.5,\r\n    ay = t[1] * 0.5,\r\n    az = t[2] * 0.5,\r\n    bx = q[0],\r\n    by = q[1],\r\n    bz = q[2],\r\n    bw = q[3];\r\n  out[0] = bx;\r\n  out[1] = by;\r\n  out[2] = bz;\r\n  out[3] = bw;\r\n  out[4] = ax * bw + ay * bz - az * by;\r\n  out[5] = ay * bw + az * bx - ax * bz;\r\n  out[6] = az * bw + ax * by - ay * bx;\r\n  out[7] = -ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyVec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\nfunction fromTranslation(out, t) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = t[0] * 0.5;\r\n  out[5] = t[1] * 0.5;\r\n  out[6] = t[2] * 0.5;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\nfunction fromRotation(out, q) {\r\n  out[0] = q[0];\r\n  out[1] = q[1];\r\n  out[2] = q[2];\r\n  out[3] = q[3];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {ReadonlyMat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\r\nfunction fromMat4(out, a) {\r\n  //TODO Optimize this\r\n  let outer = _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"create\"]();\r\n  _mat4_js__WEBPACK_IMPORTED_MODULE_2__[\"getRotation\"](outer, a);\r\n  let t = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](3);\r\n  _mat4_js__WEBPACK_IMPORTED_MODULE_2__[\"getTranslation\"](t, a);\r\n  fromRotationTranslation(out, outer, t);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\r\nfunction identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nfunction set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\r\n  out[0] = x1;\r\n  out[1] = y1;\r\n  out[2] = z1;\r\n  out[3] = w1;\r\n\r\n  out[4] = x2;\r\n  out[5] = y2;\r\n  out[6] = z2;\r\n  out[7] = w2;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\r\nconst getReal = _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"copy\"];\r\n\r\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\r\nfunction getDual(out, a) {\r\n  out[0] = a[4];\r\n  out[1] = a[5];\r\n  out[2] = a[6];\r\n  out[3] = a[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nconst setReal = _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"copy\"];\r\n\r\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nfunction setDual(out, q) {\r\n  out[4] = q[0];\r\n  out[5] = q[1];\r\n  out[6] = q[2];\r\n  out[7] = q[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\r\nfunction getTranslation(out, a) {\r\n  let ax = a[4],\r\n    ay = a[5],\r\n    az = a[6],\r\n    aw = a[7],\r\n    bx = -a[0],\r\n    by = -a[1],\r\n    bz = -a[2],\r\n    bw = a[3];\r\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\r\nfunction translate(out, a, v) {\r\n  let ax1 = a[0],\r\n    ay1 = a[1],\r\n    az1 = a[2],\r\n    aw1 = a[3],\r\n    bx1 = v[0] * 0.5,\r\n    by1 = v[1] * 0.5,\r\n    bz1 = v[2] * 0.5,\r\n    ax2 = a[4],\r\n    ay2 = a[5],\r\n    az2 = a[6],\r\n    aw2 = a[7];\r\n  out[0] = ax1;\r\n  out[1] = ay1;\r\n  out[2] = az1;\r\n  out[3] = aw1;\r\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\r\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\r\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\r\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\nfunction rotateX(out, a, rad) {\r\n  let bx = -a[0],\r\n    by = -a[1],\r\n    bz = -a[2],\r\n    bw = a[3],\r\n    ax = a[4],\r\n    ay = a[5],\r\n    az = a[6],\r\n    aw = a[7],\r\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"rotateX\"](out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\nfunction rotateY(out, a, rad) {\r\n  let bx = -a[0],\r\n    by = -a[1],\r\n    bz = -a[2],\r\n    bw = a[3],\r\n    ax = a[4],\r\n    ay = a[5],\r\n    az = a[6],\r\n    aw = a[7],\r\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"rotateY\"](out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\nfunction rotateZ(out, a, rad) {\r\n  let bx = -a[0],\r\n    by = -a[1],\r\n    bz = -a[2],\r\n    bw = a[3],\r\n    ax = a[4],\r\n    ay = a[5],\r\n    az = a[6],\r\n    aw = a[7],\r\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"rotateZ\"](out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\r\nfunction rotateByQuatAppend(out, a, q) {\r\n  let qx = q[0],\r\n    qy = q[1],\r\n    qz = q[2],\r\n    qw = q[3],\r\n    ax = a[0],\r\n    ay = a[1],\r\n    az = a[2],\r\n    aw = a[3];\r\n\r\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\r\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\r\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\r\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\r\n  ax = a[4];\r\n  ay = a[5];\r\n  az = a[6];\r\n  aw = a[7];\r\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\r\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\r\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\r\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\r\nfunction rotateByQuatPrepend(out, q, a) {\r\n  let qx = q[0],\r\n    qy = q[1],\r\n    qz = q[2],\r\n    qw = q[3],\r\n    bx = a[0],\r\n    by = a[1],\r\n    bz = a[2],\r\n    bw = a[3];\r\n\r\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\r\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\r\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\r\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\r\n  bx = a[4];\r\n  by = a[5];\r\n  bz = a[6];\r\n  bw = a[7];\r\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\r\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\r\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\r\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\r\nfunction rotateAroundAxis(out, a, axis, rad) {\r\n  //Special case for rad = 0\r\n  if (Math.abs(rad) < _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"]) {\r\n    return copy(out, a);\r\n  }\r\n  let axisLength = Math.hypot(axis[0], axis[1], axis[2]);\r\n\r\n  rad = rad * 0.5;\r\n  let s = Math.sin(rad);\r\n  let bx = (s * axis[0]) / axisLength;\r\n  let by = (s * axis[1]) / axisLength;\r\n  let bz = (s * axis[2]) / axisLength;\r\n  let bw = Math.cos(rad);\r\n\r\n  let ax1 = a[0],\r\n    ay1 = a[1],\r\n    az1 = a[2],\r\n    aw1 = a[3];\r\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n\r\n  let ax = a[4],\r\n    ay = a[5],\r\n    az = a[6],\r\n    aw = a[7];\r\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  let ax0 = a[0],\r\n    ay0 = a[1],\r\n    az0 = a[2],\r\n    aw0 = a[3],\r\n    bx1 = b[4],\r\n    by1 = b[5],\r\n    bz1 = b[6],\r\n    bw1 = b[7],\r\n    ax1 = a[4],\r\n    ay1 = a[5],\r\n    az1 = a[6],\r\n    aw1 = a[7],\r\n    bx0 = b[0],\r\n    by0 = b[1],\r\n    bz0 = b[2],\r\n    bw0 = b[3];\r\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\r\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\r\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\r\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\r\n  out[4] =\r\n    ax0 * bw1 +\r\n    aw0 * bx1 +\r\n    ay0 * bz1 -\r\n    az0 * by1 +\r\n    ax1 * bw0 +\r\n    aw1 * bx0 +\r\n    ay1 * bz0 -\r\n    az1 * by0;\r\n  out[5] =\r\n    ay0 * bw1 +\r\n    aw0 * by1 +\r\n    az0 * bx1 -\r\n    ax0 * bz1 +\r\n    ay1 * bw0 +\r\n    aw1 * by0 +\r\n    az1 * bx0 -\r\n    ax1 * bz0;\r\n  out[6] =\r\n    az0 * bw1 +\r\n    aw0 * bz1 +\r\n    ax0 * by1 -\r\n    ay0 * bx1 +\r\n    az1 * bw0 +\r\n    aw1 * bz0 +\r\n    ax1 * by0 -\r\n    ay1 * bx0;\r\n  out[7] =\r\n    aw0 * bw1 -\r\n    ax0 * bx1 -\r\n    ay0 * by1 -\r\n    az0 * bz1 +\r\n    aw1 * bw0 -\r\n    ax1 * bx0 -\r\n    ay1 * by0 -\r\n    az1 * bz0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\r\nconst mul = multiply;\r\n\r\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nfunction scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nconst dot = _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"dot\"];\r\n\r\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\r\nfunction lerp(out, a, b, t) {\r\n  let mt = 1 - t;\r\n  if (dot(a, b) < 0) t = -t;\r\n\r\n  out[0] = a[0] * mt + b[0] * t;\r\n  out[1] = a[1] * mt + b[1] * t;\r\n  out[2] = a[2] * mt + b[2] * t;\r\n  out[3] = a[3] * mt + b[3] * t;\r\n  out[4] = a[4] * mt + b[4] * t;\r\n  out[5] = a[5] * mt + b[5] * t;\r\n  out[6] = a[6] * mt + b[6] * t;\r\n  out[7] = a[7] * mt + b[7] * t;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\r\nfunction invert(out, a) {\r\n  let sqlen = squaredLength(a);\r\n  out[0] = -a[0] / sqlen;\r\n  out[1] = -a[1] / sqlen;\r\n  out[2] = -a[2] / sqlen;\r\n  out[3] = a[3] / sqlen;\r\n  out[4] = -a[4] / sqlen;\r\n  out[5] = -a[5] / sqlen;\r\n  out[6] = -a[6] / sqlen;\r\n  out[7] = a[7] / sqlen;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\r\nfunction conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  out[4] = -a[4];\r\n  out[5] = -a[5];\r\n  out[6] = -a[6];\r\n  out[7] = a[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\r\nconst length = _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"length\"];\r\n\r\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\r\nconst len = length;\r\n\r\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nconst squaredLength = _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"squaredLength\"];\r\n\r\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\r\nconst sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nfunction normalize(out, a) {\r\n  let magnitude = squaredLength(a);\r\n  if (magnitude > 0) {\r\n    magnitude = Math.sqrt(magnitude);\r\n\r\n    let a0 = a[0] / magnitude;\r\n    let a1 = a[1] / magnitude;\r\n    let a2 = a[2] / magnitude;\r\n    let a3 = a[3] / magnitude;\r\n\r\n    let b0 = a[4];\r\n    let b1 = a[5];\r\n    let b2 = a[6];\r\n    let b3 = a[7];\r\n\r\n    let a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\r\n\r\n    out[0] = a0;\r\n    out[1] = a1;\r\n    out[2] = a2;\r\n    out[3] = a3;\r\n\r\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\r\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\r\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\r\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\r\nfunction str(a) {\r\n  return (\r\n    \"quat2(\" +\r\n    a[0] +\r\n    \", \" +\r\n    a[1] +\r\n    \", \" +\r\n    a[2] +\r\n    \", \" +\r\n    a[3] +\r\n    \", \" +\r\n    a[4] +\r\n    \", \" +\r\n    a[5] +\r\n    \", \" +\r\n    a[6] +\r\n    \", \" +\r\n    a[7] +\r\n    \")\"\r\n  );\r\n}\r\n\r\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quaternion.\r\n * @param {ReadonlyQuat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return (\r\n    a[0] === b[0] &&\r\n    a[1] === b[1] &&\r\n    a[2] === b[2] &&\r\n    a[3] === b[3] &&\r\n    a[4] === b[4] &&\r\n    a[5] === b[5] &&\r\n    a[6] === b[6] &&\r\n    a[7] === b[7]\r\n  );\r\n}\r\n\r\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quat.\r\n * @param {ReadonlyQuat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3],\r\n    a4 = a[4],\r\n    a5 = a[5],\r\n    a6 = a[6],\r\n    a7 = a[7];\r\n  let b0 = b[0],\r\n    b1 = b[1],\r\n    b2 = b[2],\r\n    b3 = b[3],\r\n    b4 = b[4],\r\n    b5 = b[5],\r\n    b6 = b[6],\r\n    b7 = b[7];\r\n  return (\r\n    Math.abs(a0 - b0) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n    Math.abs(a1 - b1) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n    Math.abs(a2 - b2) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n    Math.abs(a3 - b3) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\r\n    Math.abs(a4 - b4) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\r\n    Math.abs(a5 - b5) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\r\n    Math.abs(a6 - b6) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\r\n    Math.abs(a7 - b7) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a7), Math.abs(b7))\r\n  );\r\n}\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/math/quat2.js?");

/***/ }),

/***/ "../../../Akila/math/vec2.js":
/*!************************************!*\
  !*** D:/GitHub/Akila/math/vec2.js ***!
  \************************************/
/*! exports provided: create, clone, fromValues, copy, set, add, subtract, multiply, divide, ceil, floor, min, max, round, scale, scaleAndAdd, distance, squaredDistance, length, squaredLength, negate, inverse, normalize, dot, cross, lerp, random, transformMat2, transformMat2d, transformMat3, transformMat4, rotate, angle, zero, str, exactEquals, equals, len, sub, mul, div, dist, sqrDist, sqrLen, forEach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"divide\", function() { return divide; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ceil\", function() { return ceil; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"floor\", function() { return floor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"min\", function() { return min; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return max; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"round\", function() { return round; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scaleAndAdd\", function() { return scaleAndAdd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return distance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredDistance\", function() { return squaredDistance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return length; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return squaredLength; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"negate\", function() { return negate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inverse\", function() { return inverse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return dot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cross\", function() { return cross; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"random\", function() { return random; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformMat2\", function() { return transformMat2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformMat2d\", function() { return transformMat2d; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformMat3\", function() { return transformMat3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformMat4\", function() { return transformMat4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return rotate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"angle\", function() { return angle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"zero\", function() { return zero; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"len\", function() { return len; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"div\", function() { return div; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dist\", function() { return dist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrDist\", function() { return sqrDist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrLen\", function() { return sqrLen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEach\", function() { return forEach; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"../../../Akila/math/common.js\");\n\r\n\r\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\r\nfunction create() {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](2);\r\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\r\nfunction clone(a) {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](2);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\r\nfunction fromValues(x, y) {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](2);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the source vector\r\n * @returns {vec2} out\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\nfunction set(out, x, y) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nfunction divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\r\nfunction ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to floor\r\n * @returns {vec2} out\r\n */\r\nfunction floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nfunction min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nfunction max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to round\r\n * @returns {vec2} out\r\n */\r\nfunction round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\r\nfunction scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\r\nfunction scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nfunction distance(a, b) {\r\n  var x = b[0] - a[0],\r\n    y = b[1] - a[1];\r\n  return Math.hypot(x, y);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nfunction squaredDistance(a, b) {\r\n  var x = b[0] - a[0],\r\n    y = b[1] - a[1];\r\n  return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nfunction length(a) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  return Math.hypot(x, y);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nfunction squaredLength(a) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\nfunction negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to invert\r\n * @returns {vec2} out\r\n */\r\nfunction inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\nfunction normalize(out, a) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  var len = x * x + y * y;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n  }\r\n  out[0] = a[0] * len;\r\n  out[1] = a[1] * len;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nfunction dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction cross(out, a, b) {\r\n  var z = a[0] * b[1] - a[1] * b[0];\r\n  out[0] = out[1] = 0;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\r\nfunction lerp(out, a, b, t) {\r\n  var ax = a[0],\r\n    ay = a[1];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\r\nfunction random(out, scale) {\r\n  scale = scale || 1.0;\r\n  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]() * 2.0 * Math.PI;\r\n  out[0] = Math.cos(r) * scale;\r\n  out[1] = Math.sin(r) * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nfunction transformMat2(out, a, m) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  out[0] = m[0] * x + m[2] * y;\r\n  out[1] = m[1] * x + m[3] * y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nfunction transformMat2d(out, a, m) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  out[0] = m[0] * x + m[2] * y + m[4];\r\n  out[1] = m[1] * x + m[3] * y + m[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nfunction transformMat3(out, a, m) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  out[0] = m[0] * x + m[3] * y + m[6];\r\n  out[1] = m[1] * x + m[4] * y + m[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nfunction transformMat4(out, a, m) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  out[0] = m[0] * x + m[4] * y + m[12];\r\n  out[1] = m[1] * x + m[5] * y + m[13];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {ReadonlyVec2} a The vec2 point to rotate\r\n * @param {ReadonlyVec2} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec2} out\r\n */\r\nfunction rotate(out, a, b, rad) {\r\n  //Translate point to the origin\r\n  let p0 = a[0] - b[0],\r\n    p1 = a[1] - b[1],\r\n    sinC = Math.sin(rad),\r\n    cosC = Math.cos(rad);\r\n\r\n  //perform rotation and translate to correct position\r\n  out[0] = p0 * cosC - p1 * sinC + b[0];\r\n  out[1] = p0 * sinC + p1 * cosC + b[1];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {ReadonlyVec2} a The first operand\r\n * @param {ReadonlyVec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nfunction angle(a, b) {\r\n  let x1 = a[0],\r\n    y1 = a[1],\r\n    x2 = b[0],\r\n    y2 = b[1],\r\n    // mag is the product of the magnitudes of a and b\r\n    mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\r\n    // mag &&.. short circuits if mag == 0\r\n    cosine = mag && (x1 * x2 + y1 * y2) / mag;\r\n  // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\r\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\r\n}\r\n\r\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\r\nfunction zero(out) {\r\n  out[0] = 0.0;\r\n  out[1] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nfunction str(a) {\r\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  let a0 = a[0],\r\n    a1 = a[1];\r\n  let b0 = b[0],\r\n    b1 = b[1];\r\n  return (\r\n    Math.abs(a0 - b0) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n    Math.abs(a1 - b1) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1))\r\n  );\r\n}\r\n\r\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\r\nconst len = length;\r\n\r\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\r\nconst sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\r\nconst mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\r\nconst div = divide;\r\n\r\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\r\nconst dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\r\nconst sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\r\nconst sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nconst forEach = (function() {\r\n  let vec = create();\r\n\r\n  return function(a, stride, offset, count, fn, arg) {\r\n    let i, l;\r\n    if (!stride) {\r\n      stride = 2;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];\r\n      vec[1] = a[i + 1];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];\r\n      a[i + 1] = vec[1];\r\n    }\r\n\r\n    return a;\r\n  };\r\n})();\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/math/vec2.js?");

/***/ }),

/***/ "../../../Akila/math/vec3.js":
/*!************************************!*\
  !*** D:/GitHub/Akila/math/vec3.js ***!
  \************************************/
/*! exports provided: create, clone, length, fromValues, copy, set, add, subtract, multiply, divide, ceil, floor, min, max, round, scale, scaleAndAdd, distance, squaredDistance, squaredLength, negate, inverse, normalize, dot, cross, lerp, hermite, bezier, random, transformMat4, transformMat3, transformQuat, rotateX, rotateY, rotateZ, angle, zero, str, exactEquals, equals, sub, mul, div, dist, sqrDist, len, sqrLen, forEach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return length; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"divide\", function() { return divide; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ceil\", function() { return ceil; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"floor\", function() { return floor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"min\", function() { return min; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return max; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"round\", function() { return round; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scaleAndAdd\", function() { return scaleAndAdd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return distance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredDistance\", function() { return squaredDistance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return squaredLength; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"negate\", function() { return negate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inverse\", function() { return inverse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return dot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cross\", function() { return cross; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hermite\", function() { return hermite; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bezier\", function() { return bezier; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"random\", function() { return random; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformMat4\", function() { return transformMat4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformMat3\", function() { return transformMat3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformQuat\", function() { return transformQuat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return rotateX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return rotateY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"angle\", function() { return angle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"zero\", function() { return zero; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"div\", function() { return div; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dist\", function() { return dist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrDist\", function() { return sqrDist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"len\", function() { return len; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrLen\", function() { return sqrLen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEach\", function() { return forEach; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"../../../Akila/math/common.js\");\n\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nfunction create() {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](3);\r\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nfunction clone(a) {\r\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nfunction length(a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  return Math.hypot(x, y, z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nfunction fromValues(x, y, z) {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nfunction set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nfunction ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nfunction floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nfunction round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nfunction scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nfunction scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nfunction distance(a, b) {\r\n  let x = b[0] - a[0];\r\n  let y = b[1] - a[1];\r\n  let z = b[2] - a[2];\r\n  return Math.hypot(x, y, z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nfunction squaredDistance(a, b) {\r\n  let x = b[0] - a[0];\r\n  let y = b[1] - a[1];\r\n  let z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nfunction squaredLength(a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nfunction negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nfunction inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nfunction normalize(out, a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  let len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n  }\r\n  out[0] = a[0] * len;\r\n  out[1] = a[1] * len;\r\n  out[2] = a[2] * len;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nfunction dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction cross(out, a, b) {\r\n  let ax = a[0],\r\n    ay = a[1],\r\n    az = a[2];\r\n  let bx = b[0],\r\n    by = b[1],\r\n    bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nfunction lerp(out, a, b, t) {\r\n  let ax = a[0];\r\n  let ay = a[1];\r\n  let az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nfunction hermite(out, a, b, c, d, t) {\r\n  let factorTimes2 = t * t;\r\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  let factor2 = factorTimes2 * (t - 2) + t;\r\n  let factor3 = factorTimes2 * (t - 1);\r\n  let factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nfunction bezier(out, a, b, c, d, t) {\r\n  let inverseFactor = 1 - t;\r\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  let factorTimes2 = t * t;\r\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  let factor2 = 3 * t * inverseFactorTimesTwo;\r\n  let factor3 = 3 * factorTimes2 * inverseFactor;\r\n  let factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nfunction random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  let r = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]() * 2.0 * Math.PI;\r\n  let z = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]() * 2.0 - 1.0;\r\n  let zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nfunction transformMat4(out, a, m) {\r\n  let x = a[0],\r\n    y = a[1],\r\n    z = a[2];\r\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nfunction transformMat3(out, a, m) {\r\n  let x = a[0],\r\n    y = a[1],\r\n    z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nfunction transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  let qx = q[0],\r\n    qy = q[1],\r\n    qz = q[2],\r\n    qw = q[3];\r\n  let x = a[0],\r\n    y = a[1],\r\n    z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  let uvx = qy * z - qz * y,\r\n    uvy = qz * x - qx * z,\r\n    uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  let uuvx = qy * uvz - qz * uvy,\r\n    uuvy = qz * uvx - qx * uvz,\r\n    uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  let w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\r\nfunction rotateX(out, a, b, rad) {\r\n  let p = [],\r\n    r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\r\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\r\nfunction rotateY(out, a, b, rad) {\r\n  let p = [],\r\n    r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\r\nfunction rotateZ(out, a, b, rad) {\r\n  let p = [],\r\n    r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\r\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nfunction angle(a, b) {\r\n  let ax = a[0],\r\n    ay = a[1],\r\n    az = a[2],\r\n    bx = b[0],\r\n    by = b[1],\r\n    bz = b[2],\r\n    mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\r\n    mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\r\n    mag = mag1 * mag2,\r\n    cosine = mag && dot(a, b) / mag;\r\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\r\nfunction zero(out) {\r\n  out[0] = 0.0;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nfunction str(a) {\r\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2];\r\n  let b0 = b[0],\r\n    b1 = b[1],\r\n    b2 = b[2];\r\n  return (\r\n    Math.abs(a0 - b0) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n    Math.abs(a1 - b1) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n    Math.abs(a2 - b2) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2))\r\n  );\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nconst sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nconst mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nconst div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nconst dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nconst sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nconst len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nconst sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nconst forEach = (function() {\r\n  let vec = create();\r\n\r\n  return function(a, stride, offset, count, fn, arg) {\r\n    let i, l;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];\r\n      vec[1] = a[i + 1];\r\n      vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];\r\n      a[i + 1] = vec[1];\r\n      a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n})();\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/math/vec3.js?");

/***/ }),

/***/ "../../../Akila/math/vec4.js":
/*!************************************!*\
  !*** D:/GitHub/Akila/math/vec4.js ***!
  \************************************/
/*! exports provided: create, clone, fromValues, copy, set, add, subtract, multiply, divide, ceil, floor, min, max, round, scale, scaleAndAdd, distance, squaredDistance, length, squaredLength, negate, inverse, normalize, dot, cross, lerp, random, transformMat4, transformQuat, zero, str, exactEquals, equals, sub, mul, div, dist, sqrDist, len, sqrLen, forEach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"divide\", function() { return divide; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ceil\", function() { return ceil; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"floor\", function() { return floor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"min\", function() { return min; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return max; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"round\", function() { return round; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scaleAndAdd\", function() { return scaleAndAdd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return distance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredDistance\", function() { return squaredDistance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return length; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return squaredLength; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"negate\", function() { return negate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inverse\", function() { return inverse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return dot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cross\", function() { return cross; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"random\", function() { return random; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformMat4\", function() { return transformMat4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformQuat\", function() { return transformQuat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"zero\", function() { return zero; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"div\", function() { return div; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dist\", function() { return dist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrDist\", function() { return sqrDist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"len\", function() { return len; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrLen\", function() { return sqrLen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEach\", function() { return forEach; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"../../../Akila/math/common.js\");\n\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nfunction create() {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](4);\r\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nfunction clone(a) {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nfunction fromValues(x, y, z, w) {\r\n  let out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nfunction set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nfunction divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nfunction ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nfunction floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nfunction min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nfunction max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nfunction round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nfunction scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nfunction scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nfunction distance(a, b) {\r\n  let x = b[0] - a[0];\r\n  let y = b[1] - a[1];\r\n  let z = b[2] - a[2];\r\n  let w = b[3] - a[3];\r\n  return Math.hypot(x, y, z, w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nfunction squaredDistance(a, b) {\r\n  let x = b[0] - a[0];\r\n  let y = b[1] - a[1];\r\n  let z = b[2] - a[2];\r\n  let w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nfunction length(a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  let w = a[3];\r\n  return Math.hypot(x, y, z, w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nfunction squaredLength(a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  let w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nfunction negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nfunction inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nfunction normalize(out, a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  let w = a[3];\r\n  let len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n  }\r\n  out[0] = x * len;\r\n  out[1] = y * len;\r\n  out[2] = z * len;\r\n  out[3] = w * len;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nfunction dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\r\nfunction cross(out, u, v, w) {\r\n  let A = v[0] * w[1] - v[1] * w[0],\r\n    B = v[0] * w[2] - v[2] * w[0],\r\n    C = v[0] * w[3] - v[3] * w[0],\r\n    D = v[1] * w[2] - v[2] * w[1],\r\n    E = v[1] * w[3] - v[3] * w[1],\r\n    F = v[2] * w[3] - v[3] * w[2];\r\n  let G = u[0];\r\n  let H = u[1];\r\n  let I = u[2];\r\n  let J = u[3];\r\n\r\n  out[0] = H * F - I * E + J * D;\r\n  out[1] = -(G * F) + I * C - J * B;\r\n  out[2] = G * E - H * C + J * A;\r\n  out[3] = -(G * D) + H * B - I * A;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nfunction lerp(out, a, b, t) {\r\n  let ax = a[0];\r\n  let ay = a[1];\r\n  let az = a[2];\r\n  let aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nfunction random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]() * 2 - 1;\r\n    v2 = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]() * 2 - 1;\r\n    v4 = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nfunction transformMat4(out, a, m) {\r\n  let x = a[0],\r\n    y = a[1],\r\n    z = a[2],\r\n    w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nfunction transformQuat(out, a, q) {\r\n  let x = a[0],\r\n    y = a[1],\r\n    z = a[2];\r\n  let qx = q[0],\r\n    qy = q[1],\r\n    qz = q[2],\r\n    qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  let ix = qw * x + qy * z - qz * y;\r\n  let iy = qw * y + qz * x - qx * z;\r\n  let iz = qw * z + qx * y - qy * x;\r\n  let iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\r\nfunction zero(out) {\r\n  out[0] = 0.0;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nfunction str(a) {\r\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  let a0 = a[0],\r\n    a1 = a[1],\r\n    a2 = a[2],\r\n    a3 = a[3];\r\n  let b0 = b[0],\r\n    b1 = b[1],\r\n    b2 = b[2],\r\n    b3 = b[3];\r\n  return (\r\n    Math.abs(a0 - b0) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n    Math.abs(a1 - b1) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n    Math.abs(a2 - b2) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n    Math.abs(a3 - b3) <=\r\n      _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3))\r\n  );\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nconst sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nconst mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nconst div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nconst dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nconst sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nconst len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nconst sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nconst forEach = (function() {\r\n  let vec = create();\r\n\r\n  return function(a, stride, offset, count, fn, arg) {\r\n    let i, l;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];\r\n      vec[1] = a[i + 1];\r\n      vec[2] = a[i + 2];\r\n      vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];\r\n      a[i + 1] = vec[1];\r\n      a[i + 2] = vec[2];\r\n      a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n})();\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/math/vec4.js?");

/***/ }),

/***/ "../../../Akila/time.js":
/*!*******************************!*\
  !*** D:/GitHub/Akila/time.js ***!
  \*******************************/
/*! exports provided: Time, Key, Timeline, StateTimeline, Clock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _time_Time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./time/Time */ \"../../../Akila/time/Time.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Time\", function() { return _time_Time__WEBPACK_IMPORTED_MODULE_0__[\"Time\"]; });\n\n/* harmony import */ var _time_Timeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./time/Timeline */ \"../../../Akila/time/Timeline.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Key\", function() { return _time_Timeline__WEBPACK_IMPORTED_MODULE_1__[\"Key\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Timeline\", function() { return _time_Timeline__WEBPACK_IMPORTED_MODULE_1__[\"Timeline\"]; });\n\n/* harmony import */ var _time_StateTimeline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./time/StateTimeline */ \"../../../Akila/time/StateTimeline.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"StateTimeline\", function() { return _time_StateTimeline__WEBPACK_IMPORTED_MODULE_2__[\"StateTimeline\"]; });\n\n/* harmony import */ var _time_Clock__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./time/Clock */ \"../../../Akila/time/Clock.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Clock\", function() { return _time_Clock__WEBPACK_IMPORTED_MODULE_3__[\"Clock\"]; });\n\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/time.js?");

/***/ }),

/***/ "../../../Akila/time/Clock.js":
/*!*************************************!*\
  !*** D:/GitHub/Akila/time/Clock.js ***!
  \*************************************/
/*! exports provided: Clock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Clock\", function() { return Clock; });\n/* harmony import */ var _Time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Time */ \"../../../Akila/time/Time.js\");\n\r\n\r\nclass ClockNoLoopState {\r\n    static calculate(clock) {\r\n        clock.currentTime += _Time__WEBPACK_IMPORTED_MODULE_0__[\"Time\"].delta * clock.delta;\r\n        if(clock.currentTime >= clock.end) clock.currentTime = clock.end;\r\n    }\r\n}\r\n\r\nclass ClockLoopState {\r\n    static calculate(clock) {\r\n        clock.currentTime += _Time__WEBPACK_IMPORTED_MODULE_0__[\"Time\"].delta * clock.delta;\r\n        while(clock.currentTime >= clock.end) clock.currentTime -= clock.diff;\r\n    }\r\n}\r\n\r\nclass Clock {\r\n    constructor(start = 0, end = 10, delta = 1) {\r\n        this.start = start;\r\n        this.end = end;\r\n        this.delta = delta;\r\n        this.diff = end - start;\r\n\r\n        this.setLoop(true);\r\n        this.reset();\r\n    }\r\n\r\n    setLoop(loop) {\r\n        if(loop) this.state = ClockLoopState;\r\n        else this.state = ClockNoLoopState;\r\n    }\r\n\r\n    next() {\r\n        this.state.calculate(this);\r\n        this.tic = Math.floor(this.currentTime);\r\n    }\r\n\r\n    getValue() {\r\n        return this.tic;\r\n    }\r\n\r\n    isFirst() {\r\n        return this.currentTime == this.start;\r\n    }\r\n\r\n    reset() {\r\n        this.currentTime = this.start;\r\n        this.tic = this.start;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/time/Clock.js?");

/***/ }),

/***/ "../../../Akila/time/StateTimeline.js":
/*!*********************************************!*\
  !*** D:/GitHub/Akila/time/StateTimeline.js ***!
  \*********************************************/
/*! exports provided: StateTimeline */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StateTimeline\", function() { return StateTimeline; });\nclass StateTimelineNoLoopState {\r\n    static calculateIndex(tl) {\r\n        tl.currentIndex = Math.min(tl.currentIndex + 1, tl.states.length - 1);\r\n    }\r\n}\r\n\r\nclass StateTimelineLoopState {\r\n    static calculateIndex(tl) {\r\n        ++tl.currentIndex;\r\n        if(tl.currentIndex >= tl.states.length) tl.currentIndex = 0;\r\n    }\r\n}\r\n\r\nclass StateTimeline {\r\n    constructor() {\r\n        this.states = new Array();\r\n        this.buffer = new Object();\r\n        this.setLoop(false);\r\n        this.reset();\r\n    }\r\n\r\n    addState(obj) {\r\n        if(this.states.length == 0) this.buffer = obj;\r\n        this.states.push(obj);\r\n        return this;\r\n    }\r\n\r\n    setLoop(loop) {\r\n        if(loop) this.state = StateTimelineLoopState;\r\n        else this.state = StateTimelineNoLoopState;\r\n        return this;\r\n    }\r\n\r\n    next() {\r\n        this.state.calculateIndex(this);\r\n        this.buffer = this.states[this.currentIndex];\r\n    }\r\n\r\n    reset() {\r\n        this.currentIndex = 0;\r\n    }\r\n\r\n    getData() {\r\n        return this.buffer;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/time/StateTimeline.js?");

/***/ }),

/***/ "../../../Akila/time/Time.js":
/*!************************************!*\
  !*** D:/GitHub/Akila/time/Time.js ***!
  \************************************/
/*! exports provided: Time */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Time\", function() { return Time; });\nclass Time {\r\n    constructor() {\r\n        if(Time.instance) return;\r\n        Time.instance = this;\r\n\r\n        this.onInit(() => {});\r\n        this.onTick(() => {});\r\n        this.onDraw(() => {});\r\n\r\n        Time.mouse = () => {};\r\n        Time.gamepad = () => {};\r\n\r\n        Time.run = false;\r\n        Time.tickStart = 0;\r\n        Time.drawStart = 0;\r\n\r\n        this.setDeltaLimite(1 / 15);\r\n    }\r\n\r\n    onInit(callBack) {\r\n        Time.init = callBack;\r\n    }\r\n\r\n    onTick(callack) {\r\n        Time.tickCallback = () => {\r\n            callack();\r\n            Time.tick = Time.now - Time.tickStart;\r\n        }\r\n    }\r\n\r\n    onDraw(callack) {\r\n        Time.drawCallback = () => {\r\n            callack();\r\n            Time.draw = Time.now - Time.drawStart;\r\n        }\r\n    }\r\n\r\n    async start() {\r\n        if(Time.run) return;\r\n\r\n        await Time.init();\r\n\r\n        Time.run = true;\r\n\r\n        const cb = (iNow) => {\r\n            Time.now = iNow / 1e3;\r\n            Time.delta = (Time.now - Time.lastTime) * Time.scale;\r\n            Time.limitedDelta = Time.delta > Time.maxDelta ? Time.maxDelta : Time.delta;\r\n            Time.fps = Math.floor(1 / Time.delta * 100) / 100;\r\n            Time.lastTime = Time.now;\r\n\r\n            Time.gamepad();\r\n\r\n            Time.tickFunc();\r\n            Time.drawFunc();\r\n\r\n            Time.mouse();\r\n\r\n            requestAnimationFrame(cb);\r\n        }\r\n\r\n        requestAnimationFrame((iNow) => {\r\n            Time.lastTime = iNow / 1e3;\r\n\r\n            Time.now = Time.lastTime;\r\n            this.play();\r\n\r\n            requestAnimationFrame(cb);\r\n        });\r\n    }\r\n\r\n    setScale(scale) {\r\n        Time.scale = scale;\r\n    }\r\n\r\n    setDeltaLimite(limite) {\r\n        Time.maxDelta = limite;\r\n    }\r\n\r\n    pause() {\r\n        this.pauseTick();\r\n        this.pauseDraw();\r\n    }\r\n\r\n    play() {\r\n        this.playTick();\r\n        this.playDraw();\r\n    }\r\n\r\n    pauseTick() {\r\n        Time.tickFunc = () => {};\r\n    }\r\n\r\n    playTick() {\r\n        Time.tickFunc = Time.tickCallback;\r\n        Time.tickStart = Time.now - Time.tick;\r\n    }\r\n\r\n    pauseDraw() {\r\n        Time.drawFunc = () => {};\r\n    }\r\n\r\n    playDraw() {\r\n        Time.drawFunc = Time.drawCallback;\r\n        Time.drawStart = Time.now - Time.draw;\r\n    }\r\n}\r\n\r\nTime.delta = 0;\r\nTime.limitedDelta = 0;\r\nTime.lastTime = 0;\r\nTime.scale = 1;\r\nTime.fps = 0;\r\nTime.now = 0;\r\nTime.tick = 0;\r\nTime.draw = 0;\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/time/Time.js?");

/***/ }),

/***/ "../../../Akila/time/Timeline.js":
/*!****************************************!*\
  !*** D:/GitHub/Akila/time/Timeline.js ***!
  \****************************************/
/*! exports provided: Key, Timeline */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Key\", function() { return Key; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Timeline\", function() { return Timeline; });\n/* harmony import */ var _Time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Time */ \"../../../Akila/time/Time.js\");\n\r\n\r\nclass KeyLinearState {\r\n    static calculate(buffer, indexDelimiter, key1, key2, delta) {\r\n        const data1 = key1.getData();\r\n        const data2 = key2.getData();\r\n\r\n        for(let i = 0; i < indexDelimiter; ++i) buffer[i] = TimelineUtils.bezier1(data1[i], data2[i], delta);\r\n        for(let i = indexDelimiter; i < data1.length; ++i) buffer[i] = data1[i];\r\n    }\r\n}\r\n\r\n\r\nclass KeyQuadraticBezierState {\r\n    static calculate(buffer, indexDelimiter, key1, key2, delta) {\r\n        const data1 = key1.getData();\r\n        const data2 = key2.getData();\r\n\r\n        const dataControl1 = key1.getController1();\r\n              \r\n        for(let i = 0; i < indexDelimiter; ++i) buffer[i] = TimelineUtils.bezier2(data1[i], dataControl1[i], data2[i], delta);\r\n        for(let i = indexDelimiter; i < data1.length; ++i) buffer[i] = data1[i];\r\n    }\r\n}\r\n\r\nclass KeyCubicBezierState {\r\n    static calculate(buffer, indexDelimiter, key1, key2, delta) {\r\n        const data1 = key1.getData();\r\n        const data2 = key2.getData();\r\n\r\n        const dataControl1 = key1.getController1();\r\n        const dataControl2 = key1.getController2();\r\n\r\n        for(let i = 0; i < indexDelimiter; ++i) buffer[i] = TimelineUtils.bezier3(data1[i], dataControl1[i], dataControl2[i], data2[i], delta);\r\n        for(let i = indexDelimiter; i < data1.length; ++i) buffer[i] = data1[i];\r\n    }\r\n}\r\n\r\nclass Key {\r\n    constructor(data, time) {\r\n        this.setData(data);\r\n        this.time = time;\r\n        this.state = KeyLinearState;\r\n    }\r\n\r\n    getTime() {\r\n        return this.time;\r\n    }\r\n\r\n    setData(data) {\r\n        this.data = data;\r\n        return this;\r\n    }\r\n\r\n    setController1(data) {\r\n        this.controller1 = data;\r\n        if(this.state == KeyLinearState) this.state = KeyQuadraticBezierState;\r\n        return this;\r\n    }\r\n\r\n    getController1() {\r\n        return this.controller1;\r\n    }\r\n\r\n    setController2(data) {\r\n        this.controller2 = data;\r\n        if(this.state != KeyCubicBezierState) this.state = KeyCubicBezierState;\r\n        return this;\r\n    }\r\n\r\n    getController2() {\r\n        return this.controller2;\r\n    }\r\n\r\n    getData() {\r\n        return this.data;\r\n    }\r\n}\r\n\r\n\r\nclass TimelineUtils {\r\n    static bezier1(p0, p1, t) {\r\n        return p0 * (1 - t) + p1 * t;\r\n    }\r\n\r\n    static bezier2(p0, p1, p2, t) {\r\n        const mt = 1 - t;\r\n        return p0 * (mt * mt) + 2 * p1 * t * mt + p2 * (t * t);\r\n    }\r\n\r\n    static bezier3(p0, p1, p2, p3, t) {\r\n        const t1 = 1 - t;\r\n        return p0 * (t1 * t1 * t1) + 3 * p1 * t * (t1 * t1) + 3 * p2 *(t * t) * t1 + p3 * (t * t * t);\r\n    }\r\n}\r\n\r\nclass TimelineNoLoopState {\r\n    static calculateIndex(tl) {\r\n        const indexMax = tl.keys.length - 2;\r\n        while (tl.keys[tl.currentIndex + 1].getTime() < tl.currentTime) {\r\n            if(tl.currentIndex < indexMax) {\r\n                ++tl.currentIndex;\r\n            } else {\r\n                tl.currentTime = tl.keys[tl.currentIndex + 1].getTime();\r\n                tl.currentIndex = indexMax;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass TimelineLoopState {\r\n    static calculateIndex(tl) {\r\n        while(tl.keys[tl.currentIndex + 1].getTime() < tl.currentTime) {\r\n            if(tl.currentIndex < (tl.keys.length - 2)) {\r\n                ++tl.currentIndex;\r\n            } else {\r\n                tl.currentTime -= tl.keys[tl.currentIndex + 1].getTime();\r\n                tl.currentIndex = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass Timeline {\r\n    constructor(interpolateIndexDelimiter = -1) {\r\n        this.keys = new Array();\r\n        this.buffer = new Array();\r\n        this.indexDelimiter = interpolateIndexDelimiter;\r\n        this.setLoop(false);\r\n        this.reset();\r\n    }\r\n\r\n    addKey(key) {\r\n        if(this.keys.length == 0) {\r\n            const data = key.getData();\r\n\r\n            if(data instanceof Float32Array) this.buffer = new Float32Array(data.length);\r\n            else if(data instanceof Float64Array) this.buffer = new Float64Array(data.length);\r\n            else if(data instanceof Int8Array) this.buffer = new Int8Array(data.length);\r\n            else if(data instanceof Int16Array) this.buffer = new Int16Array(data.length);\r\n            else if(data instanceof Int32Array) this.buffer = new Int32Array(data.length);\r\n            else this.buffer = new Array(data.length);\r\n\r\n            if(this.indexDelimiter == -1) this.indexDelimiter = data.length;\r\n            for(let i = 0; i < data.length; ++i) this.buffer[i] = data[i];\r\n        }\r\n        \r\n        this.keys.push(key);\r\n        return this;\r\n    }\r\n\r\n    setLoop(loop) {\r\n        if(loop) this.state = TimelineLoopState;\r\n        else this.state = TimelineNoLoopState;\r\n        return this;\r\n    }\r\n\r\n    next() {\r\n        this.state.calculateIndex(this);\r\n\r\n        const key1 = this.keys[this.currentIndex];\r\n        const key2 = this.keys[this.currentIndex + 1];\r\n        const delta = (this.currentTime - key1.getTime()) / (key2.getTime() - key1.getTime());\r\n\r\n        key1.state.calculate(this.buffer, this.indexDelimiter, key1, key2, delta);\r\n\r\n        this.currentTime += _Time__WEBPACK_IMPORTED_MODULE_0__[\"Time\"].delta;\r\n    }\r\n\r\n    getData() {\r\n        return this.buffer;\r\n    }\r\n\r\n    reset() {\r\n        this.currentTime = 0;\r\n        this.currentIndex = 0;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/time/Timeline.js?");

/***/ }),

/***/ "../../../Akila/utils.js":
/*!********************************!*\
  !*** D:/GitHub/Akila/utils.js ***!
  \********************************/
/*! exports provided: Parser, Bank, Camera, FirstPersonCamera, TrackBallCamera, LinkedList, LinkedStructure, Color, GLSLParser, CubeMapTextureBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_Parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/Parser */ \"../../../Akila/utils/Parser.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Parser\", function() { return _utils_Parser__WEBPACK_IMPORTED_MODULE_0__[\"Parser\"]; });\n\n/* harmony import */ var _utils_Bank__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/Bank */ \"../../../Akila/utils/Bank.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Bank\", function() { return _utils_Bank__WEBPACK_IMPORTED_MODULE_1__[\"Bank\"]; });\n\n/* harmony import */ var _utils_Camera__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/Camera */ \"../../../Akila/utils/Camera.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Camera\", function() { return _utils_Camera__WEBPACK_IMPORTED_MODULE_2__[\"Camera\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"FirstPersonCamera\", function() { return _utils_Camera__WEBPACK_IMPORTED_MODULE_2__[\"FirstPersonCamera\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TrackBallCamera\", function() { return _utils_Camera__WEBPACK_IMPORTED_MODULE_2__[\"TrackBallCamera\"]; });\n\n/* harmony import */ var _utils_LinkedStructure__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/LinkedStructure */ \"../../../Akila/utils/LinkedStructure.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"LinkedList\", function() { return _utils_LinkedStructure__WEBPACK_IMPORTED_MODULE_3__[\"LinkedList\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"LinkedStructure\", function() { return _utils_LinkedStructure__WEBPACK_IMPORTED_MODULE_3__[\"LinkedStructure\"]; });\n\n/* harmony import */ var _utils_Color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/Color */ \"../../../Akila/utils/Color.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Color\", function() { return _utils_Color__WEBPACK_IMPORTED_MODULE_4__[\"Color\"]; });\n\n/* harmony import */ var _utils_GLSLParser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/GLSLParser */ \"../../../Akila/utils/GLSLParser.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"GLSLParser\", function() { return _utils_GLSLParser__WEBPACK_IMPORTED_MODULE_5__[\"GLSLParser\"]; });\n\n/* harmony import */ var _utils_CubeMapTextureBuilder__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/CubeMapTextureBuilder */ \"../../../Akila/utils/CubeMapTextureBuilder.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CubeMapTextureBuilder\", function() { return _utils_CubeMapTextureBuilder__WEBPACK_IMPORTED_MODULE_6__[\"CubeMapTextureBuilder\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/utils.js?");

/***/ }),

/***/ "../../../Akila/utils/Bank.js":
/*!*************************************!*\
  !*** D:/GitHub/Akila/utils/Bank.js ***!
  \*************************************/
/*! exports provided: Bank */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Bank\", function() { return Bank; });\n/*export class Bank {\r\n    constructor(repertoire, listeNomFichiers, options = {extension: null, mediaType: null, treatment: null, default: null}){\r\n        this.setDirectory(repertoire);\r\n        this.setFileList(listeNomFichiers);\r\n        this.setOptions(options);\r\n    }\r\n\r\n    setDirectory(rep = './'){\r\n        this.rep = rep;\r\n        return this;\r\n    }\r\n\r\n    setFileList(listeNomFichiers = []){\r\n        this.noms = listeNomFichiers.map(str => str.trim());\r\n        return this;\r\n    }\r\n\r\n    setOptions(options = {extension: null, mediaType: null, treatment: null, default: null}){\r\n        this.extension = options.extension ? `.${options.extension}` : \"\";\r\n        this.mediaType = options.mediaType || Bank.TEXT;\r\n        this.treatment = options.treatment || null;\r\n        this.default = options.default || undefined;\r\n        return this;\r\n    }\r\n\r\n    initForLoad(){\r\n        if(this.mediaType === 'image') this.mediaType = Bank.IMAGE;\r\n\r\n        if(this.mediaType === Bank.IMAGE ||\r\n          this.mediaType === Bank.VIDEO ||\r\n          this.mediaType === Bank.AUDIO)\r\n          this.requeteMode = 'media';\r\n        //else if(this.mediaType === \"font\") this.requeteMode = \"font\";\r\n        else this.requeteMode = 'file';\r\n\r\n        if(this.mediaType !== Bank.ARRAY_BUFFER &&\r\n          this.mediaType !== Bank.BLOB &&\r\n          this.mediaType !== Bank.FORM_DATA &&\r\n          this.mediaType !== Bank.JSON &&\r\n          //this.mediaType !== \"font\" &&\r\n          this.mediaType === Bank.TEXT\r\n        ) this.mediaType = 'text';\r\n\r\n        this.fichiers = new Object();\r\n    }\r\n\r\n    async loadMedia(nom){\r\n      return new Promise((resolve, reject) => {\r\n        const elem = document.createElement(this.mediaType);\r\n        if(this.mediaType == 'img') elem.onload = () => {resolve(elem);};\r\n        else elem.onloadedmetadata = () => {resolve(elem);};\r\n        elem.onerror = () => { reject(); }\r\n        elem.src = `${this.rep}/${nom}${this.extension}`;\r\n      });\r\n    }\r\n\r\n    //async loadFont(nom){\r\n    //  const font = new FontFace(nom, `${this.rep}/${nom}${this.extension}`);\r\n    //  return font.load()\r\n    //  .then(() => {\r\n    //    return font;\r\n    //  });\r\n    //}\r\n\r\n    async loadFile(nom){\r\n        return fetch(`${this.rep}/${nom}${this.extension}`)\r\n        .then(data => {\r\n            if(data.ok) return data[this.mediaType]();\r\n            else return Promise.reject();\r\n        })\r\n    }\r\n\r\n    async load(stateEvent, endMessage = ''){\r\n        this.initForLoad();\r\n        if(typeof stateEvent !== 'function') stateEvent = (p) => {};\r\n\r\n        return new Promise(async (resolve, reject) => {\r\n            if(this.noms.length == 0) {\r\n                stateEvent(100, endMessage);\r\n                resolve();\r\n            } else {\r\n                let nbTotalFichier = this.noms.length;\r\n\r\n                let requete;\r\n                if(this.requeteMode === 'media') requete = this.loadMedia.bind(this);\r\n                //else if(this.requeteMode === \"font\") requete = this.loadFont.bind(this);\r\n                else requete = this.loadFile.bind(this);\r\n\r\n                for (const nom of this.noms) {\r\n                    stateEvent(Math.floor((this.noms.length - nbTotalFichier) / this.noms.length * 100), nom);\r\n\r\n                    await requete(nom)\r\n                    .then(async file => {\r\n                        if(typeof this.treatment === 'function') this.fichiers[nom] = await this.treatment(file, nom);\r\n                        else this.fichiers[nom] = file;\r\n                        --nbTotalFichier;\r\n                    })\r\n                    .catch(e => {\r\n                        console.warn(`Impossible de charger le fichier '${this.rep}/${nom}${this.extension}'\\n${e}`);\r\n                    });\r\n                }\r\n\r\n                stateEvent(100, endMessage);\r\n\r\n                resolve();\r\n            }\r\n        })\r\n    }\r\n\r\n    get(nom){\r\n        const f = this.fichiers[nom];\r\n        if (!f) return this.fichiers[this.default];\r\n        return f;\r\n    }\r\n\r\n    getAll(){\r\n        return this.fichiers;\r\n    }\r\n}*/\r\n\r\n\r\nconst loadMedia =  async (bank, name) => {\r\n    return new Promise((resolve, reject) => {\r\n        const elem = document.createElement(bank.mediaType);\r\n        if(bank.mediaType == Bank.IMAGE) elem.onload = () => {resolve(elem);};\r\n        else elem.onloadedmetadata = () => {resolve(elem);};\r\n        elem.onerror = () => { reject(); }\r\n        elem.src = `${bank.dir}/${name}${bank.extension}`;\r\n    });\r\n}\r\n\r\nconst loadFile = async (bank, name) => {\r\n    return fetch(`${bank.dir}/${name}${bank.extension}`)\r\n    .then(data => {\r\n        if(data.ok) return data[bank.mediaType]();\r\n        else return Promise.reject();\r\n    });\r\n}\r\n\r\n\r\nclass Bank {\r\n    constructor(directory, fileNames, options = {extension: null, mediaType: null, treatment: null, default: null}){\r\n        this.setDirectory(directory);\r\n        this.setFileList(fileNames);\r\n        this.setOptions(options);\r\n    }\r\n\r\n    setDirectory(dir = './'){\r\n        this.dir = dir;\r\n        return this;\r\n    }\r\n\r\n    setFileList(fileNames = []){\r\n        this.names = fileNames.map(str => str.trim());\r\n        return this;\r\n    }\r\n\r\n    setOptions(options = {extension: null, mediaType: null, treatment: null, default: null}){\r\n        this.extension = options.extension ? `.${options.extension}` : \"\";\r\n        this.mediaType = options.mediaType || Bank.TEXT;\r\n        this.treatment = options.treatment || null;\r\n        this.default = options.default || undefined;\r\n        return this;\r\n    }\r\n\r\n    initForLoad(){\r\n        if(this.mediaType === 'image') this.mediaType = Bank.IMAGE;\r\n\r\n        if(this.mediaType === Bank.IMAGE || this.mediaType === Bank.VIDEO || this.mediaType === Bank.AUDIO) this.requeteMode = 'media';\r\n        else this.requeteMode = 'file';\r\n\r\n        this.files = new Map();\r\n        if(typeof this.treatment !== 'function') this.treatment = null;\r\n    }\r\n\r\n    async load(stateEvent) {\r\n      this.initForLoad();\r\n      if(typeof stateEvent !== 'function') stateEvent = () => {};\r\n\r\n      return new Promise((resolve, reject) => {\r\n        if(this.noms.length == 0) {\r\n          resolve();\r\n          return;\r\n        }\r\n\r\n        const loadFunc = this.requeteMode === 'media' ? loadMedia : loadFile;\r\n\r\n        this.count = 0;\r\n\r\n        for(const name of this.names) {\r\n            loadFunc(this, name).then(async file => {\r\n                if(this.treatment) {this.files.set(nom, await this.treatment(file, name));}\r\n                else this.files.set(nom, file);\r\n\r\n                ++this.count;\r\n\r\n                stateEvent(Math.floor((this.noms.length - nbTotalFichier) / this.noms.length * 100), nom);\r\n                \r\n                if(this.count == this.names.length) {\r\n                    resolve();\r\n                }\r\n            }).catch(e => {\r\n                console.warn(`Impossible de charger le fichier '${this.rep}/${nom}${this.extension}'\\n${e}`);\r\n                reject();\r\n            });\r\n        }\r\n      });\r\n    }\r\n\r\n    get(name){\r\n        const f = this.files.get(name);\r\n        if(!f) return this.files.get(this.default);\r\n        return f;\r\n    }\r\n\r\n    getAll(){\r\n        return this.files;\r\n    }\r\n}\r\n\r\nBank.IMAGE = 'img';\r\nBank.VIDEO = 'video';\r\nBank.AUDIO = 'audio';\r\nBank.ARRAY_BUFFER = 'arrayBuffer';\r\nBank.BLOB = 'blob';\r\nBank.FORM_DATA = 'formData';\r\nBank.JSON = 'json';\r\nBank.TEXT = 'text';\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/utils/Bank.js?");

/***/ }),

/***/ "../../../Akila/utils/Camera.js":
/*!***************************************!*\
  !*** D:/GitHub/Akila/utils/Camera.js ***!
  \***************************************/
/*! exports provided: Camera, FirstPersonCamera, TrackBallCamera */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Camera\", function() { return Camera; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FirstPersonCamera\", function() { return FirstPersonCamera; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TrackBallCamera\", function() { return TrackBallCamera; });\n/* harmony import */ var _webgl_Display__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../webgl/Display */ \"../../../Akila/webgl/Display.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math */ \"../../../Akila/math/index.js\");\n/* harmony import */ var _inputs_Keyboard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../inputs/Keyboard */ \"../../../Akila/inputs/Keyboard.js\");\n/* harmony import */ var _inputs_Mouse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../inputs/Mouse */ \"../../../Akila/inputs/Mouse.js\");\n/* harmony import */ var _inputs_Gamepad__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../inputs/Gamepad */ \"../../../Akila/inputs/Gamepad.js\");\n/* harmony import */ var _inputs_Gesture__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../inputs/Gesture */ \"../../../Akila/inputs/Gesture.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Camera {\r\n    constructor(width, height, option = {fovy: 1.0472, aspect: width / height, near: 0.1, far: 100.0}) {\r\n        if(typeof width === 'object') option = width;\r\n\r\n        option.fovy = typeof option.fovy === 'number' ? option.fovy : 1.0472;\r\n        option.aspect = typeof option.aspect === 'number' ? option.aspect : width / height;\r\n        option.near = typeof option.near === 'number' ? option.near : 1.0472;\r\n        option.far = typeof option.far === 'number' ? option.far : 1.0472;\r\n\r\n        this.position = new Float32Array([0, 0, 0]);\r\n        this.up = new Float32Array([0, 1, 0]);\r\n        this.forward = new Float32Array([0, 0, 1]);\r\n\r\n        this.camera = _math__WEBPACK_IMPORTED_MODULE_1__[\"mat4\"].create();\r\n        this.projection = _math__WEBPACK_IMPORTED_MODULE_1__[\"mat4\"].perspective(_math__WEBPACK_IMPORTED_MODULE_1__[\"mat4\"].create(), option.fovy, option.aspect, option.near, option.far);\r\n    \r\n        this.buffer = _math__WEBPACK_IMPORTED_MODULE_1__[\"mat4\"].create();\r\n    }\r\n\r\n    getPosition() {\r\n        return this.position;\r\n    }\r\n\r\n    getUp() {\r\n        return this.up;\r\n    }\r\n\r\n    getForward() {\r\n        return this.forward;\r\n    }\r\n\r\n    update() {\r\n        _math__WEBPACK_IMPORTED_MODULE_1__[\"mat4\"].lookAt(this.camera, this.position, this.forward, this.up);\r\n    }\r\n\r\n    getProjectionMatrix() {\r\n        return this.projection;\r\n    }\r\n\r\n    getCameraMatrix() {\r\n        return this.camera;\r\n    }\r\n\r\n    getVPMatrix() {\r\n        return _math__WEBPACK_IMPORTED_MODULE_1__[\"mat4\"].multiply(this.buffer, this.projection, this.camera);\r\n    }\r\n}\r\n\r\nCamera.DEMIPI = Math.PI / 2.0;\r\n\r\n\r\nclass FirstPersonCamera extends Camera {\r\n    constructor(width, height, option) {\r\n        super(width, height, option);\r\n\r\n        this.mouse = new _inputs_Mouse__WEBPACK_IMPORTED_MODULE_3__[\"Mouse\"]();\r\n        this.keyboard = new _inputs_Keyboard__WEBPACK_IMPORTED_MODULE_2__[\"Keyboard\"]();\r\n        this.gamepad = new _inputs_Gamepad__WEBPACK_IMPORTED_MODULE_4__[\"Gamepad\"]();\r\n\r\n        this.angle = new Float32Array([0, Camera.DEMIPI, 0]);\r\n\r\n        this.speed = 0.4\r\n        this.mouseSensibility = 0.004;\r\n        this.gamepadSensibility = 0.06;\r\n\r\n        //const canvas = document.getElementById('webgl-canvas');\r\n        const canvas = _webgl_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.canvas;\r\n        canvas.addEventListener('click', () => {\r\n            if(!document.pointerLockElement) canvas.requestPointerLock();\r\n        });\r\n    }\r\n\r\n    setPosition(position) {\r\n        this.position[0] = position[0];\r\n        this.position[1] = position[1];\r\n        this.position[2] = position[2];\r\n\r\n        return this;\r\n    }\r\n\r\n    setAngle(angle) {\r\n        this.angle[0] = angle[0];\r\n        this.angle[1] = angle[1];\r\n        this.angle[2] = angle[2];\r\n\r\n        return this;\r\n    }\r\n\r\n    setMouseSensibility(val) {\r\n        this.mouseSensibility = val;\r\n        return this;\r\n    }\r\n\r\n    setGamepadSensibility(val) {\r\n        this.gamepadSensibility = val;\r\n        return this;\r\n    }\r\n\r\n    getAngle() {\r\n        return this.angle;\r\n    }\r\n\r\n    update() {\r\n        if (!!document.pointerLockElement){\r\n            this.movX = -this.mouse.velX() * this.mouseSensibility;\r\n            this.movY = this.mouse.velY() * this.mouseSensibility;\r\n        } else {\r\n            /*this.movX = 0;\r\n            this.movY = 0;*/\r\n            this.movX = -this.gamepad.getStickBX() * this.gamepadSensibility;\r\n            this.movY = this.gamepad.getStickBY() * this.gamepadSensibility;\r\n        }\r\n        \r\n\r\n        let angle = Math.atan2(this.movX, this.movY);\r\n        let dist = Math.sqrt(Math.pow(this.movX, 2) + Math.pow(this.movY, 2));\r\n    \r\n        this.angle[0] -= Math.cos(angle) * dist;\r\n        this.angle[1] -= Math.sin(angle) * dist;\r\n\r\n        if (this.angle[0] > Camera.DEMIPI) this.angle[0] = Camera.DEMIPI;\r\n        else if (this.angle[0] < -Camera.DEMIPI) this.angle[0] = -Camera.DEMIPI;\r\n\r\n\r\n        const cax = Math.cos(this.angle[0]);\r\n        const cay = Math.cos(this.angle[1]);\r\n        const say = Math.sin(this.angle[1]);\r\n\r\n        this.forward[0] = cay * cax;\r\n        this.forward[1] = Math.sin(this.angle[0]);\r\n        this.forward[2] = say * cax;\r\n\r\n\r\n        const angle2 = this.angle[0] + Camera.DEMIPI;\r\n        const cangle2 = Math.cos(angle2);\r\n        this.up[0] = cay * cangle2;\r\n        this.up[1] = Math.sin(angle2);\r\n        this.up[2] = say * cangle2;\r\n\r\n\r\n\r\n        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n        if(this.keyboard.isPressed(_inputs_Keyboard__WEBPACK_IMPORTED_MODULE_2__[\"Keyboard\"].KEY_Z)) {\r\n            this.position[0] += this.forward[0] * this.speed;\r\n            this.position[1] += this.forward[1] * this.speed;\r\n            this.position[2] += this.forward[2] * this.speed;\r\n        } else {\r\n            let upDir = 0;\r\n\r\n            if(this.gamepad.getStickAY() > 0) upDir = 1;\r\n            else if(this.gamepad.getStickAY() < 0) upDir = -1;\r\n\r\n            this.position[0] -= this.forward[0] * this.speed * this.gamepad.getStickAY();\r\n            this.position[1] -= this.forward[1] * this.speed * upDir;\r\n            this.position[2] -= this.forward[2] * this.speed * this.gamepad.getStickAY();\r\n        }\r\n\r\n        if(this.keyboard.isPressed(_inputs_Keyboard__WEBPACK_IMPORTED_MODULE_2__[\"Keyboard\"].KEY_S)) {\r\n            this.position[0] -= this.forward[0] * this.speed;\r\n            this.position[1] -= this.forward[1] * this.speed;\r\n            this.position[2] -= this.forward[2] * this.speed;\r\n        }\r\n\r\n        if(this.keyboard.isPressed(_inputs_Keyboard__WEBPACK_IMPORTED_MODULE_2__[\"Keyboard\"].KEY_Q)) {\r\n            this.position[2] -= this.forward[0] * this.speed;\r\n            //this.position[1] += this.forward[1] * this.speed;\r\n            this.position[0] += this.forward[2] * this.speed;\r\n        } else {\r\n            this.position[2] += this.forward[0] * this.speed * this.gamepad.getStickAX();\r\n            //this.position[1] += this.forward[1] * this.speed;\r\n            this.position[0] -= this.forward[2] * this.speed * this.gamepad.getStickAX();\r\n        }\r\n\r\n\r\n        if(this.keyboard.isPressed(_inputs_Keyboard__WEBPACK_IMPORTED_MODULE_2__[\"Keyboard\"].KEY_D)) {\r\n            this.position[2] += this.forward[0] * this.speed;\r\n            //this.position[1] += this.forward[1] * this.speed;\r\n            this.position[0] -= this.forward[2] * this.speed;\r\n        }\r\n\r\n\r\n\r\n        if(this.keyboard.isPressed(_inputs_Keyboard__WEBPACK_IMPORTED_MODULE_2__[\"Keyboard\"].SPACE)) this.position[1] += this.speed;\r\n        else this.position[1] += this.speed * this.gamepad.getButton(_inputs_Gamepad__WEBPACK_IMPORTED_MODULE_4__[\"Gamepad\"].RIGHT_TRIGGER);\r\n        if(this.keyboard.isPressed(_inputs_Keyboard__WEBPACK_IMPORTED_MODULE_2__[\"Keyboard\"].CTRL)) this.position[1] -= this.speed;\r\n        else this.position[1] -= this.speed * this.gamepad.getButton(_inputs_Gamepad__WEBPACK_IMPORTED_MODULE_4__[\"Gamepad\"].LEFT_TRIGGER);\r\n        \r\n\r\n        ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        \r\n        const fBuffer = new Float32Array(3);\r\n\r\n        fBuffer[0] = this.forward[0] + this.position[0];\r\n        fBuffer[1] = this.forward[1] + this.position[1];\r\n        fBuffer[2] = this.forward[2] + this.position[2];\r\n\r\n        _math__WEBPACK_IMPORTED_MODULE_1__[\"mat4\"].lookAt(this.camera, this.position, fBuffer, this.up);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nclass TrackBallCamera extends Camera {\r\n    constructor(width, height, option) {\r\n        super(width, height, option);\r\n\r\n\r\n\r\n        this.gesture = new _inputs_Gesture__WEBPACK_IMPORTED_MODULE_5__[\"Gesture\"]();\r\n\r\n        this.gamepad = new _inputs_Gamepad__WEBPACK_IMPORTED_MODULE_4__[\"Gamepad\"]();\r\n\r\n\r\n        this.mouse = new _inputs_Mouse__WEBPACK_IMPORTED_MODULE_3__[\"Mouse\"]();\r\n\r\n        this.angle = new Float32Array([0, Camera.DEMIPI, 0]);\r\n        this.center = new Float32Array([0, 0, 0]);\r\n\r\n        this.mouseSensibility = 0.004;\r\n        this.scrollSpeed = 1.2;\r\n        this.distance = 1;\r\n    }\r\n\r\n    setMouseSensibility(val) {\r\n        this.mouseSensibility = val;\r\n        return this;\r\n    }\r\n\r\n    setAngle(angle) {\r\n        this.angle[0] = angle[0];\r\n        this.angle[1] = angle[1];\r\n        this.angle[2] = angle[2];\r\n\r\n        return this;\r\n    }\r\n\r\n    getAngle() {\r\n        return this.angle;\r\n    }\r\n\r\n    setCenter(center) {\r\n        this.center[0] = center[0];\r\n        this.center[1] = center[1];\r\n        this.center[2] = center[2];\r\n\r\n        return this;\r\n    }\r\n\r\n    getCenter() {\r\n        return this.center;\r\n    }\r\n\r\n    setDistance(distance) {\r\n        this.distance = distance;\r\n\r\n        return this;\r\n    }\r\n\r\n    getDistance() {\r\n        return this.distance;\r\n    }\r\n\r\n    update() {\r\n        let movX = 0;\r\n        let movY = 0;\r\n\r\n        if(this.mouse.isPressed(_inputs_Mouse__WEBPACK_IMPORTED_MODULE_3__[\"Mouse\"].LEFT_BUTTON)) {\r\n            movX = -this.mouse.velX() * this.mouseSensibility;\r\n            movY = -this.mouse.velY() * this.mouseSensibility;\r\n        } else if(this.gamepad.isConnect(_inputs_Gamepad__WEBPACK_IMPORTED_MODULE_4__[\"Gamepad\"].PLAYER1)){\r\n            movX = this.gamepad.getStickBX() * 0.08;\r\n            movY = this.gamepad.getStickBY() * 0.08;\r\n        } else {\r\n            movX = -this.gesture.swipX() * this.mouseSensibility;\r\n            movY = -this.gesture.swipY() * this.mouseSensibility;\r\n        }\r\n\r\n        this.distance += this.mouse.scrollVelY() * this.scrollSpeed;\r\n        this.distance += (this.gamepad.getButton(_inputs_Gamepad__WEBPACK_IMPORTED_MODULE_4__[\"Gamepad\"].LEFT_TRIGGER) - this.gamepad.getButton(_inputs_Gamepad__WEBPACK_IMPORTED_MODULE_4__[\"Gamepad\"].RIGHT_TRIGGER)) * this.scrollSpeed;\r\n        this.distance = Math.max(this.distance, 0.0001);\r\n        \r\n        let angle = Math.atan2(movX, movY);\r\n        let dist = Math.sqrt(Math.pow(movX, 2) + Math.pow(movY, 2));\r\n    \r\n        this.angle[0] -= Math.cos(angle) * dist;\r\n        this.angle[1] -= Math.sin(angle) * dist;\r\n\r\n\r\n        const cax = Math.cos(this.angle[0]);\r\n        const cay = Math.cos(this.angle[1]);\r\n        const say = Math.sin(this.angle[1]);\r\n\r\n        this.position[0] = (cay * cax              ) * this.distance + this.center[0];\r\n        this.position[1] = (Math.sin(this.angle[0])) * this.distance + this.center[1];\r\n        this.position[2] = (say * cax              ) * this.distance + this.center[2];\r\n\r\n\r\n        const angle2 = this.angle[0] + Camera.DEMIPI;\r\n        const cangle2 = Math.cos(angle2);\r\n        this.up[0] = cay * cangle2;\r\n        this.up[1] = Math.sin(angle2);\r\n        this.up[2] = say * cangle2;\r\n\r\n \r\n        _math__WEBPACK_IMPORTED_MODULE_1__[\"mat4\"].lookAt(this.camera, this.position, this.center, this.up);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/utils/Camera.js?");

/***/ }),

/***/ "../../../Akila/utils/Color.js":
/*!**************************************!*\
  !*** D:/GitHub/Akila/utils/Color.js ***!
  \**************************************/
/*! exports provided: Color */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Color\", function() { return Color; });\nclass Color {\r\n    static RGB2HSL(color, buffer = new Float32Array(3)) {\r\n        const r = Math.min(1, Math.max(0, color[0]));\r\n        const g = Math.min(1, Math.max(0, color[1]));\r\n        const b = Math.min(1, Math.max(0, color[2]));\r\n\r\n        const cMax = Math.max(r, g, b);\r\n        const cMin = Math.min(r, g, b);\r\n        const delta = cMax - cMin;\r\n\r\n        let h;\r\n\r\n        if(delta == 0) h = 0;\r\n        else if(cMax == r) h = 60 * ((g - b) / delta % 6);\r\n        else if(cMax == g) h = 60 * ((b - r) / delta + 2);\r\n        else h = 60 * ((r - g) / delta + 4);\r\n\r\n        const l = (cMax + cMin) / 2;\r\n\r\n        let s;\r\n\r\n        if(delta == 0) s = 0;\r\n        else s = delta / (1 - Math.abs(2 * l - 1));\r\n\r\n        buffer[0] = h;\r\n        buffer[1] = s;\r\n        buffer[2] = l;\r\n\r\n        return buffer;\r\n    }\r\n\r\n    static HSL2RGB(color, buffer = new Float32Array(3)) {\r\n        const h = Math.abs(color[0]) % 360;\r\n        const s = Math.min(1, Math.max(0, color[1]));\r\n        const l = Math.min(1, Math.max(0, color[2]));\r\n\r\n        const c = (1 - Math.abs(2 * l - 1)) * s;\r\n        const x = c * (1 - Math.abs((h / 60) % 2 - 1));\r\n        const m = l - c / 2;\r\n\r\n        const tmp = new Float32Array(3);\r\n\r\n        if(h < 60) {\r\n            tmp[0] = c;\r\n            tmp[1] = x;\r\n            tmp[2] = 0;\r\n        } else if(60 <= h && h < 120) {\r\n            tmp[0] = x;\r\n            tmp[1] = c;\r\n            tmp[2] = 0;\r\n        } else if(120 <= h && h < 180) {\r\n            tmp[0] = 0;\r\n            tmp[1] = c;\r\n            tmp[2] = x;\r\n        } else if(180 <= h && h < 240) {\r\n            tmp[0] = 0;\r\n            tmp[1] = x;\r\n            tmp[2] = c;\r\n        } else if(240 <= h && h < 300) {\r\n            tmp[0] = x;\r\n            tmp[1] = 0;\r\n            tmp[2] = c;\r\n        } else {\r\n            tmp[0] = c;\r\n            tmp[1] = 0;\r\n            tmp[2] = x;\r\n        }\r\n\r\n        buffer[0] = tmp[0] + m;\r\n        buffer[1] = tmp[1] + m;\r\n        buffer[2] = tmp[2] + m;\r\n\r\n        return buffer;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/utils/Color.js?");

/***/ }),

/***/ "../../../Akila/utils/CubeMapTextureBuilder.js":
/*!******************************************************!*\
  !*** D:/GitHub/Akila/utils/CubeMapTextureBuilder.js ***!
  \******************************************************/
/*! exports provided: CubeMapTextureBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CubeMapTextureBuilder\", function() { return CubeMapTextureBuilder; });\n/* harmony import */ var _webgl_Texture__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../webgl/Texture */ \"../../../Akila/webgl/Texture.js\");\n\r\n\r\nconst getClippedRegion = (image, x, y, width, height) => {\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    ctx.drawImage(image, x, y, width, height,  0, 0, width, height);\r\n\r\n    return canvas;\r\n}\r\n\r\nclass CubeMapTextureBuilder {\r\n    static fromSingleImage(img) {\r\n        const datas = new Array();\r\n\r\n        const width = img.width / 4;\r\n        const height = img.height / 3;\r\n        \r\n        datas.push(getClippedRegion(img, 2 * width, 1 * height, width, height)); // right\r\n        datas.push(getClippedRegion(img, 0 * width, 1 * height, width, height)); // left\r\n        datas.push(getClippedRegion(img, 1 * width, 0 * height, width, height)); // top\r\n        datas.push(getClippedRegion(img, 1 * width, 2 * height, width, height)); // base\r\n        datas.push(getClippedRegion(img, 1 * width, 1 * height, width, height)); // front\r\n        datas.push(getClippedRegion(img, 3 * width, 1 * height, width, height)); // back\r\n\r\n        return new _webgl_Texture__WEBPACK_IMPORTED_MODULE_0__[\"CubeMapTexture\"](datas);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/utils/CubeMapTextureBuilder.js?");

/***/ }),

/***/ "../../../Akila/utils/GLSLParser.js":
/*!*******************************************!*\
  !*** D:/GitHub/Akila/utils/GLSLParser.js ***!
  \*******************************************/
/*! exports provided: GLSLParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GLSLParser\", function() { return GLSLParser; });\nclass GLSLParser {\r\n    constructor(params = {version: '', precision: 'precision mediump float;'}) {\r\n        this.params = params;\r\n    }\r\n\r\n    getPrograms(file) {\r\n        const progs = [\r\n            `${this.params.version}\\n${this.params.precision}\\n`,\r\n            `${this.params.version}\\n${this.params.precision}\\n`,\r\n        ];\r\n        const lines = file.split('\\n');\r\n\r\n        let mode = -1;\r\n\r\n        for(const line of lines) {\r\n            if(mode != 0 && line.trim().toUpperCase() == '#VERT_START') {\r\n                mode = 0;\r\n            } else if(mode != 1 && line.trim().toUpperCase() == '#FRAG_START') {\r\n                mode = 1;\r\n            } else {\r\n                progs[mode] += `${line}\\n`;\r\n            }\r\n        }\r\n\r\n        return {\r\n            vertex: progs[0],\r\n            fragment: progs[1]\r\n        };\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/utils/GLSLParser.js?");

/***/ }),

/***/ "../../../Akila/utils/LinkedStructure.js":
/*!************************************************!*\
  !*** D:/GitHub/Akila/utils/LinkedStructure.js ***!
  \************************************************/
/*! exports provided: LinkedList, LinkedStructure */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinkedList\", function() { return LinkedList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinkedStructure\", function() { return LinkedStructure; });\nclass LinkedList {\r\n    constructor(){\r\n        this.head = null;\r\n        this.tail = null;\r\n        this.count = 0;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.count === 0;\r\n    }\r\n\r\n    get lenght() {\r\n        return this.count;\r\n    }\r\n\r\n    addFirst(data){\r\n        const node = {\r\n            data: data,\r\n            next: null\r\n        }\r\n\r\n        const tmpNode = this.head;\r\n        this.head = node;\r\n        this.head.next = tmpNode;\r\n        ++this.count;\r\n\r\n        if(this.count === 1) this.tail = this.head;\r\n    }\r\n\r\n    addLast(data){\r\n        const node = {\r\n            data: data,\r\n            next: null\r\n        }\r\n\r\n        if(this.count === 0) this.head = node;\r\n        else this.tail.next = node;\r\n\r\n        this.tail = node;\r\n        ++this.count;\r\n    }\r\n\r\n    deleteFisrt(){\r\n        if(this.count === 0) return;\r\n\r\n        this.head = this.head.next;\r\n        --this.count;\r\n\r\n        if(this.count === 0) this.tail = null;\r\n    }\r\n\r\n    deleteLast(){\r\n        if(this.count === 0) {\r\n            return;\r\n        } else if(this.count === 1) {\r\n            this.tail = null;\r\n            this.head = null;\r\n        } else {\r\n            let p = this.head;\r\n            while(p.next !== this.tail) {\r\n                p = p.next;\r\n            }\r\n            \r\n            p.next = null;\r\n            this.tail = p;\r\n        }\r\n\r\n        --this.count;\r\n    }\r\n\r\n    deleteFromIndex(position) {\r\n        if(position <= 0) this.deleteFisrt();\r\n        else if(position >= this.count - 1) this.deleteLast();\r\n        else {\r\n            let p = this.head, k = 0, q;\r\n            while(p !== null && k < position) {\r\n                ++k;\r\n                q = p;\r\n                p = p.next;\r\n            }\r\n\r\n            q.next = p.next;\r\n            --this.count;\r\n        }\r\n    }\r\n\r\n    delete(obj) {\r\n        let p = this.head, q;\r\n        if(p.data == obj) {\r\n            this.deleteFisrt();\r\n        } else {\r\n            while(p !== null && obj != p.data) {\r\n                q = p;\r\n                p = p.next;\r\n            }\r\n    \r\n            q.next = p.next;\r\n            --this.count;\r\n        }\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        const buffer = {\r\n            value: null,\r\n            done: false\r\n        }\r\n\r\n        let currentNode = this.head;\r\n\r\n        return {\r\n            next() {\r\n                if(currentNode) {\r\n                    buffer.value = currentNode.data;\r\n                    currentNode = currentNode.next;\r\n                } else {\r\n                    buffer.done = true;\r\n                }\r\n\r\n                return buffer;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass LinkedStructure {\r\n    constructor() {\r\n        this.linkedLists = new Object();\r\n        this.removeBuffers = new Object();\r\n\r\n        this.names = new Array();\r\n    }\r\n\r\n    getNames() {\r\n        return this.names;\r\n    }\r\n\r\n    createList(name) {\r\n        const list = new LinkedList();\r\n        this.addList(name, list);\r\n        return list;\r\n    }\r\n\r\n    addList(name, list) {\r\n        if(!(list instanceof LinkedList)) return;\r\n        this.linkedLists[name] = list;\r\n        this.removeBuffers[name] = new LinkedList();\r\n        this.names.push(name);\r\n    }\r\n\r\n    getList(name) {\r\n        return this.linkedLists[name];\r\n    }\r\n\r\n    add(name, obj) {\r\n        this.linkedLists[name].addLast(obj);\r\n    }\r\n\r\n    delete(name, obj) {\r\n        this.removeBuffers[name].addLast(obj);\r\n    }\r\n\r\n    clear() {\r\n        for (const name of this.names) {\r\n            const list = this.linkedLists[name];\r\n            const buffer = this.removeBuffers[name];\r\n\r\n            for (const obj of buffer) {\r\n                list.delete(obj);\r\n                buffer.deleteFisrt();\r\n            }\r\n        }\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        const buffer = {\r\n            value: null,\r\n            done: false\r\n        }\r\n\r\n        const names = this.names;\r\n        let nameIndex = 0;\r\n        const linkedLists = this.linkedLists;\r\n\r\n        let currentList = this.linkedLists[names[nameIndex]];\r\n\r\n        if(!currentList || !currentList.head) return {\r\n            next() {\r\n                return {done: true};\r\n            }\r\n        }\r\n\r\n        let currentNode = currentList.head;\r\n\r\n        return {\r\n            next() {\r\n                if(currentNode) {\r\n                    buffer.value = currentNode.data;\r\n                    currentNode = currentNode.next;\r\n                } else {\r\n                    currentList = linkedLists[names[++nameIndex]];\r\n\r\n                    if(!currentList || !currentList.head) buffer.done = true;\r\n                    else {\r\n                        currentNode = currentList.head.next;\r\n                        buffer.value = currentList.head.data;\r\n                    }\r\n                }\r\n\r\n                return buffer;\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/utils/LinkedStructure.js?");

/***/ }),

/***/ "../../../Akila/utils/Parser.js":
/*!***************************************!*\
  !*** D:/GitHub/Akila/utils/Parser.js ***!
  \***************************************/
/*! exports provided: Parser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Parser\", function() { return Parser; });\nclass Parser {\r\n    static objIndex(textFile) {\r\n        const lines = textFile.split('\\n').map(l => l.split(/(\\s+)/).filter(s => s.trim().length > 0));\r\n\r\n        const verts = new Array();\r\n        const vertNorms = new Array();\r\n        const vertTexs = new Array();\r\n        const faces = new Array();\r\n        const indices = new Array();\r\n\r\n        for (let line of lines) {\r\n            switch (line[0]) {\r\n                case \"v\":\r\n                    verts.push({\r\n                        x: parseFloat(line[1]),\r\n                        y: parseFloat(line[2]),\r\n                        z: parseFloat(line[3])\r\n                    });\r\n                    break;\r\n\r\n                case \"vn\":\r\n                    vertNorms.push({\r\n                        x: parseFloat(line[1]),\r\n                        y: parseFloat(line[2]),\r\n                        z: parseFloat(line[3])\r\n                    });\r\n                    break;\r\n\r\n                case \"vt\":\r\n                    vertTexs.push({\r\n                        u: parseFloat(line[1]),\r\n                        v: parseFloat(line[2])\r\n                    });\r\n                    break;\r\n\r\n                case \"f\":\r\n                    const p1 = line[1].split('/');\r\n                    const p2 = line[2].split('/');\r\n                    const p3 = line[3].split('/');\r\n\r\n                    faces.push({\r\n                        vert1: parseInt(p1[0]) - 1,\r\n                        vert2: parseInt(p2[0]) - 1,\r\n                        vert3: parseInt(p3[0]) - 1,\r\n\r\n                        tex1: parseInt(p1[1]) - 1,\r\n                        tex2: parseInt(p2[1]) - 1,\r\n                        tex3: parseInt(p3[1]) - 1,\r\n\r\n                        norm1: parseInt(p1[2]) - 1,\r\n                        norm2: parseInt(p2[2]) - 1,\r\n                        norm3: parseInt(p3[2]) - 1\r\n                    });\r\n\r\n                    indices.push(parseInt(p1[0]) - 1);\r\n                    indices.push(parseInt(p2[0]) - 1);\r\n                    indices.push(parseInt(p3[0]) - 1);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const vertsF = new Array();\r\n        const vertNormsF = new Array();\r\n        const vertTexsF = new Array();\r\n\r\n        for (const f of faces) {\r\n            const index13 = f.vert1 * 3;\r\n            const index12 = f.vert1 * 2;\r\n\r\n            const index23 = f.vert2 * 3;\r\n            const index22 = f.vert2 * 2;\r\n\r\n            const index33 = f.vert3 * 3;\r\n            const index32 = f.vert3 * 2;\r\n\r\n            vertsF[index13] = verts[f.vert1].x\r\n            vertsF[index13 + 1] = verts[f.vert1].y\r\n            vertsF[index13 + 2] = verts[f.vert1].z\r\n\r\n            vertsF[index23] = verts[f.vert2].x\r\n            vertsF[index23 + 1] = verts[f.vert2].y\r\n            vertsF[index23 + 2] = verts[f.vert2].z\r\n\r\n            vertsF[index33] = verts[f.vert3].x\r\n            vertsF[index33 + 1] = verts[f.vert3].y\r\n            vertsF[index33 + 2] = verts[f.vert3].z\r\n\r\n            if (vertTexs.length > 0) {\r\n                vertTexsF[index12] = vertTexs[f.tex1].u;\r\n                vertTexsF[index12 + 1] = vertTexs[f.tex1].v;\r\n\r\n                vertTexsF[index22] = vertTexs[f.tex2].u;\r\n                vertTexsF[index22 + 1] = vertTexs[f.tex2].v;\r\n\r\n                vertTexsF[index32] = vertTexs[f.tex3].u;\r\n                vertTexsF[index32 + 1] = vertTexs[f.tex3].v;\r\n            }\r\n\r\n            if (vertNorms.length > 0) {\r\n                vertNormsF[index13] = vertNorms[f.norm1].x\r\n                vertNormsF[index13 + 1] = vertNorms[f.norm1].y\r\n                vertNormsF[index13 + 2] = vertNorms[f.norm1].z\r\n\r\n                vertNormsF[index23] = vertNorms[f.norm2].x\r\n                vertNormsF[index23 + 1] = vertNorms[f.norm2].y\r\n                vertNormsF[index23 + 2] = vertNorms[f.norm2].z\r\n\r\n                vertNormsF[index33] = vertNorms[f.norm3].x\r\n                vertNormsF[index33 + 1] = vertNorms[f.norm3].y\r\n                vertNormsF[index33 + 2] = vertNorms[f.norm3].z\r\n            }\r\n        }\r\n\r\n        return {\r\n            vertex: new Float32Array(vertsF),\r\n            normal: new Float32Array(vertNormsF),\r\n            uv: new Float32Array(vertTexsF),\r\n            index: new Uint16Array(indices)\r\n        };\r\n    }\r\n\r\n    static obj(file, params = { scale: 1, vertex: true, normal: true, uv: true, calculateNormal: false }) {\r\n        if (typeof params != \"object\") params = {};\r\n        params.scale = params.scale == undefined ? 1 : params.scale;\r\n        params.vertex = params.vertex == undefined ? true : params.vertex;\r\n        params.normal = params.normal == undefined ? true : params.normal;\r\n        params.uv = params.uv == undefined ? true : params.uv;\r\n        params.calculateNormal = params.calculateNormal == undefined ? false : params.calculateNormal;\r\n\r\n        const lines = file.split('\\n').map(l => l.split(/(\\s+)/).filter(s => s.trim().length > 0));\r\n\r\n        const scale = params.scale;\r\n\r\n        let maxX = -Infinity;\r\n        let maxY = -Infinity;\r\n        let maxZ = -Infinity;\r\n\r\n        let minX = Infinity;\r\n        let minY = Infinity;\r\n        let minZ = Infinity;\r\n\r\n\r\n        ////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n        const sub = (a, b) => {\r\n            return {\r\n                x: b.x - a.x,\r\n                y: b.y - a.y,\r\n                z: b.z - a.z\r\n            }\r\n        }\r\n\r\n        const cross = (u, v) => {\r\n            return {\r\n                x: u.y * v.z - u.z * v.y,\r\n                y: u.z * v.x - u.x * v.z,\r\n                z: u.x * v.y - u.y * v.x\r\n            }\r\n        }\r\n\r\n        const norm = (v) => {\r\n            return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\r\n        }\r\n\r\n        const normalize = (v) => {\r\n            let n = norm(v)\r\n            return {\r\n                x: v.x / n,\r\n                y: v.y / n,\r\n                z: v.z / n\r\n            }\r\n        }\r\n\r\n\r\n        ////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n        const verts = new Array();\r\n        const vertNorms = new Array();\r\n        const vertTexs = new Array();\r\n        const faces = new Array();\r\n\r\n        for (let line of lines) {\r\n            switch (line[0]) {\r\n                case \"v\":\r\n                    verts.push({\r\n                        x: parseFloat(line[1]),\r\n                        y: parseFloat(line[2]),\r\n                        z: parseFloat(line[3])\r\n                    });\r\n                    break;\r\n\r\n                case \"vn\":\r\n                    vertNorms.push({\r\n                        x: parseFloat(line[1]),\r\n                        y: parseFloat(line[2]),\r\n                        z: parseFloat(line[3])\r\n                    });\r\n                    break;\r\n\r\n                case \"vt\":\r\n                    vertTexs.push({\r\n                        u: parseFloat(line[1]),\r\n                        v: parseFloat(line[2])\r\n                    });\r\n                    break;\r\n\r\n                case \"f\":\r\n                    const p1 = line[1].split('/');\r\n                    const p2 = line[2].split('/');\r\n                    const p3 = line[3].split('/');\r\n\r\n                    faces.push({\r\n                        vert1: parseInt(p1[0]) - 1,\r\n                        vert2: parseInt(p2[0]) - 1,\r\n                        vert3: parseInt(p3[0]) - 1,\r\n\r\n                        tex1: parseInt(p1[1]) - 1,\r\n                        tex2: parseInt(p2[1]) - 1,\r\n                        tex3: parseInt(p3[1]) - 1,\r\n\r\n                        norm1: parseInt(p1[2]) - 1,\r\n                        norm2: parseInt(p2[2]) - 1,\r\n                        norm3: parseInt(p3[2]) - 1\r\n                    });\r\n                    break;\r\n            }\r\n        }\r\n\r\n        let facesListe = new Array();\r\n\r\n        for (let f of faces) {\r\n            const face = {\r\n                vert1: verts[f.vert1],\r\n                vert2: verts[f.vert2],\r\n                vert3: verts[f.vert3],\r\n\r\n                tex1: vertTexs[f.tex1],\r\n                tex2: vertTexs[f.tex2],\r\n                tex3: vertTexs[f.tex3],\r\n\r\n                norm1: vertNorms[f.norm1],\r\n                norm2: vertNorms[f.norm2],\r\n                norm3: vertNorms[f.norm3],\r\n            }\r\n\r\n            if (params.calculateNormal) {\r\n                let n = normalize(cross(sub(face.vert1, face.vert2), sub(face.vert1, face.vert3)));\r\n\r\n                face.norm1 = n;\r\n                face.norm2 = n;\r\n                face.norm3 = n;\r\n            }\r\n\r\n            facesListe.push(face);\r\n        }\r\n\r\n        const vertsF = new Array();\r\n        const vertNormsF = new Array();\r\n        const vertTexsF = new Array();\r\n\r\n        for (let f of facesListe) {\r\n            const x1 = f.vert1.x * scale;\r\n            const y1 = f.vert1.y * scale;\r\n            const z1 = f.vert1.z * scale;\r\n\r\n            const x2 = f.vert2.x * scale;\r\n            const y2 = f.vert2.y * scale;\r\n            const z2 = f.vert2.z * scale;\r\n\r\n            const x3 = f.vert3.x * scale;\r\n            const y3 = f.vert3.y * scale;\r\n            const z3 = f.vert3.z * scale;\r\n\r\n            vertsF.push(x1);\r\n            vertsF.push(y1);\r\n            vertsF.push(z1);\r\n\r\n            vertsF.push(x2);\r\n            vertsF.push(y2);\r\n            vertsF.push(z2);\r\n\r\n            vertsF.push(x3);\r\n            vertsF.push(y3);\r\n            vertsF.push(z3);\r\n\r\n            if (x1 > maxX) maxX = x1;\r\n            if (y1 > maxY) maxY = y1;\r\n            if (z1 > maxZ) maxZ = z1;\r\n\r\n            if (x2 > maxX) maxX = x2;\r\n            if (y2 > maxY) maxY = y2;\r\n            if (z2 > maxZ) maxZ = z2;\r\n\r\n            if (x3 > maxX) maxX = x3;\r\n            if (y3 > maxY) maxY = y3;\r\n            if (z3 > maxZ) maxZ = z3;\r\n\r\n\r\n            if (x1 < minX) minX = x1;\r\n            if (y1 < minY) minY = y1;\r\n            if (z1 < minZ) minZ = z1;\r\n\r\n            if (x2 < minX) minX = x2;\r\n            if (y2 < minY) minY = y2;\r\n            if (z2 < minZ) minZ = z2;\r\n\r\n            if (x3 < minX) minX = x3;\r\n            if (y3 < minY) minY = y3;\r\n            if (z3 < minZ) minZ = z3;\r\n\r\n\r\n            if (vertTexs.length > 0) {\r\n                vertTexsF.push(f.tex1.u);\r\n                vertTexsF.push(f.tex1.v);\r\n\r\n                vertTexsF.push(f.tex2.u);\r\n                vertTexsF.push(f.tex2.v);\r\n\r\n                vertTexsF.push(f.tex3.u);\r\n                vertTexsF.push(f.tex3.v);\r\n            }\r\n\r\n            if (vertNorms.length > 0 || params.calculateNormal) {\r\n                vertNormsF.push(f.norm1.x);\r\n                vertNormsF.push(f.norm1.y);\r\n                vertNormsF.push(f.norm1.z);\r\n\r\n                vertNormsF.push(f.norm2.x);\r\n                vertNormsF.push(f.norm2.y);\r\n                vertNormsF.push(f.norm2.z);\r\n\r\n                vertNormsF.push(f.norm3.x);\r\n                vertNormsF.push(f.norm3.y);\r\n                vertNormsF.push(f.norm3.z);\r\n            }\r\n        }\r\n\r\n        const object = {}\r\n\r\n        if (params.vertex) {\r\n            object.vertex = new Float32Array(vertsF);\r\n\r\n            object.maxX = maxX;\r\n            object.maxY = maxY;\r\n            object.maxZ = maxZ;\r\n\r\n            object.minX = minX;\r\n            object.minY = minY;\r\n            object.minZ = minZ;\r\n\r\n            object.lengthX = Math.abs(maxX - minX);\r\n            object.lengthY = Math.abs(maxY - minY);\r\n            object.lengthZ = Math.abs(maxZ - minZ);\r\n        }\r\n        if (params.normal) object.normal = new Float32Array(vertNormsF);\r\n        if (params.uv) object.uv = new Float32Array(vertTexsF);\r\n\r\n        return object;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    static ply(file, params = { x: true, y: true, z: true, nx: true, ny: true, nz: true, u: true, v: true, red: true, green: true, blue: true, alpha: false }) {\r\n        params.x = params.x == undefined ? true : params.x;\r\n        params.y = params.y == undefined ? true : params.y;\r\n        params.z = params.z == undefined ? true : params.z;\r\n        params.nx = params.nx == undefined ? true : params.nx;\r\n        params.ny = params.ny == undefined ? true : params.ny;\r\n        params.nz = params.nz == undefined ? true : params.nz;\r\n        params.u = params.u == undefined ? true : params.u;\r\n        params.v = params.v == undefined ? true : params.v;\r\n        params.red = params.red == undefined ? true : params.red;\r\n        params.green = params.green == undefined ? true : params.green;\r\n        params.blue = params.blue == undefined ? true : params.blue;\r\n        params.alpha = params.alpha == undefined ? false : params.alpha;\r\n\r\n        const lines = file.split('\\n').map(l => l.split(/(\\s+)/).filter(s => s.trim().length > 0));\r\n\r\n        const vertex = new Array();\r\n        const normal = new Array();\r\n        const uv = new Array();\r\n        const color = new Array();\r\n        const indices = new Array();\r\n\r\n        let index = 0;\r\n\r\n        if (lines[index][0] == 'ply') ++index;\r\n\r\n        if (lines[index][0] != 'format' && lines[index][1] != 'ascii') {\r\n            console.error('Mauvais format ply');\r\n            return;\r\n        } else {\r\n            ++index;\r\n        }\r\n\r\n        let vertexNumber = 0;\r\n        let faceNumber = 0;\r\n        let propertyMaxIndex = 0;\r\n        let x = -1, y = -1, z = -1, nx = -1, ny = -1, nz = -1, s = -1, t = -1, red = -1, green = -1, blue = -1, alpha = -1;\r\n\r\n        while (lines[index] != 'end_header') {\r\n            const line = lines[++index];\r\n\r\n            if (line.length == 0) continue;\r\n            if (line[0] == 'comment') continue;\r\n\r\n            if (line[0] == 'element') {\r\n                if (line[1] == 'vertex') {\r\n                    vertexNumber = parseInt(line[2]);\r\n                } else if (line[1] == 'face') {\r\n                    faceNumber = parseInt(line[2]);\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            if (line[0] == 'property') {\r\n                if (line[1] == 'float') {\r\n                    if (line[2] == 'x') x = propertyMaxIndex++;\r\n                    if (line[2] == 'y') y = propertyMaxIndex++;\r\n                    if (line[2] == 'z') z = propertyMaxIndex++;\r\n\r\n                    if (line[2] == 'nx') nx = propertyMaxIndex++;\r\n                    if (line[2] == 'ny') ny = propertyMaxIndex++;\r\n                    if (line[2] == 'nz') nz = propertyMaxIndex++;\r\n\r\n                    if (line[2] == 's') s = propertyMaxIndex++;\r\n                    if (line[2] == 't') t = propertyMaxIndex++;\r\n                } else if (line[1] == 'uchar') {\r\n                    if (line[2] == 'red') red = propertyMaxIndex++;\r\n                    if (line[2] == 'green') green = propertyMaxIndex++;\r\n                    if (line[2] == 'blue') blue = propertyMaxIndex++;\r\n                    if (line[2] == 'alpha') alpha = propertyMaxIndex++;\r\n                }\r\n            }\r\n        }\r\n        ++index;\r\n\r\n\r\n        for (const finVertex = index + vertexNumber; index < finVertex; ++index) {\r\n            const line = lines[index];\r\n\r\n            if (x != -1 && params.x) vertex.push(parseFloat(line[x]));\r\n            if (y != -1 && params.y) vertex.push(parseFloat(line[y]));\r\n            if (z != -1 && params.z) vertex.push(parseFloat(line[z]));\r\n\r\n            if (nx != -1 && params.nx) normal.push(parseFloat(line[nx]));\r\n            if (ny != -1 && params.ny) normal.push(parseFloat(line[ny]));\r\n            if (nz != -1 && params.nz) normal.push(parseFloat(line[nz]));\r\n\r\n            if (s != -1 && params.s) uv.push(parseFloat(line[s]));\r\n            if (t != -1 && params.s) uv.push(parseFloat(line[t]));\r\n\r\n            if (red != -1 && params.red) color.push(parseInt(line[red]) / 255);\r\n            if (green != -1 && params.green) color.push(parseInt(line[green]) / 255);\r\n            if (blue != -1 && params.blue) color.push(parseInt(line[blue]) / 255);\r\n            if (alpha != -1 && params.alpha) color.push(parseInt(line[alpha]) / 255);\r\n        }\r\n\r\n        for (const finFace = index + faceNumber; index < finFace; ++index) {\r\n            const line = lines[index];\r\n\r\n            if (line[0] == '3') {\r\n                indices.push(parseInt(line[1]));\r\n                indices.push(parseInt(line[2]));\r\n                indices.push(parseInt(line[3]));\r\n            }\r\n        }\r\n\r\n        return {\r\n            vertex: new Float32Array(vertex),\r\n            normal: new Float32Array(normal),\r\n            uv: new Float32Array(uv),\r\n            color: new Float32Array(color),\r\n            index: new Int16Array(indices)\r\n        };\r\n    }\r\n\r\n    static kbm(arrayBuffer) {\r\n        const buffer = new DataView(arrayBuffer);\r\n        let cursor = 0;\r\n\r\n        const readByte = () => {\r\n            return buffer.getUint8(cursor++);\r\n        }\r\n\r\n        const readInt = () => {\r\n            const val = buffer.getInt32(cursor);\r\n            cursor += 4;\r\n            return val;\r\n        }\r\n\r\n        const readShort = () => {\r\n            const val = buffer.getUint16(cursor);\r\n            cursor += 2;\r\n            return val;\r\n        }\r\n\r\n        const readFloat = () => {\r\n            const val = buffer.getFloat32(cursor);\r\n            cursor += 4;\r\n            return val;\r\n        }\r\n\r\n        const readString = () => {\r\n            let str = '';\r\n\r\n            let c = readByte();\r\n            while (c != 0) {\r\n                str += String.fromCharCode(c);\r\n                c = readByte();\r\n            }\r\n\r\n            return str;\r\n        }\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        const model = new Array();\r\n\r\n        const flagsByte = readByte();\r\n        const flags = {\r\n            vertex       : (flagsByte & 0b10000000) != 0,\r\n            normal       : (flagsByte & 0b01000000) != 0,\r\n            uv           : (flagsByte & 0b00100000) != 0,\r\n            color        : (flagsByte & 0b00010000) != 0,\r\n            jointIDs     : (flagsByte & 0b00001000) != 0,\r\n            jointWeights : (flagsByte & 0b00000100) != 0\r\n        }\r\n\r\n        const recordSize = // mdr\r\n            flags.vertex       * 3 +\r\n            flags.normal       * 3 +\r\n            flags.uv           * 2 +\r\n            flags.color        * 3 +\r\n            flags.jointIDs     * 3 +\r\n            flags.jointWeights * 3 ;\r\n\r\n        let partCount = readInt();\r\n\r\n        while(partCount--) {\r\n            const part = {};\r\n\r\n            const size = readInt();\r\n            let indexCount = readInt();\r\n\r\n            part.name = readString();\r\n\r\n            if(indexCount != 0) {\r\n                part.index = new Uint16Array(indexCount);\r\n                \r\n                for(let i = 0; i < indexCount; ++i) {\r\n                    part.index[i] = readShort();\r\n                }\r\n            }\r\n\r\n            const dataLenght = size * recordSize;\r\n\r\n            part.data = new Float32Array(dataLenght);\r\n\r\n            for(let i = 0; i < dataLenght; ++i) {\r\n                part.data[i] = readFloat();\r\n            }\r\n\r\n            model.push(part);\r\n        }\r\n\r\n        return {flags, model};\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/utils/Parser.js?");

/***/ }),

/***/ "../../../Akila/webgl.js":
/*!********************************!*\
  !*** D:/GitHub/Akila/webgl.js ***!
  \********************************/
/*! exports provided: BufferObject, VBO, AVBO, IBO, Display, FrameBuffer, Shader, Texture, DepthTexture, CubeMapTexture, VAO, IndexedVAO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _webgl_BufferObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webgl/BufferObject */ \"../../../Akila/webgl/BufferObject.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BufferObject\", function() { return _webgl_BufferObject__WEBPACK_IMPORTED_MODULE_0__[\"BufferObject\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"VBO\", function() { return _webgl_BufferObject__WEBPACK_IMPORTED_MODULE_0__[\"VBO\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"AVBO\", function() { return _webgl_BufferObject__WEBPACK_IMPORTED_MODULE_0__[\"AVBO\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"IBO\", function() { return _webgl_BufferObject__WEBPACK_IMPORTED_MODULE_0__[\"IBO\"]; });\n\n/* harmony import */ var _webgl_Display__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webgl/Display */ \"../../../Akila/webgl/Display.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Display\", function() { return _webgl_Display__WEBPACK_IMPORTED_MODULE_1__[\"Display\"]; });\n\n/* harmony import */ var _webgl_FrameBuffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./webgl/FrameBuffer */ \"../../../Akila/webgl/FrameBuffer.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"FrameBuffer\", function() { return _webgl_FrameBuffer__WEBPACK_IMPORTED_MODULE_2__[\"FrameBuffer\"]; });\n\n/* harmony import */ var _webgl_Shader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./webgl/Shader */ \"../../../Akila/webgl/Shader.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Shader\", function() { return _webgl_Shader__WEBPACK_IMPORTED_MODULE_3__[\"Shader\"]; });\n\n/* harmony import */ var _webgl_Texture__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./webgl/Texture */ \"../../../Akila/webgl/Texture.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Texture\", function() { return _webgl_Texture__WEBPACK_IMPORTED_MODULE_4__[\"Texture\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DepthTexture\", function() { return _webgl_Texture__WEBPACK_IMPORTED_MODULE_4__[\"DepthTexture\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CubeMapTexture\", function() { return _webgl_Texture__WEBPACK_IMPORTED_MODULE_4__[\"CubeMapTexture\"]; });\n\n/* harmony import */ var _webgl_VAO__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webgl/VAO */ \"../../../Akila/webgl/VAO.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"VAO\", function() { return _webgl_VAO__WEBPACK_IMPORTED_MODULE_5__[\"VAO\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"IndexedVAO\", function() { return _webgl_VAO__WEBPACK_IMPORTED_MODULE_5__[\"IndexedVAO\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/webgl.js?");

/***/ }),

/***/ "../../../Akila/webgl/BufferObject.js":
/*!*********************************************!*\
  !*** D:/GitHub/Akila/webgl/BufferObject.js ***!
  \*********************************************/
/*! exports provided: BufferObject, VBO, AVBO, IBO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BufferObject\", function() { return BufferObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VBO\", function() { return VBO; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AVBO\", function() { return AVBO; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IBO\", function() { return IBO; });\n/* harmony import */ var _Display__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Display */ \"../../../Akila/webgl/Display.js\");\n\r\n\r\nclass BufferObject {\r\n  constructor(usage){\r\n    this.pointer = _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.createBuffer();\r\n    this.dataLength = -1;\r\n    this.setUsage(usage);\r\n  }\r\n\r\n  setUsage(usage = BufferObject.STATIC_DRAW){\r\n    this.usage = _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx[usage];\r\n    return this;\r\n  }\r\n\r\n  delete(){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.deleteBuffer(this.pointer);\r\n  }\r\n}\r\n\r\nclass VBO extends BufferObject {\r\n  constructor(data, nbOfElement, attribLocation, usage) {\r\n    super(usage);\r\n    this.attribLocation = attribLocation;\r\n    this.nbOfElement = nbOfElement;\r\n\r\n    this.setData = VBO.prototype.setNewData;\r\n\r\n    if(data) {\r\n      if(data.BYTES_PER_ELEMENT !== undefined) this.setData(data);\r\n      else this.setData(new Float32Array(data));\r\n    }\r\n  }\r\n\r\n  setData(data, offset = 0){}\r\n\r\n  setNewData(data){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bindBuffer(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ARRAY_BUFFER, this.pointer);\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bufferData(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ARRAY_BUFFER, data, this.usage);\r\n    this.dataLength = data.length;\r\n    this.setData = VBO.prototype.setSubData;\r\n  }\r\n\r\n  setSubData(data, offset = 0){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bindBuffer(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ARRAY_BUFFER, this.pointer);\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bufferSubData(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ARRAY_BUFFER, offset * Float32Array.BYTES_PER_ELEMENT, data);\r\n  }\r\n\r\n  getDataLength(){\r\n    return this.dataLength / this.nbOfElement;\r\n  }\r\n\r\n  use(){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bindBuffer(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ARRAY_BUFFER, this.pointer);\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.vertexAttribPointer(this.attribLocation, this.nbOfElement, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.FLOAT, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.FALSE, 0, 0);\r\n  }\r\n}\r\n\r\nclass AVBO extends BufferObject {\r\n  constructor(data, usage) {\r\n    super(usage);\r\n\r\n    this.vertexAttribs = new Array();\r\n\r\n    this.nbOfElement = 0;\r\n  \r\n    this.setData = AVBO.prototype.setNewData;\r\n    this.setData(data);\r\n  }\r\n\r\n  addVertexAttribute(nbOfElement, attribLocation, offset = 0, step = 0, type = AVBO.FLOAT) {\r\n    this.nbOfElement += nbOfElement;\r\n\r\n    this.vertexAttribs.push({\r\n      nbOfElement,\r\n      attribLocation,\r\n      offset,\r\n      step,\r\n      type: _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx[type]\r\n    });\r\n    return this;\r\n  }\r\n\r\n  setData(data, offset = 0){}\r\n\r\n  setNewData(data){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bindBuffer(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ARRAY_BUFFER, this.pointer);\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bufferData(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ARRAY_BUFFER, data, this.usage);\r\n    this.dataLength = data.length;\r\n    this.setData = AVBO.prototype.setSubData;\r\n  }\r\n\r\n  setSubData(data, offset = 0){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bindBuffer(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ARRAY_BUFFER, this.pointer);\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bufferSubData(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ARRAY_BUFFER, offset * Float32Array.BYTES_PER_ELEMENT, data);\r\n  }\r\n\r\n  getDataLength(){\r\n    return this.dataLength / this.nbOfElement;\r\n  }\r\n\r\n  use(){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bindBuffer(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ARRAY_BUFFER, this.pointer);\r\n    for(const va of this.vertexAttribs) {\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.vertexAttribPointer(va.attribLocation, va.nbOfElement, va.type, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.FALSE, va.step, va.offset);\r\n    }\r\n  }\r\n}\r\n\r\nclass IBO extends BufferObject {\r\n  constructor(data, usage) {\r\n    super(usage);\r\n\r\n    this.setData = IBO.prototype.setNewData;\r\n\r\n    if(data) {\r\n      if(data.BYTES_PER_ELEMENT !== undefined) this.setData(data);\r\n      else this.setData(new Uint16Array(data));\r\n    }\r\n  }\r\n\r\n  setData(){}\r\n\r\n  setNewData(data){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bindBuffer(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ELEMENT_ARRAY_BUFFER, this.pointer);\r\n  \t_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bufferData(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ELEMENT_ARRAY_BUFFER, data, this.usage);\r\n    this.dataLength = data.length;\r\n    this.setData = IBO.prototype.setSubData;\r\n  }\r\n\r\n  setSubData(data, offset = 0){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bindBuffer(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ELEMENT_ARRAY_BUFFER, this.pointer);\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bufferSubData(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ELEMENT_ARRAY_BUFFER, offset, data);\r\n  }\r\n\r\n  getDataLength(){\r\n    return this.dataLength;\r\n  }\r\n\r\n  use(){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bindBuffer(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ELEMENT_ARRAY_BUFFER, this.pointer);\r\n  }\r\n}\r\n\r\nIBO.STATIC_DRAW = VBO.STATIC_DRAW = BufferObject.STATIC_DRAW = \"STATIC_DRAW\";\r\nIBO.DYNAMIC_DRAW = VBO.DYNAMIC_DRAW = BufferObject.DYNAMIC_DRAW = \"DYNAMIC_DRAW\";\r\nIBO.STREAM_DRAW = VBO.STREAM_DRAW = BufferObject.STREAM_DRAW = \"STREAM_DRAW\";\r\n\r\nAVBO.BYTE = BufferObject.BYTE = \"BYTE\";\r\nAVBO.SHORT = BufferObject.SHORT = \"SHORT\";\r\nAVBO.UNSIGNED_BYTE = BufferObject.UNSIGNED_BYTE = \"UNSIGNED_BYTE\";\r\nAVBO.UNSIGNED_SHORT = BufferObject.UNSIGNED_SHORT = \"UNSIGNED_SHORT\";\r\nAVBO.FLOAT = BufferObject.FLOAT = \"FLOAT\";\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/webgl/BufferObject.js?");

/***/ }),

/***/ "../../../Akila/webgl/Display.js":
/*!****************************************!*\
  !*** D:/GitHub/Akila/webgl/Display.js ***!
  \****************************************/
/*! exports provided: Display */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Display\", function() { return Display; });\nclass Display {\r\n  constructor(width = 300, height = 300, option = {webGLVersion: 1, canvas: null}) {\r\n    if(Display.ctx) throw `Display est un singleton -> qu'un seul canevas à la fois.`;\r\n\r\n    if(option.canvas) {\r\n      if(typeof option.canvas === 'string') this.canvas = document.querySelector(option.canvas);\r\n      else this.canvas = option.canvas;\r\n    } else {\r\n      this.canvas = document.createElement('canvas');\r\n\r\n      this.canvas.id = \"webgl-canvas\";\r\n  \r\n      this.conteneur = document.getElementById('webgl-screen');\r\n      if (!this.conteneur) throw `Impossible de créer le canevas, il faut ajouter une balise avec l'id \"webgl-screen\"`;\r\n  \r\n      this.conteneur.appendChild(this.canvas);\r\n    }\r\n\r\n    this.ctx = this.canvas.getContext(option.webGLVersion == 2 ? \"webgl2\" : \"webgl\");\r\n    if (!this.ctx) this.ctx = this.canvas.getContext(\"experimental-webgl\");\r\n    if (!this.ctx) throw \"Impossible de d'initialiser le contexte WebGL\";\r\n\r\n    this.loadExtensions();\r\n\r\n    this.use();\r\n\r\n    this.setSize(width, height);\r\n\r\n    this.ctx.enable(this.ctx.DEPTH_TEST);\r\n    this.setClearColor(Math.random(), Math.random(), Math.random(), 1.0);\r\n\r\n    this.ctx.enable(this.ctx.BLEND);\r\n    this.ctx.enable(this.ctx.SAMPLE_ALPHA_TO_COVERAGE);\r\n    this.defaultBlendFunc();\r\n\r\n    this.ctx.enable(this.ctx.CULL_FACE);\r\n  \tthis.ctx.frontFace(this.ctx.CCW);\r\n  \tthis.ctx.cullFace(this.ctx.BACK);\r\n\r\n    this.clear();\r\n  }\r\n\r\n  loadExtensions() {\r\n    this.exts = {\r\n      WEBGL_depth_texture: this.ctx.getExtension('WEBGL_depth_texture')\r\n    }\r\n  }\r\n\r\n  getDiv(){\r\n    return this.conteneur;\r\n  }\r\n\r\n  setSize(w, h){\r\n    this.canvas.width = w;\r\n    this.canvas.height = h;\r\n    this.ctx.viewport(0, 0, w, h);\r\n  }\r\n\r\n  getWidth(){\r\n    return this.canvas.width;\r\n  }\r\n\r\n  getHeight(){\r\n    return this.canvas.height;\r\n  }\r\n\r\n  setClearColor(r, g, b, a){\r\n    this.ctx.clearColor(r, g, b, a);\r\n  }\r\n\r\n  clear(){\r\n    this.ctx.clear(this.ctx.COLOR_BUFFER_BIT | this.ctx.DEPTH_BUFFER_BIT);\r\n  }\r\n\r\n  clearColor(){\r\n    this.ctx.clear(this.ctx.COLOR_BUFFER_BIT);\r\n  }\r\n\r\n  clearDepth(){\r\n    this.ctx.clear(this.ctx.DEPTH_BUFFER_BIT);\r\n  }\r\n\r\n  getCtx(){\r\n    return this.ctx;\r\n  }\r\n\r\n  use(){\r\n    Display.ctx = this.getCtx();\r\n  }\r\n\r\n  useDefaultFrameBuffer(){\r\n    this.ctx.bindFramebuffer(this.ctx.FRAMEBUFFER, null);\r\n    this.ctx.bindRenderbuffer(this.ctx.RENDERBUFFER, null);\r\n    this.ctx.viewport(0, 0, this.getWidth(), this.getHeight());\r\n  }\r\n\r\n  enable(val){\r\n    this.ctx.enable(this.ctx[val]);\r\n  }\r\n\r\n  disable(val){\r\n    this.ctx.disable(this.ctx[val]);\r\n  }\r\n\r\n  blendFunc(sfactor, dfactor) {\r\n    this.ctx.blendFunc(this.ctx[sfactor], this.ctx[dfactor]);\r\n  }\r\n\r\n  depthFunc(func) {\r\n    this.ctx.depthFunc(this.ctx[func]);\r\n  }\r\n\r\n  defaultBlendFunc() {\r\n    this.ctx.blendFunc(this.ctx.SRC_ALPHA, this.ctx.ONE_MINUS_SRC_ALPHA);\r\n  }\r\n\r\n  blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha) {\r\n    this.ctx.blendFuncSeparate(this.ctx[srcRGB], this.ctx[dstRGB], this.ctx[srcAlpha], this.ctx[dstAlpha]);\r\n  }\r\n\r\n  getCanvas(){\r\n    return this.canvas;\r\n  }\r\n}\r\n\r\nDisplay.ctx = null;\r\n\r\nDisplay.BLEND = \"BLEND\";\r\nDisplay.CULL_FACE = \"CULL_FACE\";\r\nDisplay.DEPTH_TEST = \"DEPTH_TEST\";\r\nDisplay.DITHER = \"DITHER\";\r\nDisplay.POLYGON_OFFSET_FILL = \"POLYGON_OFFSET_FILL\";\r\nDisplay.SAMPLE_ALPHA_TO_COVERAGE = \"SAMPLE_ALPHA_TO_COVERAGE\";\r\nDisplay.SAMPLE_COVERAGE = \"SAMPLE_COVERAGE\";\r\nDisplay.SCISSOR_TEST = \"SCISSOR_TEST\";\r\nDisplay.STENCIL_TEST = \"STENCIL_TEST\";\r\n\r\nDisplay.LEQUAL = \"LEQUAL\";\r\nDisplay.LESS = \"LESS\";\r\n\r\n/**\r\n * Multiplies all colors by 0.\r\n */\r\nDisplay.ZERO = \"ZERO\";\r\n\r\n/**\r\n * Multiplies all colors by 1.\r\n */\r\nDisplay.ONE\t= \"ONE\";\r\n\r\n/**\r\n * Multiplies all colors by the source colors.\r\n */\r\nDisplay.SRC_COLOR\t= \"SRC_COLOR\";\r\n\r\n/**\r\n * Multiplies all colors by 1 minus each source color.\r\n */\r\nDisplay.ONE_MINUS_SRC_COLOR = \"ONE_MINUS_SRC_COLOR\";\r\n\r\n/**\r\n * Multiplies all colors by the destination color.\r\n */\r\nDisplay.DST_COLOR\t=\t\"DST_COLOR\";\r\n\r\n/**\r\n * Multiplies all colors by 1 minus each destination color.\r\n */\r\nDisplay.ONE_MINUS_DST_COLOR\t= \"ONE_MINUS_DST_COLOR\";\r\n\r\n/**\r\n * Multiplies all colors by the source alpha value.\r\n */\r\nDisplay.SRC_ALPHA\t= \"SRC_ALPHA\";\r\n\r\n/**\r\n * Multiplies all colors by 1 minus the source alpha value.\r\n */\r\nDisplay.ONE_MINUS_SRC_ALPHA\t= \"ONE_MINUS_SRC_ALPHA\";\r\n\r\n/**\r\n * Multiplies all colors by the destination alpha value.\r\n */\r\nDisplay.DST_ALPHA\t= \"DST_ALPHA\";\r\n\r\n/**\r\n * Multiplies all colors by 1 minus the destination alpha value.\r\n */\r\nDisplay.ONE_MINUS_DST_ALPHA\t= \"ONE_MINUS_DST_ALPHA\";\r\n\r\n/**\r\n * Multiplies all colors by a constant color.\r\n */\r\nDisplay.CONSTANT_COLOR = \"CONSTANT_COLOR\";\r\n\r\n/**\r\n * Multiplies all colors by 1 minus a constant color.\r\n */\r\nDisplay.ONE_MINUS_CONSTANT_COLOR = \"ONE_MINUS_CONSTANT_COLOR\";\r\n\r\n/**\r\n * Multiplies all colors by a constant alpha value.\r\n */\r\nDisplay.CONSTANT_ALPHA = \"CONSTANT_ALPHA\";\r\n\r\n/**\r\n * Multiplies all colors by 1 minus a constant alpha value.\r\n */\r\nDisplay.ONE_MINUS_CONSTANT_ALPHA = \"ONE_MINUS_CONSTANT_ALPHA\";\r\n\r\n/**\r\n * Multiplies the RGB colors by the smaller of either the source alpha value or the value of 1 minus the destination alpha value. The alpha value is multiplied by 1.\r\n */\r\nDisplay.SRC_ALPHA_SATURATE = \"SRC_ALPHA_SATURATE\";\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/webgl/Display.js?");

/***/ }),

/***/ "../../../Akila/webgl/FrameBuffer.js":
/*!********************************************!*\
  !*** D:/GitHub/Akila/webgl/FrameBuffer.js ***!
  \********************************************/
/*! exports provided: FrameBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FrameBuffer\", function() { return FrameBuffer; });\n/* harmony import */ var _Display__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Display */ \"../../../Akila/webgl/Display.js\");\n/* harmony import */ var _Texture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Texture */ \"../../../Akila/webgl/Texture.js\");\n\r\n\r\n\r\nclass FrameBuffer {\r\n  constructor(width = 256, height = 256, options = {texColor: true, texColorUnit: 0, depthTest: true, texDepth: false, texDepthUnit: 0}) {\r\n    this.width = width;\r\n    this.height = height;\r\n    options = {\r\n      texColor: options.texColor || false, texColorUnit: options.texColorUnit || 0,\r\n      texDepth: options.texDepth || false, texDepthUnit: options.texDepthUnit || 0,\r\n      depthTest: options.depthTest || false,\r\n    };\r\n\r\n    this.textures = {\r\n      color: options.texColor ? new _Texture__WEBPACK_IMPORTED_MODULE_1__[\"Texture\"](null, width, height).setUnit(options.texColorUnit) : null,\r\n      depth: options.texDepth ? new _Texture__WEBPACK_IMPORTED_MODULE_1__[\"DepthTexture\"](width, height).setUnit(options.texDepthUnit) : null,\r\n    };\r\n\r\n\r\n    this.frameBufferPointer = _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.createFramebuffer();\r\n    this.depthBufferPointer = (options.depthTest && !options.texDepth) ? _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.createRenderbuffer() : null;\r\n    this.use();\r\n\r\n    if(options.texColor) _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.framebufferTexture2D(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.FRAMEBUFFER, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.COLOR_ATTACHMENT0, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_2D, this.textures.color.getLocation(), 0);\r\n    if(options.texDepth) _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.framebufferTexture2D(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.FRAMEBUFFER, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.DEPTH_ATTACHMENT, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_2D, this.textures.depth.getLocation(), 0);\r\n    \r\n    if(this.depthBufferPointer){\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.renderbufferStorage(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.RENDERBUFFER, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.DEPTH_COMPONENT16, width, height);\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.framebufferRenderbuffer(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.FRAMEBUFFER, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.DEPTH_ATTACHMENT, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.RENDERBUFFER, this.depthBufferPointer);\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bindRenderbuffer(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.RENDERBUFFER, null);\r\n    }\r\n\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bindFramebuffer(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.FRAMEBUFFER, null);\r\n  }\r\n\r\n  use(){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bindFramebuffer(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.FRAMEBUFFER, this.frameBufferPointer);\r\n    if(this.depthBufferPointer != null) _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bindRenderbuffer(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.RENDERBUFFER, this.depthBufferPointer);\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.viewport(0, 0, this.width, this.height);\r\n  }\r\n\r\n  delete(){\r\n    if(this.textures.color) this.textures.color.delete();\r\n    if(this.textures.depth) this.textures.depth.delete();\r\n\r\n    if(this.depthBufferPointer) _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.deleteRenderbuffer(this.depthBufferPointer);\r\n\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.deleteFramebuffer(this.frameBufferPointer);\r\n  }\r\n\r\n  getTexture(){\r\n    return this.textures.color;\r\n  }\r\n\r\n  getColorTexture(){\r\n    return this.textures.color;\r\n  }\r\n\r\n  getDepthTexture(){\r\n    return this.textures.depth;\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/webgl/FrameBuffer.js?");

/***/ }),

/***/ "../../../Akila/webgl/Shader.js":
/*!***************************************!*\
  !*** D:/GitHub/Akila/webgl/Shader.js ***!
  \***************************************/
/*! exports provided: Shader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Shader\", function() { return Shader; });\n/* harmony import */ var _Display__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Display */ \"../../../Akila/webgl/Display.js\");\n\r\n\r\nclass Shader {\r\n  constructor(vs, fs, fileName = \"Shader\") {\r\n    this.name = fileName;\r\n    this.program = null;\r\n    this.attributList = new Object();\r\n    this.attributNumber = 0;\r\n\r\n    this.uniformList = new Object();\r\n\r\n    this.vertexShader = this.createShader(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.VERTEX_SHADER, vs);\r\n    if (!this.vertexShader) return;\r\n    this.fragmantShader = this.createShader(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.FRAGMENT_SHADER, fs);\r\n    if (!this.fragmantShader) return;\r\n\r\n    this.createProgramme();\r\n\r\n    let uniform = null;\r\n    let index = 0;\r\n    const nbUnif = _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.getProgramParameter(this.program, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ACTIVE_UNIFORMS);\r\n\r\n    while (index < nbUnif){\r\n      uniform = _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.getActiveUniform(this.program, index++);\r\n      if (uniform) {\r\n        this.initUniformLocation(uniform.name);\r\n      }\r\n    }\r\n\r\n    this.attributNumber = _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.getProgramParameter(this.program, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.ACTIVE_ATTRIBUTES) - 1;\r\n    if(Shader.attributeMax < this.attributNumber) Shader.attributeMax = this.attributNumber;\r\n  }\r\n\r\n\r\n///////////////// Private\r\n\r\n\r\n  delShad(s){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.detacheShader(this.program, s);\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.deleteShader(s);\r\n  }\r\n\r\n  createShader(type, text) {\r\n    const shader = _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.createShader(type);\r\n\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.shaderSource(shader, text);\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.compileShader(shader);\r\n  \tif (!_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.getShaderParameter(shader, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.COMPILE_STATUS)) {\r\n  \t\tconsole.error(this.name + ' -> erreur de compilation '+ (type == _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.VERTEX_SHADER ? 'vertex' : 'fragment') +' shader!', _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.getShaderInfoLog(shader));\r\n  \t\treturn null;\r\n  \t}\r\n\r\n    return shader;\r\n  }\r\n\r\n  createProgramme() {\r\n    let program = _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.createProgram();\r\n  \t_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.attachShader(program, this.vertexShader);\r\n  \t_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.attachShader(program, this.fragmantShader);\r\n  \t_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.linkProgram(program);\r\n  \tif (!_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.getProgramParameter(program, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.LINK_STATUS)) {\r\n  \t\tconsole.error(this.name + ' -> Impossible de lier le programme', _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.getProgramInfoLog(program));\r\n  \t\treturn;\r\n  \t}\r\n  \t_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.validateProgram(program);\r\n  \tif (!_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.getProgramParameter(program, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.VALIDATE_STATUS)) {\r\n  \t\tconsole.error(this.name + ' -> erreur de validation du programme', _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.getProgramInfoLog(program));\r\n  \t\treturn;\r\n  \t}\r\n\r\n    this.program = program;\r\n  }\r\n\r\n  initUniformLocation(nom){\r\n    nom = nom.replace(/\\[0\\]/,'');\r\n    \r\n    const pointer = _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.getUniformLocation(this.program, nom);\r\n    if(pointer) this.uniformList[nom] = pointer;\r\n    else console.error(\"Uniform '\"+ nom +\"' n'existe pas dans \"+ this.name);\r\n  }\r\n\r\n\r\n///////////////// Public\r\n\r\n\r\n  delete(){\r\n    if(this.program){\r\n      this.delShad(this.vertexShader);\r\n      this.delShad(this.fragmantShader);\r\n\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.deleteProgram(this.program);\r\n      this.program = null;\r\n    }\r\n  }\r\n\r\n  use(){\r\n    if(!this.program) return console.error(this.name + ' -> Programme invalide');\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.useProgram(this.program);\r\n    for (let i = 0; i <= Shader.attributeMax; ++i) {\r\n      if(i <= this.attributNumber) {_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.enableVertexAttribArray(i);}\r\n      else {_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.disableVertexAttribArray(i);}\r\n    }\r\n  }\r\n\r\n//////////////////// Variables attributs\r\n\r\n  getAttribLocation(nom){\r\n    if(this.attributList[nom] === undefined){\r\n      const num = _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.getAttribLocation(this.program, nom);\r\n\r\n      if(num < 0) {\r\n        console.error(\"L'attribut '\"+ nom +\"' n'existe pas, ou il n'est pas utilisé dans \"+ this.name);\r\n        return;\r\n      }\r\n\r\n      this.attributList[nom] = num;\r\n    }\r\n\r\n    return this.attributList[nom];\r\n  }\r\n\r\n//////////////////// Variables uniformes\r\n\r\n  getUniformLocation(nom){\r\n    return this.uniformList[nom];\r\n  }\r\n\r\n  sendFloat(nom, value){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.uniform1f(this.getUniformLocation(nom), value);\r\n  }\r\n\r\n  sendInt(nom, value){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.uniform1i(this.getUniformLocation(nom), value);\r\n  }\r\n\r\n  sendIntVec(nom, value){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.uniform1iv(this.getUniformLocation(nom), value);\r\n  }\r\n\r\n  sendVec1(nom, value){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.uniform1fv(this.getUniformLocation(nom), value);\r\n  }\r\n\r\n  sendVec2(nom, value){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.uniform2fv(this.getUniformLocation(nom), value);\r\n  }\r\n\r\n  sendVec3(nom, value){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.uniform3fv(this.getUniformLocation(nom), value);\r\n  }\r\n\r\n  sendVec4(nom, value){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.uniform4fv(this.getUniformLocation(nom), value);\r\n  }\r\n\r\n  sendMat2(nom, value){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.uniformMatrix2fv(this.getUniformLocation(nom), _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.FALSE, value);\r\n  }\r\n\r\n  sendMat3(nom, value){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.uniformMatrix3fv(this.getUniformLocation(nom), _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.FALSE, value);\r\n  }\r\n\r\n  sendMat4(nom, value){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.uniformMatrix4fv(this.getUniformLocation(nom), _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.FALSE, value);\r\n  }\r\n}\r\n\r\nShader.attributeMax = -1;\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/webgl/Shader.js?");

/***/ }),

/***/ "../../../Akila/webgl/Texture.js":
/*!****************************************!*\
  !*** D:/GitHub/Akila/webgl/Texture.js ***!
  \****************************************/
/*! exports provided: Texture, DepthTexture, CubeMapTexture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Texture\", function() { return Texture; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DepthTexture\", function() { return DepthTexture; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CubeMapTexture\", function() { return CubeMapTexture; });\n/* harmony import */ var _Display__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Display */ \"../../../Akila/webgl/Display.js\");\n\r\n\r\nclass TextureBuffer {\r\n  constructor(width, height) {\r\n    this.id = Texture.idMax++;\r\n\r\n    this.width = width;\r\n    this.height = height;\r\n\r\n    this.texture = _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.createTexture();\r\n    this.setUnit(0);\r\n\r\n    this.use();\r\n    this.setParameters();\r\n  }\r\n\r\n  getWidth() {\r\n    return this.width;\r\n  }\r\n\r\n  getHeight() {\r\n    return this.height;\r\n  }\r\n\r\n  setUnit(unit){\r\n    this.unit = unit;\r\n    return this;\r\n  }\r\n\r\n  getUnit(){\r\n    return this.unit;\r\n  }\r\n\r\n  use(){\r\n    if(Texture.currentIds[this.unit] == this.id) return;\r\n    Texture.currentIds[this.unit] = this.id;\r\n\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.activeTexture(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE0 + this.unit);\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bindTexture(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_2D, this.texture);\r\n  }\r\n\r\n  getLocation(){\r\n    return this.texture;\r\n  }\r\n\r\n  isPowerOf2(val){\r\n    return (val & (val - 1)) == 0;\r\n  }\r\n\r\n  setParameters(params = {magFilter: Texture.LINEAR, minFilter: Texture.LINEAR, wrapS: Texture.REPEAT, wrapT: Texture.REPEAT}) {\r\n    params = {\r\n      magFilter: params.magFilter || Texture.LINEAR,\r\n      minFilter: params.minFilter || Texture.LINEAR,\r\n      wrapS: params.wrapS || Texture.REPEAT,\r\n      wrapT: params.wrapT || Texture.REPEAT\r\n    };\r\n\r\n    /*if (this.isPowerOf2(this.width) && this.isPowerOf2(this.height)) {\r\n      Display.ctx.generateMipmap(Display.ctx.TEXTURE_2D);\r\n\r\n      Display.ctx.texParameterf(Display.ctx.TEXTURE_2D, Display.ctx.TEXTURE_MAG_FILTER, Display.ctx[params.magFilter]);\r\n      Display.ctx.texParameterf(Display.ctx.TEXTURE_2D, Display.ctx.TEXTURE_MIN_FILTER, Display.ctx[params.minFilter]);\r\n\r\n      Display.ctx.texParameteri(Display.ctx.TEXTURE_2D, Display.ctx.TEXTURE_WRAP_S, Display.ctx[params.wrapS]);\r\n      Display.ctx.texParameteri(Display.ctx.TEXTURE_2D, Display.ctx.TEXTURE_WRAP_T, Display.ctx[params.wrapT]);\r\n\r\n    } else {*/\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.texParameteri(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_2D, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_WRAP_S, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.CLAMP_TO_EDGE);\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.texParameteri(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_2D, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_WRAP_T, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.CLAMP_TO_EDGE);\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.texParameteri(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_2D, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_MIN_FILTER, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx[params.minFilter]);\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.texParameteri(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_2D, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_MAG_FILTER, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx[params.magFilter]);\r\n    //}\r\n\r\n    return this;\r\n  }\r\n\r\n  delete(){\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.deleteTexture(this.texture);\r\n  }\r\n}\r\n\r\nclass Texture extends TextureBuffer {\r\n  constructor(data, width = data.width, height = data.height) {\r\n    super(width, height);\r\n\r\n    if(data != null) {\r\n      this.setTextureData(data);\r\n    } else {\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.texImage2D(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_2D,\r\n        0,\r\n        _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.RGBA,\r\n        this.width,\r\n        this.height,\r\n        0,\r\n        _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.RGBA,\r\n        _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.UNSIGNED_BYTE,\r\n        null\r\n      );\r\n    }\r\n  }\r\n\r\n  setTextureData(data){\r\n    this.use();\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.texImage2D(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_2D,\r\n      0, // niveau du bitmap\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.RGBA, //internalFormat\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.RGBA, //srcFormat\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.UNSIGNED_BYTE, //srcType\r\n      data\r\n    );\r\n  }\r\n}\r\n\r\n\r\nclass DepthTexture extends TextureBuffer {\r\n  constructor(width, height) {\r\n    super(width, height);\r\n    \r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.texImage2D(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_2D,\r\n      0,\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.DEPTH_COMPONENT,\r\n      this.width,\r\n      this.height,\r\n      0,\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.DEPTH_COMPONENT,\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.UNSIGNED_SHORT,\r\n      null\r\n    );\r\n  }\r\n}\r\n\r\nclass CubeMapTexture extends TextureBuffer {\r\n  constructor(datas) {\r\n    super(datas[0].width, datas[0].height);\r\n\r\n    for(let i = 0; i < datas.length; ++i) {\r\n      _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.texImage2D(\r\n        _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n        0, // niveau du bitmap\r\n        _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.RGBA, //internalFormat\r\n        _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.RGBA, //srcFormat\r\n        _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.UNSIGNED_BYTE, //srcType\r\n        datas[i]\r\n      );\r\n    }\r\n  }\r\n\r\n  setParameters(params = {magFilter: Texture.LINEAR, minFilter: Texture.LINEAR, wrapS: Texture.REPEAT, wrapT: Texture.REPEAT}) {\r\n    params = {\r\n      magFilter: params.magFilter || Texture.LINEAR,\r\n      minFilter: params.minFilter || Texture.LINEAR,\r\n      wrapS: params.wrapS || Texture.REPEAT,\r\n      wrapT: params.wrapT || Texture.REPEAT\r\n    };\r\n\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.texParameteri(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_CUBE_MAP, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_WRAP_S, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.CLAMP_TO_EDGE);\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.texParameteri(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_CUBE_MAP, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_WRAP_T, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.CLAMP_TO_EDGE);\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.texParameteri(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_CUBE_MAP, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_MIN_FILTER, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx[params.minFilter]);\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.texParameteri(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_CUBE_MAP, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_MAG_FILTER, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx[params.magFilter]);\r\n\r\n    return this;\r\n  }\r\n\r\n  use(){\r\n    if(Texture.currentIds[this.unit] == this.id) return;\r\n    Texture.currentIds[this.unit] = this.id;\r\n\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.activeTexture(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE0 + this.unit);\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.bindTexture(_Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.TEXTURE_CUBE_MAP, this.texture);\r\n  }\r\n}\r\n\r\nTexture.idMax = 0;\r\nTexture.currentIds = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];\r\n\r\nTexture.LINEAR = \"LINEAR\";\r\nTexture.NEAREST = \"NEAREST\";\r\nTexture.LINEAR_MIPMAP_LINEAR = \"LINEAR_MIPMAP_LINEAR\";\r\nTexture.LINEAR_MIPMAP_NEAREST = \"LINEAR_MIPMAP_NEAREST\";\r\nTexture.NEAREST_MIPMAP_NEAREST = \"NEAREST_MIPMAP_NEAREST\";\r\nTexture.NEAREST_MIPMAP_LINEAR = \"NEAREST_MIPMAP_LINEAR\";\r\nTexture.REPEAT = \"REPEAT\";\r\nTexture.CLAMP_TO_EDGE = \"CLAMP_TO_EDGE\";\r\nTexture.MIRRORED_REPEAT = \"MIRRORED_REPEAT\";\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/webgl/Texture.js?");

/***/ }),

/***/ "../../../Akila/webgl/VAO.js":
/*!************************************!*\
  !*** D:/GitHub/Akila/webgl/VAO.js ***!
  \************************************/
/*! exports provided: VAO, IndexedVAO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VAO\", function() { return VAO; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IndexedVAO\", function() { return IndexedVAO; });\n/* harmony import */ var _Display__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Display */ \"../../../Akila/webgl/Display.js\");\n\r\n\r\nclass VAO {\r\n  constructor(mode) {\r\n    this.id = VAO.idMax++;\r\n\r\n    this.draw = VAO.prototype.drawVAO;\r\n\r\n    this.setMode(mode);\r\n    this.vbos = new Array();\r\n    this.vboNames = new Object();\r\n  }\r\n\r\n  setMode(mode = VAO.TRIANGLES){\r\n    this.mode = _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx[mode];\r\n    return this;\r\n  }\r\n\r\n  addVBO(vbo, nom = this.vbos.length){\r\n    const id = this.vbos.length;\r\n    this.vboNames[nom] = id;\r\n    this.vbos.push(vbo);\r\n\r\n    this.refreshDataLength();\r\n\r\n    return this;\r\n  }\r\n\r\n  getVBO(nom){\r\n    return this.vbos[this.vboNames[nom]];\r\n  }\r\n\r\n  use(){\r\n    if (this.id != VAO.currentId) {\r\n      this.useVBOs();\r\n      VAO.currentId = this.id;\r\n    }\r\n  }\r\n\r\n  refreshDataLength(){\r\n    for (const vbo of this.vbos) {\r\n      this.dataLength = vbo.getDataLength();\r\n      if(this.dataLength < 0) break;\r\n    }\r\n  }\r\n\r\n  useVBOs(){\r\n    for (const vbo of this.vbos) vbo.use();\r\n  }\r\n\r\n  drawCheck(){\r\n    this.refreshDataLength();\r\n    if(this.dataLength >= 0) {\r\n      this.draw = VAO.prototype.drawVAO;\r\n      this.draw();\r\n    }\r\n  }\r\n\r\n  drawVAO(){\r\n    this.use();\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.drawArrays(this.mode, 0, this.dataLength);\r\n  }\r\n\r\n  delete(){\r\n    for (const vbo of this.vbos) vbo.delete();\r\n  }\r\n}\r\n\r\nVAO.idMax = 0;\r\nVAO.currentId = -1;\r\n\r\nclass IndexedVAO extends VAO {\r\n  constructor(mode, ibo) {\r\n    super(mode);\r\n    this.draw = IndexedVAO.prototype.drawCheck;\r\n    if(ibo) this.setIBO(ibo);\r\n  }\r\n\r\n  setIBO(ibo){\r\n    this.ibo = ibo;\r\n    this.refreshDataLength();\r\n    return this;\r\n  }\r\n\r\n  getIBO(){\r\n    return this.ibo;\r\n  }\r\n\r\n  refreshDataLength(){\r\n    if(this.ibo) this.nbIndex = this.ibo.getDataLength();\r\n  }\r\n\r\n  useVBOs(){\r\n    this.ibo.use();\r\n    super.useVBOs();\r\n  }\r\n\r\n  draw(){}\r\n\r\n  drawCheck(){\r\n    this.refreshDataLength();\r\n    if(this.nbIndex >= 0) {\r\n      this.draw = IndexedVAO.prototype.drawVAO;\r\n      this.draw();\r\n    }\r\n  }\r\n\r\n  drawVAO(){\r\n    this.use();\r\n    _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.drawElements(this.mode, this.nbIndex, _Display__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].ctx.UNSIGNED_SHORT, 0);\r\n  }\r\n\r\n  delete(){\r\n    if(this.ibo) this.ibo.delete();\r\n    super.delete();\r\n  }\r\n}\r\n\r\nIndexedVAO.TRIANGLES = VAO.TRIANGLES = \"TRIANGLES\";\r\nIndexedVAO.TRIANGLE_STRIP = VAO.TRIANGLE_STRIP = \"TRIANGLE_STRIP\";\r\nIndexedVAO.TRIANGLE_FAN = VAO.TRIANGLE_FAN = \"TRIANGLE_FAN\";\r\n\r\nIndexedVAO.POINTS = VAO.POINTS = \"POINTS\";\r\n\r\nIndexedVAO.LINES = VAO.LINES = \"LINES\";\r\nIndexedVAO.LINE_STRIP = VAO.LINE_STRIP = \"LINE_STRIP\";\r\nIndexedVAO.LINE_LOOP = VAO.LINE_LOOP = \"LINE_LOOP\";\r\n\n\n//# sourceURL=webpack:///D:/GitHub/Akila/webgl/VAO.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _main1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main1 */ \"./src/main1.js\");\n/* harmony import */ var _main2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./main2 */ \"./src/main2.js\");\n/* harmony import */ var _main3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./main3 */ \"./src/main3.js\");\n\r\n\r\n\r\n\r\nObject(_main3__WEBPACK_IMPORTED_MODULE_2__[\"main3\"])();\r\n\n\n//# sourceURL=webpack:///./src/main.js?");

/***/ }),

/***/ "./src/main1.js":
/*!**********************!*\
  !*** ./src/main1.js ***!
  \**********************/
/*! exports provided: main1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"main1\", function() { return main1; });\n/* harmony import */ var Akila_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Akila/time */ \"../../../Akila/time.js\");\n/* harmony import */ var Akila_inputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! Akila/inputs */ \"../../../Akila/inputs.js\");\n/* harmony import */ var Akila_collision__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! Akila/collision */ \"../../../Akila/collision.js\");\n\n\n\n\nconst main1 = () => {\n\n    const canvas = document.getElementById('canvas');\n    const ctx = canvas.getContext('2d');\n    const W = canvas.width = 600;\n    const H = canvas.height = 600;\n    const S = 18;\n\n    const time = new Akila_time__WEBPACK_IMPORTED_MODULE_0__[\"Time\"]();\n    const mouse = new Akila_inputs__WEBPACK_IMPORTED_MODULE_1__[\"Mouse\"]();\n    mouse.setDOMElementReference(canvas);\n    const field = new Akila_collision__WEBPACK_IMPORTED_MODULE_2__[\"BroadField2d\"]();\n\n\n    const buffer = new Set();\n\n    const currentPoint = {\n        x: W / 2,\n        y: H / 2\n    }\n\n    time.onTick(() => {\n    });\n\n    time.onDraw(() => {\n        ctx.fillStyle = '#000';\n        ctx.fillRect(0, 0, W, H);\n\n        field.clearAll();\n        if(mouse.isPressed(Akila_inputs__WEBPACK_IMPORTED_MODULE_1__[\"Mouse\"].LEFT_BUTTON)) {\n            currentPoint.x = mouse.posX();\n            currentPoint.y = mouse.posY();\n        }\n\n\n        let a = {};\n        Akila_collision__WEBPACK_IMPORTED_MODULE_2__[\"RayRaster2d\"].addToField(0 / S, 0 / S, (W + 2) / S, H / S, field, a);\n\n        let b = {};\n        Akila_collision__WEBPACK_IMPORTED_MODULE_2__[\"RayRaster2d\"].addToField(currentPoint.x / S, currentPoint.y / S, mouse.posX() / S, mouse.posY() / S, field, b);\n\n        let c = {};\n        Akila_collision__WEBPACK_IMPORTED_MODULE_2__[\"RayRaster2d\"].addToField(W / S, 0,  W / 2 / S, H / S  , field, c);\n\n        for(let x = 0; x < W / S; ++x) {\n            for(let y = 0; y < H / S; ++y) {\n                //const buffer = new Set();\n                buffer.clear();\n                field.query(x, y, buffer);\n                if(buffer.size == 1) ctx.fillStyle = '#0f0';\n                else if(buffer.size == 2) ctx.fillStyle = '#00f';\n                else if(buffer.size == 3) ctx.fillStyle = '#f0f';\n                else ctx.fillStyle = '#000';\n\n                ctx.fillRect(x * S, y * S, S, S);\n            }\n        }\n\n        ctx.strokeStyle = '#f00';\n        ctx.beginPath();\n        ctx.moveTo(currentPoint.x, currentPoint.y);\n        ctx.lineTo(mouse.posX(), mouse.posY());\n        ctx.stroke();\n    });\n\n    time.start();\n}\n\n\n//# sourceURL=webpack:///./src/main1.js?");

/***/ }),

/***/ "./src/main2.js":
/*!**********************!*\
  !*** ./src/main2.js ***!
  \**********************/
/*! exports provided: main2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"main2\", function() { return main2; });\n/* harmony import */ var Akila_collision__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Akila/collision */ \"../../../Akila/collision.js\");\n/* harmony import */ var Akila_time__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! Akila/time */ \"../../../Akila/time.js\");\n/* harmony import */ var Akila_inputs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! Akila/inputs */ \"../../../Akila/inputs.js\");\n/* harmony import */ var Akila_math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Akila/math */ \"../../../Akila/math/index.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nconst multMat3 = (out, a, m, z = 1) => {\r\n    const x = a[0], y = a[1];\r\n    out[0] = x * m[0] + y * m[3] + z * m[6];\r\n    out[1] = x * m[1] + y * m[4] + z * m[7];\r\n\r\n    return out;\r\n}*/\r\n\r\nconst multMat3 = Akila_math__WEBPACK_IMPORTED_MODULE_3__[\"vec3\"].transformMat3;\r\n\r\n\r\nlet vel = [0, 0];\r\n\r\nconst reflect = (res, i, n) => {\r\n    // I - 2.0 * dot(N, I) * N\r\n    const temp = (i[0] * n[0] + i[1] * n[1]) * 2;\r\n    res[0] = i[0] - temp * n[0];\r\n    res[1] = i[1] - temp * n[1];\r\n}\r\n\r\nclass CMap {\r\n    constructor(v) {\r\n        this.faces = new Array();\r\n        \r\n        for(let i = 0; i < v.length - 2; i += 2) {\r\n            const x1 = v[i];\r\n            const y1 = v[i + 1];\r\n\r\n            const x2 = v[i + 2];\r\n            const y2 = v[i + 3];\r\n\r\n            this.faces.push(new Akila_collision__WEBPACK_IMPORTED_MODULE_0__[\"Collider2d\"]([x1, y1, x2, y2]));\r\n        }\r\n\r\n        this.b = Akila_math__WEBPACK_IMPORTED_MODULE_3__[\"mat3\"].create();\r\n        this.satBuffer = Akila_collision__WEBPACK_IMPORTED_MODULE_0__[\"SAT2d\"].createResultBuffer();\r\n    }\r\n\r\n    test(cObject){\r\n        for(const f of this.faces) {\r\n            Akila_collision__WEBPACK_IMPORTED_MODULE_0__[\"SAT2d\"].getMin(cObject.collider, cObject.position, f, this.b, this.satBuffer);\r\n            cObject.move(cObject.x + this.satBuffer.axis[0] * this.satBuffer.length, cObject.y + this.satBuffer.axis[1] * this.satBuffer.length, Math.PI / 4);\r\n\r\n            if(this.satBuffer.length != 0) {\r\n                reflect(vel, vel, this.satBuffer.axis);\r\n                vel[0] *= 0.9;\r\n                vel[1] *= 0.9;\r\n            }\r\n            \r\n        }\r\n\r\n        /*if(df) {\r\n            //cObject.move(cObject.x - final[0] * df, cObject.y - final[1] * df);\r\n\r\n            const d = Math.hypot(vel[0], vel[1]) * 0.8;\r\n            vel[0] += final[0] * d;\r\n            vel[1] += final[1] * d;\r\n\r\n            console.log(final, vel)\r\n        }*/\r\n    }\r\n\r\n    draw(ctx) {\r\n        ctx.beginPath();\r\n        for(let f of this.faces) {    \r\n                ctx.moveTo(f.vertices[0][0], f.vertices[0][1]);\r\n                ctx.lineTo(f.vertices[1][0], f.vertices[1][1]);\r\n        }\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\n\r\n\r\nclass CObject {\r\n    constructor(v) {\r\n        this.collider = new Akila_collision__WEBPACK_IMPORTED_MODULE_0__[\"Collider2d\"](v);\r\n        this.position = Akila_math__WEBPACK_IMPORTED_MODULE_3__[\"mat3\"].create();\r\n        Akila_math__WEBPACK_IMPORTED_MODULE_3__[\"mat3\"].identity(this.position);\r\n\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n\r\n    move(x, y, r = 0) {\r\n        const b = Akila_math__WEBPACK_IMPORTED_MODULE_3__[\"mat3\"].create();\r\n        Akila_math__WEBPACK_IMPORTED_MODULE_3__[\"mat3\"].fromTranslation(this.position, [x, y]);\r\n        Akila_math__WEBPACK_IMPORTED_MODULE_3__[\"mat3\"].fromRotation(b, r);\r\n        Akila_math__WEBPACK_IMPORTED_MODULE_3__[\"mat3\"].multiply(this.position, this.position, b);\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    draw(ctx) {\r\n        ctx.beginPath();\r\n        let first = true;\r\n\r\n        let buff = new Float32Array(2);\r\n\r\n        for(let v of this.collider.vertices) {    \r\n\r\n            multMat3(buff, v, this.position);\r\n\r\n\r\n            if(first) {\r\n                ctx.moveTo(buff[0], buff[1]);\r\n                first = false;\r\n            } else {\r\n                ctx.lineTo(buff[0], buff[1]);\r\n            }\r\n        }\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n/*\r\n        ctx.save()\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = '#faa';\r\n        ctx.arc(this.x, this.y, this.collider.getRadius(), 0, 2 * Math.PI, false);\r\n        ctx.stroke();\r\n        ctx.restore();*/\r\n    }\r\n}\r\n\r\n\r\n\r\nconst main2 = () => { \r\n\r\n    const canvas = document.getElementById('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    const W = canvas.width = 600;\r\n    const H = canvas.height = 600;\r\n\r\n    const time = new Akila_time__WEBPACK_IMPORTED_MODULE_1__[\"Time\"]();\r\n    const mouse = new Akila_inputs__WEBPACK_IMPORTED_MODULE_2__[\"Mouse\"]();\r\n    mouse.setDOMElementReference(canvas);\r\n\r\n    const satBuffer = Akila_collision__WEBPACK_IMPORTED_MODULE_0__[\"SAT2d\"].createResultBuffer();\r\n\r\n    const cObject1 = new CObject([\r\n        /*0, 0,\r\n        0, 100,\r\n        100, 100*/\r\n\r\n\r\n        0, 0,\r\n        0, 100,\r\n        100, 100,\r\n        110, -20,\r\n        50, -30,\r\n    ].map(c => c - 50));\r\n    cObject1.move(179, 137);\r\n    //cObject1.move(313, 221);\r\n\r\n    const cObject2 = new CObject([\r\n        -100, -100,\r\n        0, 100,\r\n        100, 100\r\n    ]);\r\n    cObject2.move(300, 300);\r\n\r\n    const cObject3 = new CObject([\r\n        -100, -100,\r\n        0, 100,\r\n        100, 100\r\n    ]);\r\n    cObject3.move(300, 400);\r\n\r\n\r\n\r\n\r\n\r\n    const cmap = new CMap([\r\n        50, 0,\r\n        0, 600-100,\r\n        100, 600-150,\r\n        200, 600-80,\r\n        300, 600-60,\r\n        400, 600-100,\r\n        500, 600-180,\r\n        600, 600-190,\r\n        600 - 50 ,0\r\n    ]);\r\n\r\n    const cube = new CObject([\r\n        -50, 50,\r\n        -50, -50,\r\n        50, -50,\r\n        50, 50\r\n    ]);\r\n    cube.move(Math.random() * 300 + 150, 0);\r\n\r\n\r\n    \r\n\r\n    let r = 0;\r\n\r\n    \r\n\r\n    time.onTick(() => {\r\n        r += mouse.scrollVelY() * 0.2;\r\n        if(mouse.isPressed(Akila_inputs__WEBPACK_IMPORTED_MODULE_2__[\"Mouse\"].LEFT_BUTTON)) cObject1.move(cObject1.x + mouse.velX(), cObject1.y + mouse.velY(), r);\r\n        else cObject1.move(cObject1.x, cObject1.y, r);\r\n    });\r\n\r\n    time.onDraw(() => {\r\n        ctx.fillStyle = '#000';\r\n        ctx.fillRect(0, 0, W, H);\r\n\r\n\r\n        Akila_collision__WEBPACK_IMPORTED_MODULE_0__[\"SAT2d\"].getMin(cObject1.collider, cObject1.position, cObject2.collider, cObject2.position, satBuffer);\r\n        cObject2.move(cObject2.x - satBuffer.axis[0] * satBuffer.length, cObject2.y - satBuffer.axis[1] * satBuffer.length);\r\n\r\n\r\n\r\n        Akila_collision__WEBPACK_IMPORTED_MODULE_0__[\"SAT2d\"].getMin(cObject1.collider, cObject1.position, cObject3.collider, cObject3.position, satBuffer);\r\n        cObject3.move(cObject3.x - satBuffer.axis[0] * satBuffer.length, cObject3.y - satBuffer.axis[1] * satBuffer.length);\r\n\r\n\r\n\r\n        Akila_collision__WEBPACK_IMPORTED_MODULE_0__[\"SAT2d\"].getMin(cObject2.collider, cObject2.position, cObject3.collider, cObject3.position, satBuffer);\r\n        cObject2.move(cObject2.x + satBuffer.axis[0] * satBuffer.length * 0.5, cObject2.y + satBuffer.axis[1] * satBuffer.length * 0.5);\r\n        cObject3.move(cObject3.x - satBuffer.axis[0] * satBuffer.length * 0.5, cObject3.y - satBuffer.axis[1] * satBuffer.length * 0.5);\r\n\r\n\r\n        \r\n        vel[1] += 9.81 * Akila_time__WEBPACK_IMPORTED_MODULE_1__[\"Time\"].limitedDelta;\r\n        cube.move(cube.x + vel[0], cube.y + vel[1], Math.PI / 4);\r\n        cmap.test(cube);\r\n\r\n        //cmap.test(cObject1);\r\n\r\n\r\n        //console.log(satBuffer);\r\n        //ctx.strokeStyle = res.min == 0 ? '#0f0' : '#f00';\r\n        ctx.strokeStyle = '#aaf';\r\n\r\n        cmap.draw(ctx);\r\n        cube.draw(ctx);\r\n\r\n        ctx.strokeStyle = '#faa';\r\n        cObject1.draw(ctx);\r\n        cObject2.draw(ctx);\r\n        cObject3.draw(ctx);\r\n\r\n       //time.pause();\r\n    });\r\n\r\n    time.start();\r\n\r\n    window.observer = {\r\n        ctx,\r\n        cObject1\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/main2.js?");

/***/ }),

/***/ "./src/main3.js":
/*!**********************!*\
  !*** ./src/main3.js ***!
  \**********************/
/*! exports provided: main3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"main3\", function() { return main3; });\n/* harmony import */ var Akila_webgl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Akila/webgl */ \"../../../Akila/webgl.js\");\n/* harmony import */ var Akila_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! Akila/utils */ \"../../../Akila/utils.js\");\n/* harmony import */ var Akila_math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! Akila/math */ \"../../../Akila/math/index.js\");\n/* harmony import */ var Akila_time__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Akila/time */ \"../../../Akila/time.js\");\n\r\n\r\n \r\n\r\n\r\nvar ColladaLoader = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module 'three-collada-loader'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\r\n \r\nvar loader = new ColladaLoader();\r\nloader.load( 'meshs/Character Running.dae', function ( collada ) {\r\n    // Use data here\r\n    console.log(collada)\r\n});\r\n\r\nconst main3 = () => {\r\n    const display = new Akila_webgl__WEBPACK_IMPORTED_MODULE_0__[\"Display\"](600, 600, {canvas: '#canvas'});\r\n    display.setClearColor(0.2, 0.2, 0.2, 1.0);\r\n\r\n    window.onresize = () => {\r\n        if(window.innerWidth > (window.innerHeight * (16/9))) display.setSize(window.innerHeight * (16/9), window.innerHeight);\r\n        else display.setSize(window.innerWidth, window.innerWidth * (9/16));\r\n    }\r\n    window.onresize();\r\n\r\n    const time = new Akila_time__WEBPACK_IMPORTED_MODULE_3__[\"Time\"]();\r\n    \r\n    const shaders = {};\r\n    const textures = {};\r\n    const models = {};\r\n\r\n    const camera = new Akila_utils__WEBPACK_IMPORTED_MODULE_1__[\"TrackBallCamera\"]({aspect: 16/9, near: 0.01, far: 200.0});\r\n\r\n    const meshBank = new Akila_utils__WEBPACK_IMPORTED_MODULE_1__[\"Bank\"]('meshs', ['terrain', 'jetHuge'], {extension: 'kbm', mediaType: 'blob', treatment: async file => {\r\n        return await file.arrayBuffer();\r\n    }});\r\n\r\n    const textureBank = new Akila_utils__WEBPACK_IMPORTED_MODULE_1__[\"Bank\"]('textures', ['skybox-space'], {extension: 'png', mediaType: 'img'});\r\n\r\n    const glslParser = new Akila_utils__WEBPACK_IMPORTED_MODULE_1__[\"GLSLParser\"]();\r\n    const shaderBank = new Akila_utils__WEBPACK_IMPORTED_MODULE_1__[\"Bank\"]('shaders', ['main', 'skybox'], {extension: 'glsl', treatment: glslParser.getPrograms.bind(glslParser)});\r\n\r\n    time.onInit(async () => {\r\n        await meshBank.load();\r\n        await shaderBank.load();\r\n        await textureBank.load();\r\n        const parts = Akila_utils__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].kbm(meshBank.get('jetHuge'));\r\n\r\n        console.log(parts);\r\n\r\n        shaders.main = new Akila_webgl__WEBPACK_IMPORTED_MODULE_0__[\"Shader\"](shaderBank.get('main').vertex, shaderBank.get('main').fragment);\r\n        shaders.skybox = new Akila_webgl__WEBPACK_IMPORTED_MODULE_0__[\"Shader\"](shaderBank.get('skybox').vertex, shaderBank.get('skybox').fragment);\r\n\r\n\r\n        models.terrain = new Array();\r\n        for(const p of parts.model) {\r\n            if(p.index) {\r\n                const step = 3 * 4 + 3 * 4 + 2 * 4;\r\n                models.terrain.push(\r\n                    new Akila_webgl__WEBPACK_IMPORTED_MODULE_0__[\"IndexedVAO\"]()\r\n                    .setIBO(new Akila_webgl__WEBPACK_IMPORTED_MODULE_0__[\"IBO\"](p.index))\r\n                    .addVBO(new Akila_webgl__WEBPACK_IMPORTED_MODULE_0__[\"AVBO\"](p.data)\r\n                        .addVertexAttribute(3, 0,    0,                step)\r\n                        .addVertexAttribute(3, 1,    3 * 4,            step)\r\n                        .addVertexAttribute(2, 2,    3 * 4 + 3 * 4,    step)\r\n                    )\r\n                );\r\n            } else {\r\n                const step = 3 * 4 + 3 * 4 + 2 * 4;\r\n                models.terrain.push(\r\n                    new Akila_webgl__WEBPACK_IMPORTED_MODULE_0__[\"VAO\"]()\r\n                    .addVBO(new Akila_webgl__WEBPACK_IMPORTED_MODULE_0__[\"AVBO\"](p.data)\r\n                        .addVertexAttribute(3, 0,    0,                step)\r\n                        .addVertexAttribute(3, 1,    3 * 4,            step)\r\n                        .addVertexAttribute(2, 2,    3 * 4 + 3 * 4,    step)\r\n                    )\r\n                );\r\n            }\r\n\r\n            models.terrain.transform = Akila_math__WEBPACK_IMPORTED_MODULE_2__[\"quat2\"].create();\r\n        }\r\n\r\n\r\n        textures.skybox = Akila_utils__WEBPACK_IMPORTED_MODULE_1__[\"CubeMapTextureBuilder\"].fromSingleImage(textureBank.get('skybox-space'));\r\n\r\n        models.skybox = new Akila_webgl__WEBPACK_IMPORTED_MODULE_0__[\"VAO\"]().addVBO(new Akila_webgl__WEBPACK_IMPORTED_MODULE_0__[\"VBO\"](genSkyBoxCube(1), 3, 0));\r\n    });\r\n\r\n    time.onTick(() => {\r\n        Akila_math__WEBPACK_IMPORTED_MODULE_2__[\"quat2\"].rotateZ(models.terrain.transform, models.terrain.transform, Akila_time__WEBPACK_IMPORTED_MODULE_3__[\"Time\"].delta); \r\n    });\r\n    \r\n    time.onDraw(() => {\r\n        camera.update();\r\n\r\n        display.clear();\r\n\r\n        shaders.main.use();\r\n        shaders.main.sendMat4('model', Akila_math__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].fromQuat2(Akila_math__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].create(), models.terrain.transform));\r\n        shaders.main.sendMat4('vp', camera.getVPMatrix());\r\n\r\n        for(const p of models.terrain) {\r\n            p.draw();\r\n        }\r\n\r\n        shaders.skybox.use();\r\n        display.depthFunc(Akila_webgl__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].LEQUAL);\r\n        shaders.skybox.sendMat4('projection', camera.getProjectionMatrix());\r\n        shaders.skybox.sendMat4('view', Akila_math__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].copyNoTranslate(Akila_math__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].create(), camera.getCameraMatrix()));\r\n        textures.skybox.use();\r\n        models.skybox.draw();\r\n        display.depthFunc(Akila_webgl__WEBPACK_IMPORTED_MODULE_0__[\"Display\"].LESS);\r\n    });\r\n    \r\n    time.start();\r\n}\r\n\r\n\r\n\r\nconst genSkyBoxCube = (size) => {\r\n    const b = new Array();\r\n\r\n    b.push(-size); b.push( size); b.push(-size);\r\n    b.push(-size); b.push(-size); b.push(-size);\r\n    b.push( size); b.push(-size); b.push(-size);\r\n    b.push( size); b.push(-size); b.push(-size);\r\n    b.push( size); b.push( size); b.push(-size);\r\n    b.push(-size); b.push( size); b.push(-size);\r\n\r\n    b.push(-size); b.push(-size); b.push( size);\r\n    b.push(-size); b.push(-size); b.push(-size);\r\n    b.push(-size); b.push( size); b.push(-size);\r\n    b.push(-size); b.push( size); b.push(-size);\r\n    b.push(-size); b.push( size); b.push( size);\r\n    b.push(-size); b.push(-size); b.push( size);\r\n\r\n    b.push( size); b.push(-size); b.push(-size);\r\n    b.push( size); b.push(-size); b.push( size);\r\n    b.push( size); b.push( size); b.push( size);\r\n    b.push( size); b.push( size); b.push( size);\r\n    b.push( size); b.push( size); b.push(-size);\r\n    b.push( size); b.push(-size); b.push(-size);\r\n\r\n    b.push(-size); b.push(-size); b.push( size);\r\n    b.push(-size); b.push( size); b.push( size);\r\n    b.push( size); b.push( size); b.push( size);\r\n    b.push( size); b.push( size); b.push( size);\r\n    b.push( size); b.push(-size); b.push( size);\r\n    b.push(-size); b.push(-size); b.push( size);\r\n\r\n    b.push(-size); b.push( size); b.push(-size);\r\n    b.push( size); b.push( size); b.push(-size);\r\n    b.push( size); b.push( size); b.push( size);\r\n    b.push( size); b.push( size); b.push( size);\r\n    b.push(-size); b.push( size); b.push( size);\r\n    b.push(-size); b.push( size); b.push(-size);\r\n\r\n    b.push(-size); b.push(-size); b.push(-size);\r\n    b.push(-size); b.push(-size); b.push( size);\r\n    b.push( size); b.push(-size); b.push(-size);\r\n    b.push( size); b.push(-size); b.push(-size);\r\n    b.push(-size); b.push(-size); b.push( size);\r\n    b.push( size); b.push(-size); b.push( size);\r\n\r\n    return new Float32Array(b);\r\n}\r\n\n\n//# sourceURL=webpack:///./src/main3.js?");

/***/ })

/******/ });